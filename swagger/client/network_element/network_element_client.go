// Code generated by go-swagger; DO NOT EDIT.

package network_element

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new network element API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for network element API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteNetworkElement deletes a network element

The deleteNetworkElement operation enables you to delete a network element from IPControl.
*/
func (a *Client) DeleteNetworkElement(params *DeleteNetworkElementParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkElementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkElementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkElement",
		Method:             "DELETE",
		PathPattern:        "/Deletes/deleteNetworkElement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteNetworkElementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNetworkElementOK), nil

}

/*
EndExportNetworkElement exports network elements

The endExportNetworkElement operation is an optional final step in the series of calls to export network elements from IPControl. Invoking this operation enables IPControl to clean up session information.
*/
func (a *Client) EndExportNetworkElement(params *EndExportNetworkElementParams, authInfo runtime.ClientAuthInfoWriter) (*EndExportNetworkElementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndExportNetworkElementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "endExportNetworkElement",
		Method:             "POST",
		PathPattern:        "/Exports/endExportNetworkElement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EndExportNetworkElementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EndExportNetworkElementOK), nil

}

/*
ExportNetworkElement exports network elements

The exportNetworkElement operation enables you to export network elements from IPControl. Before invoking the exportNetworkElement operation, you must use initExportNetworkElement to initialize the API. The response returned from the init operation becomes the input to this operation.
*/
func (a *Client) ExportNetworkElement(params *ExportNetworkElementParams, authInfo runtime.ClientAuthInfoWriter) (*ExportNetworkElementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportNetworkElementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportNetworkElement",
		Method:             "POST",
		PathPattern:        "/Exports/exportNetworkElement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportNetworkElementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportNetworkElementOK), nil

}

/*
GetNetworkElementByName gets a network element

Retrieve information about a network element by identifying its name.
*/
func (a *Client) GetNetworkElementByName(params *GetNetworkElementByNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkElementByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkElementByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkElementByName",
		Method:             "GET",
		PathPattern:        "/Gets/getNetworkElementByName",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworkElementByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworkElementByNameOK), nil

}

/*
GetNetworkElementByNameOrIPAddress gets a network element by identifying its IP address

Retrieve information about a network element by identifying its IP address.
*/
func (a *Client) GetNetworkElementByNameOrIPAddress(params *GetNetworkElementByNameOrIPAddressParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkElementByNameOrIPAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkElementByNameOrIPAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkElementByNameOrIpAddress",
		Method:             "GET",
		PathPattern:        "/Gets/getNetworkElementByNameOrIpAddress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworkElementByNameOrIPAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworkElementByNameOrIPAddressOK), nil

}

/*
ImportNetworkElement imports a network element

The importNetworkElement operation enables you to import a network element to IPControl. The API also supports updating a network element that already exists in the system by specifying its id.
*/
func (a *Client) ImportNetworkElement(params *ImportNetworkElementParams, authInfo runtime.ClientAuthInfoWriter) (*ImportNetworkElementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportNetworkElementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importNetworkElement",
		Method:             "POST",
		PathPattern:        "/Imports/importNetworkElement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportNetworkElementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ImportNetworkElementOK), nil

}

/*
InitExportNetworkElement exports network elements

The initExportNetworkElement operation enables you to export network elements from IPControl. You can filter the list of network elements retrieved. There are no options defined for this operation. When pageSize and firstResultPos are specified, is returned a list of structures is returned as described for the exportNetworkElement operation. Otherwise, the returned structure can be passed on a subsequent exportNetworkElement operation to retrieve results.
*/
func (a *Client) InitExportNetworkElement(params *InitExportNetworkElementParams, authInfo runtime.ClientAuthInfoWriter) (*InitExportNetworkElementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitExportNetworkElementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initExportNetworkElement",
		Method:             "POST",
		PathPattern:        "/Exports/initExportNetworkElement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitExportNetworkElementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InitExportNetworkElementOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
