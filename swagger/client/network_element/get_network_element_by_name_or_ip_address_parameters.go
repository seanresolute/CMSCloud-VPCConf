// Code generated by go-swagger; DO NOT EDIT.

package network_element

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetNetworkElementByNameOrIPAddressParams creates a new GetNetworkElementByNameOrIPAddressParams object
// with the default values initialized.
func NewGetNetworkElementByNameOrIPAddressParams() *GetNetworkElementByNameOrIPAddressParams {
	var ()
	return &GetNetworkElementByNameOrIPAddressParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworkElementByNameOrIPAddressParamsWithTimeout creates a new GetNetworkElementByNameOrIPAddressParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNetworkElementByNameOrIPAddressParamsWithTimeout(timeout time.Duration) *GetNetworkElementByNameOrIPAddressParams {
	var ()
	return &GetNetworkElementByNameOrIPAddressParams{

		timeout: timeout,
	}
}

// NewGetNetworkElementByNameOrIPAddressParamsWithContext creates a new GetNetworkElementByNameOrIPAddressParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNetworkElementByNameOrIPAddressParamsWithContext(ctx context.Context) *GetNetworkElementByNameOrIPAddressParams {
	var ()
	return &GetNetworkElementByNameOrIPAddressParams{

		Context: ctx,
	}
}

// NewGetNetworkElementByNameOrIPAddressParamsWithHTTPClient creates a new GetNetworkElementByNameOrIPAddressParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNetworkElementByNameOrIPAddressParamsWithHTTPClient(client *http.Client) *GetNetworkElementByNameOrIPAddressParams {
	var ()
	return &GetNetworkElementByNameOrIPAddressParams{
		HTTPClient: client,
	}
}

/*GetNetworkElementByNameOrIPAddressParams contains all the parameters to send to the API endpoint
for the get network element by name or Ip address operation typically these are written to a http.Request
*/
type GetNetworkElementByNameOrIPAddressParams struct {

	/*NetElementIPAddress
	  The IP address of the network element

	*/
	NetElementIPAddress string
	/*NetElementName
	  The name of the network element, to resolve ambiguity of ipAddress

	*/
	NetElementName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get network element by name or Ip address params
func (o *GetNetworkElementByNameOrIPAddressParams) WithTimeout(timeout time.Duration) *GetNetworkElementByNameOrIPAddressParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get network element by name or Ip address params
func (o *GetNetworkElementByNameOrIPAddressParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get network element by name or Ip address params
func (o *GetNetworkElementByNameOrIPAddressParams) WithContext(ctx context.Context) *GetNetworkElementByNameOrIPAddressParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get network element by name or Ip address params
func (o *GetNetworkElementByNameOrIPAddressParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get network element by name or Ip address params
func (o *GetNetworkElementByNameOrIPAddressParams) WithHTTPClient(client *http.Client) *GetNetworkElementByNameOrIPAddressParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get network element by name or Ip address params
func (o *GetNetworkElementByNameOrIPAddressParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNetElementIPAddress adds the netElementIPAddress to the get network element by name or Ip address params
func (o *GetNetworkElementByNameOrIPAddressParams) WithNetElementIPAddress(netElementIPAddress string) *GetNetworkElementByNameOrIPAddressParams {
	o.SetNetElementIPAddress(netElementIPAddress)
	return o
}

// SetNetElementIPAddress adds the netElementIpAddress to the get network element by name or Ip address params
func (o *GetNetworkElementByNameOrIPAddressParams) SetNetElementIPAddress(netElementIPAddress string) {
	o.NetElementIPAddress = netElementIPAddress
}

// WithNetElementName adds the netElementName to the get network element by name or Ip address params
func (o *GetNetworkElementByNameOrIPAddressParams) WithNetElementName(netElementName *string) *GetNetworkElementByNameOrIPAddressParams {
	o.SetNetElementName(netElementName)
	return o
}

// SetNetElementName adds the netElementName to the get network element by name or Ip address params
func (o *GetNetworkElementByNameOrIPAddressParams) SetNetElementName(netElementName *string) {
	o.NetElementName = netElementName
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworkElementByNameOrIPAddressParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param netElementIpAddress
	qrNetElementIPAddress := o.NetElementIPAddress
	qNetElementIPAddress := qrNetElementIPAddress
	if qNetElementIPAddress != "" {
		if err := r.SetQueryParam("netElementIpAddress", qNetElementIPAddress); err != nil {
			return err
		}
	}

	if o.NetElementName != nil {

		// query param netElementName
		var qrNetElementName string
		if o.NetElementName != nil {
			qrNetElementName = *o.NetElementName
		}
		qNetElementName := qrNetElementName
		if qNetElementName != "" {
			if err := r.SetQueryParam("netElementName", qNetElementName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
