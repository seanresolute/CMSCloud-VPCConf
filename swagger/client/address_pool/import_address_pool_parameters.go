// Code generated by go-swagger; DO NOT EDIT.

package address_pool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewImportAddressPoolParams creates a new ImportAddressPoolParams object
// with the default values initialized.
func NewImportAddressPoolParams() *ImportAddressPoolParams {
	var ()
	return &ImportAddressPoolParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewImportAddressPoolParamsWithTimeout creates a new ImportAddressPoolParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewImportAddressPoolParamsWithTimeout(timeout time.Duration) *ImportAddressPoolParams {
	var ()
	return &ImportAddressPoolParams{

		timeout: timeout,
	}
}

// NewImportAddressPoolParamsWithContext creates a new ImportAddressPoolParams object
// with the default values initialized, and the ability to set a context for a request
func NewImportAddressPoolParamsWithContext(ctx context.Context) *ImportAddressPoolParams {
	var ()
	return &ImportAddressPoolParams{

		Context: ctx,
	}
}

// NewImportAddressPoolParamsWithHTTPClient creates a new ImportAddressPoolParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewImportAddressPoolParamsWithHTTPClient(client *http.Client) *ImportAddressPoolParams {
	var ()
	return &ImportAddressPoolParams{
		HTTPClient: client,
	}
}

/*ImportAddressPoolParams contains all the parameters to send to the API endpoint
for the import address pool operation typically these are written to a http.Request
*/
type ImportAddressPoolParams struct {

	/*ImportParameters
	  The input describing the address pool. The following parameters are required: startAddr, endAddr (IPv4 only), prefixLength (IPv6 only). Note: primaryNetService is required when a DHCP server is not defined for the subnet, and this address pool is one of the DHCP address types: 'Dynamic DHCP', 'Automatic DHCP', 'Dynamic NA DHCPv6', 'Automatic NA DHCPv6', 'Dynamic TA DHCPv6', 'Automatic TA DHCPv6'.

	*/
	ImportParameters ImportAddressPoolBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the import address pool params
func (o *ImportAddressPoolParams) WithTimeout(timeout time.Duration) *ImportAddressPoolParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the import address pool params
func (o *ImportAddressPoolParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the import address pool params
func (o *ImportAddressPoolParams) WithContext(ctx context.Context) *ImportAddressPoolParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the import address pool params
func (o *ImportAddressPoolParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the import address pool params
func (o *ImportAddressPoolParams) WithHTTPClient(client *http.Client) *ImportAddressPoolParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the import address pool params
func (o *ImportAddressPoolParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithImportParameters adds the importParameters to the import address pool params
func (o *ImportAddressPoolParams) WithImportParameters(importParameters ImportAddressPoolBody) *ImportAddressPoolParams {
	o.SetImportParameters(importParameters)
	return o
}

// SetImportParameters adds the importParameters to the import address pool params
func (o *ImportAddressPoolParams) SetImportParameters(importParameters ImportAddressPoolBody) {
	o.ImportParameters = importParameters
}

// WriteToRequest writes these params to a swagger request
func (o *ImportAddressPoolParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.ImportParameters); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
