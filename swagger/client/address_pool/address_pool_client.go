// Code generated by go-swagger; DO NOT EDIT.

package address_pool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new address pool API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for address pool API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAddrPool deletes an address pool

The deleteAddrPool operation enables you to delete an address pool from a block in IPControl.
*/
func (a *Client) DeleteAddrPool(params *DeleteAddrPoolParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAddrPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAddrPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAddrPool",
		Method:             "DELETE",
		PathPattern:        "/Deletes/deleteAddrPool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAddrPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAddrPoolOK), nil

}

/*
EndExportAddressPool exports address pools

The endExportAddressPool operation is an optional final step in the series of calls to export address pools from IPControl. Invoking this operation enables IPControl to clean up session information.
*/
func (a *Client) EndExportAddressPool(params *EndExportAddressPoolParams, authInfo runtime.ClientAuthInfoWriter) (*EndExportAddressPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndExportAddressPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "endExportAddressPool",
		Method:             "POST",
		PathPattern:        "/Exports/endExportAddressPool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EndExportAddressPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EndExportAddressPoolOK), nil

}

/*
ExportAddressPool exports address pools

The exportAddressPool operation enables you to export address pools from IPControl. Before invoking the exportAddressPool operation, you must use initExportAddressPool to initialize the API. The response returned from the init operation becomes the input to this operation.
*/
func (a *Client) ExportAddressPool(params *ExportAddressPoolParams, authInfo runtime.ClientAuthInfoWriter) (*ExportAddressPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportAddressPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportAddressPool",
		Method:             "POST",
		PathPattern:        "/Exports/exportAddressPool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportAddressPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportAddressPoolOK), nil

}

/*
GetAddressPool gets an address pool

Retrieve information about an address pool.
*/
func (a *Client) GetAddressPool(params *GetAddressPoolParams, authInfo runtime.ClientAuthInfoWriter) (*GetAddressPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAddressPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAddressPool",
		Method:             "GET",
		PathPattern:        "/Gets/getAddressPool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAddressPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAddressPoolOK), nil

}

/*
ImportAddressPool imports an address pool

The importAddressPool operation enables you to import an address pool. It can also be used to modify an existing address pool by specifying the id.
*/
func (a *Client) ImportAddressPool(params *ImportAddressPoolParams, authInfo runtime.ClientAuthInfoWriter) (*ImportAddressPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportAddressPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importAddressPool",
		Method:             "POST",
		PathPattern:        "/Imports/importAddressPool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportAddressPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ImportAddressPoolOK), nil

}

/*
InitExportAddressPool exports address pools

The initExportAddressPool operation enables you to issue a request to retrieve a list of address pools. There are no options defined for this operation. When pageSize and firstResultPos are specified, is a list of structures is returned as described for the exportAddressPool operation. Otherwise, the returned structure can be passed on a subsequent exportAddressPool operation to retrieve results.
*/
func (a *Client) InitExportAddressPool(params *InitExportAddressPoolParams, authInfo runtime.ClientAuthInfoWriter) (*InitExportAddressPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitExportAddressPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initExportAddressPool",
		Method:             "POST",
		PathPattern:        "/Exports/initExportAddressPool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitExportAddressPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InitExportAddressPoolOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
