// Code generated by go-swagger; DO NOT EDIT.

package administrator_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new administrator role API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for administrator role API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAdminRole deletes an administrator role

The deleteAdminRole operation enables you to delete an administrator role from IPControl.
*/
func (a *Client) DeleteAdminRole(params *DeleteAdminRoleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAdminRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAdminRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAdminRole",
		Method:             "DELETE",
		PathPattern:        "/Deletes/deleteAdminRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAdminRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAdminRoleOK), nil

}

/*
EndExportAdminRole exports administrator roles

The endExportAdminRole operation is an optional final step in the series of calls to export administrator roles from IPControl. Invoking this operation enables IPControl to clean up session information.
*/
func (a *Client) EndExportAdminRole(params *EndExportAdminRoleParams, authInfo runtime.ClientAuthInfoWriter) (*EndExportAdminRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndExportAdminRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "endExportAdminRole",
		Method:             "POST",
		PathPattern:        "/Exports/endExportAdminRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EndExportAdminRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EndExportAdminRoleOK), nil

}

/*
ExportAdminRole exports administrator roles

The exportAdminRole operation enables you to export administrator roles from IPControl. Before invoking the exportAdminRole operation, you must use initExportAdminRole to initialize the API. The response returned from the init operation becomes the input to this operation.
*/
func (a *Client) ExportAdminRole(params *ExportAdminRoleParams, authInfo runtime.ClientAuthInfoWriter) (*ExportAdminRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportAdminRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportAdminRole",
		Method:             "POST",
		PathPattern:        "/Exports/exportAdminRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportAdminRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportAdminRoleOK), nil

}

/*
GetAdminRole gets an administrator role

Retrieve information about an administrator role.
*/
func (a *Client) GetAdminRole(params *GetAdminRoleParams, authInfo runtime.ClientAuthInfoWriter) (*GetAdminRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAdminRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAdminRole",
		Method:             "GET",
		PathPattern:        "/Gets/getAdminRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAdminRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAdminRoleOK), nil

}

/*
ImportAdminRole imports an administrator role

The ImportAdminRole operation enables you to import administrator roles to IPControl. It can also be used to modify an existing administrator role by specifying its id. Note that only administrators of administrator type 'MASTER' can invoke this API.
*/
func (a *Client) ImportAdminRole(params *ImportAdminRoleParams, authInfo runtime.ClientAuthInfoWriter) (*ImportAdminRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportAdminRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importAdminRole",
		Method:             "POST",
		PathPattern:        "/Imports/importAdminRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportAdminRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ImportAdminRoleOK), nil

}

/*
InitExportAdminRole exports administrator roles

The initExportAdminRole operation enables you to export administrator roles from IPControl. You can filter the list of roles retrieved. There are no options for this operation. When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportAdminRole operation. Otherwise, the returned structure can be passed on a subsequent exportAdmin operation to retrieve results.
*/
func (a *Client) InitExportAdminRole(params *InitExportAdminRoleParams, authInfo runtime.ClientAuthInfoWriter) (*InitExportAdminRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitExportAdminRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initExportAdminRole",
		Method:             "POST",
		PathPattern:        "/Exports/initExportAdminRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitExportAdminRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InitExportAdminRoleOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
