// Code generated by go-swagger; DO NOT EDIT.

package administrator_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAdminRoleParams creates a new GetAdminRoleParams object
// with the default values initialized.
func NewGetAdminRoleParams() *GetAdminRoleParams {
	var ()
	return &GetAdminRoleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAdminRoleParamsWithTimeout creates a new GetAdminRoleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAdminRoleParamsWithTimeout(timeout time.Duration) *GetAdminRoleParams {
	var ()
	return &GetAdminRoleParams{

		timeout: timeout,
	}
}

// NewGetAdminRoleParamsWithContext creates a new GetAdminRoleParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAdminRoleParamsWithContext(ctx context.Context) *GetAdminRoleParams {
	var ()
	return &GetAdminRoleParams{

		Context: ctx,
	}
}

// NewGetAdminRoleParamsWithHTTPClient creates a new GetAdminRoleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAdminRoleParamsWithHTTPClient(client *http.Client) *GetAdminRoleParams {
	var ()
	return &GetAdminRoleParams{
		HTTPClient: client,
	}
}

/*GetAdminRoleParams contains all the parameters to send to the API endpoint
for the get admin role operation typically these are written to a http.Request
*/
type GetAdminRoleParams struct {

	/*AdminRoleName
	  The name of the administrator role

	*/
	AdminRoleName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get admin role params
func (o *GetAdminRoleParams) WithTimeout(timeout time.Duration) *GetAdminRoleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get admin role params
func (o *GetAdminRoleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get admin role params
func (o *GetAdminRoleParams) WithContext(ctx context.Context) *GetAdminRoleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get admin role params
func (o *GetAdminRoleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get admin role params
func (o *GetAdminRoleParams) WithHTTPClient(client *http.Client) *GetAdminRoleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get admin role params
func (o *GetAdminRoleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAdminRoleName adds the adminRoleName to the get admin role params
func (o *GetAdminRoleParams) WithAdminRoleName(adminRoleName string) *GetAdminRoleParams {
	o.SetAdminRoleName(adminRoleName)
	return o
}

// SetAdminRoleName adds the adminRoleName to the get admin role params
func (o *GetAdminRoleParams) SetAdminRoleName(adminRoleName string) {
	o.AdminRoleName = adminRoleName
}

// WriteToRequest writes these params to a swagger request
func (o *GetAdminRoleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param adminRoleName
	qrAdminRoleName := o.AdminRoleName
	qAdminRoleName := qrAdminRoleName
	if qAdminRoleName != "" {
		if err := r.SetQueryParam("adminRoleName", qAdminRoleName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
