// Code generated by go-swagger; DO NOT EDIT.

package root_block

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new root block API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for root block API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
EndExportRootBlock exports root blocks

The endExportRootBlock operation is an optional final step in the series of calls to export root blocks from IPControl. Invoking this operation enables IPControl to clean up session information.
*/
func (a *Client) EndExportRootBlock(params *EndExportRootBlockParams, authInfo runtime.ClientAuthInfoWriter) (*EndExportRootBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndExportRootBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "endExportRootBlock",
		Method:             "POST",
		PathPattern:        "/Exports/endExportRootBlock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EndExportRootBlockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EndExportRootBlockOK), nil

}

/*
ExportRootBlock exports root blocks

The exportRootBlock operation enables you to export root blocks from IPControl. Before invoking the exportRootBlock operation, you must use initExportRootBlock to initialize the API. The response returned from the init operation becomes the input to this operation.
*/
func (a *Client) ExportRootBlock(params *ExportRootBlockParams, authInfo runtime.ClientAuthInfoWriter) (*ExportRootBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportRootBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportRootBlock",
		Method:             "POST",
		PathPattern:        "/Exports/exportRootBlock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportRootBlockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportRootBlockOK), nil

}

/*
ImportRootBlock imports a root block

The importRootBlock operation enables you to import a root block to IPControl.
*/
func (a *Client) ImportRootBlock(params *ImportRootBlockParams, authInfo runtime.ClientAuthInfoWriter) (*ImportRootBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportRootBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importRootBlock",
		Method:             "POST",
		PathPattern:        "/Imports/importRootBlock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportRootBlockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ImportRootBlockOK), nil

}

/*
InitExportRootBlock exports root blocks

The initExportRootBlock operation enables you to export root blocks from IPControl. You can filter the list of blocks retrieved. When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportRootBlock operation. Otherwise, the returned structure can be passed on a subsequent exportRootBlock operation to retrieve results.
*/
func (a *Client) InitExportRootBlock(params *InitExportRootBlockParams, authInfo runtime.ClientAuthInfoWriter) (*InitExportRootBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitExportRootBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initExportRootBlock",
		Method:             "POST",
		PathPattern:        "/Exports/initExportRootBlock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitExportRootBlockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InitExportRootBlockOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
