// Code generated by go-swagger; DO NOT EDIT.

package domain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewImportDomainParams creates a new ImportDomainParams object
// with the default values initialized.
func NewImportDomainParams() *ImportDomainParams {
	var ()
	return &ImportDomainParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewImportDomainParamsWithTimeout creates a new ImportDomainParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewImportDomainParamsWithTimeout(timeout time.Duration) *ImportDomainParams {
	var ()
	return &ImportDomainParams{

		timeout: timeout,
	}
}

// NewImportDomainParamsWithContext creates a new ImportDomainParams object
// with the default values initialized, and the ability to set a context for a request
func NewImportDomainParamsWithContext(ctx context.Context) *ImportDomainParams {
	var ()
	return &ImportDomainParams{

		Context: ctx,
	}
}

// NewImportDomainParamsWithHTTPClient creates a new ImportDomainParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewImportDomainParamsWithHTTPClient(client *http.Client) *ImportDomainParams {
	var ()
	return &ImportDomainParams{
		HTTPClient: client,
	}
}

/*ImportDomainParams contains all the parameters to send to the API endpoint
for the import domain operation typically these are written to a http.Request
*/
type ImportDomainParams struct {

	/*ImportParameters
	  The input describing the domain. The domainName parameter is required. In addition, when importing an 'ALIAS' domain its domain type is used to help locate the named 'TEMPLATE' domain it will be aliased to. Therefore they MUST match for the template domain to be found. Also specify userDefinedFields defined as required fields, using comma-separated name=value pairs, where each pair is enclosed in double quotes.

	*/
	ImportParameters ImportDomainBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the import domain params
func (o *ImportDomainParams) WithTimeout(timeout time.Duration) *ImportDomainParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the import domain params
func (o *ImportDomainParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the import domain params
func (o *ImportDomainParams) WithContext(ctx context.Context) *ImportDomainParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the import domain params
func (o *ImportDomainParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the import domain params
func (o *ImportDomainParams) WithHTTPClient(client *http.Client) *ImportDomainParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the import domain params
func (o *ImportDomainParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithImportParameters adds the importParameters to the import domain params
func (o *ImportDomainParams) WithImportParameters(importParameters ImportDomainBody) *ImportDomainParams {
	o.SetImportParameters(importParameters)
	return o
}

// SetImportParameters adds the importParameters to the import domain params
func (o *ImportDomainParams) SetImportParameters(importParameters ImportDomainBody) {
	o.ImportParameters = importParameters
}

// WriteToRequest writes these params to a swagger request
func (o *ImportDomainParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.ImportParameters); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
