// Code generated by go-swagger; DO NOT EDIT.

package domain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new domain API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for domain API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteDomain deletes a domain

The deleteDomain operation enables you to delete a domain from IPControl.
*/
func (a *Client) DeleteDomain(params *DeleteDomainParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDomain",
		Method:             "DELETE",
		PathPattern:        "/Deletes/deleteDomain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDomainOK), nil

}

/*
ImportDomain imports a domain

The ImportDomain API enables you import a domain to IPControl.
*/
func (a *Client) ImportDomain(params *ImportDomainParams, authInfo runtime.ClientAuthInfoWriter) (*ImportDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importDomain",
		Method:             "POST",
		PathPattern:        "/Imports/importDomain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ImportDomainOK), nil

}

/*
ImportGalaxyDomain imports a galaxy domain

The ImportGalaxyDomain API enables you to assign domains to galaxies in IPControl
*/
func (a *Client) ImportGalaxyDomain(params *ImportGalaxyDomainParams, authInfo runtime.ClientAuthInfoWriter) (*ImportGalaxyDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportGalaxyDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importGalaxyDomain",
		Method:             "POST",
		PathPattern:        "/Imports/importGalaxyDomain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportGalaxyDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ImportGalaxyDomainOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
