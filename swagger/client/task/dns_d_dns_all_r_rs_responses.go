// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/models"
)

// DNSDDNSAllRRsReader is a Reader for the DNSDDNSAllRRs structure.
type DNSDDNSAllRRsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DNSDDNSAllRRsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDNSDDNSAllRRsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewDNSDDNSAllRRsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDNSDDNSAllRRsOK creates a DNSDDNSAllRRsOK with default headers values
func NewDNSDDNSAllRRsOK() *DNSDDNSAllRRsOK {
	return &DNSDDNSAllRRsOK{}
}

/*DNSDDNSAllRRsOK handles this case with default header values.

integer returned
*/
type DNSDDNSAllRRsOK struct {
	Payload *DNSDDNSAllRRsOKBody
}

func (o *DNSDDNSAllRRsOK) Error() string {
	return fmt.Sprintf("[POST /TaskInvocation/dnsDDNSAllRRs][%d] dnsDDnsAllRRsOK  %+v", 200, o.Payload)
}

func (o *DNSDDNSAllRRsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DNSDDNSAllRRsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDNSDDNSAllRRsDefault creates a DNSDDNSAllRRsDefault with default headers values
func NewDNSDDNSAllRRsDefault(code int) *DNSDDNSAllRRsDefault {
	return &DNSDDNSAllRRsDefault{
		_statusCode: code,
	}
}

/*DNSDDNSAllRRsDefault handles this case with default header values.

Error response
*/
type DNSDDNSAllRRsDefault struct {
	_statusCode int

	Payload *models.Fault
}

// Code gets the status code for the dns d DNS all r rs default response
func (o *DNSDDNSAllRRsDefault) Code() int {
	return o._statusCode
}

func (o *DNSDDNSAllRRsDefault) Error() string {
	return fmt.Sprintf("[POST /TaskInvocation/dnsDDNSAllRRs][%d] dnsDDNSAllRRs default  %+v", o._statusCode, o.Payload)
}

func (o *DNSDDNSAllRRsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Fault)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DNSDDNSAllRRsBody DNS d DNS all r rs body
swagger:model DNSDDNSAllRRsBody
*/
type DNSDDNSAllRRsBody struct {

	// ip
	IP string `json:"ip,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// priority
	Priority bool `json:"priority,omitempty"`

	// user created option
	UserCreatedOption bool `json:"userCreatedOption,omitempty"`

	// view
	View string `json:"view,omitempty"`

	// zone
	Zone string `json:"zone,omitempty"`
}

// Validate validates this DNS d DNS all r rs body
func (o *DNSDDNSAllRRsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DNSDDNSAllRRsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DNSDDNSAllRRsBody) UnmarshalBinary(b []byte) error {
	var res DNSDDNSAllRRsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DNSDDNSAllRRsOKBody DNS d DNS all r rs o k body
swagger:model DNSDDNSAllRRsOKBody
*/
type DNSDDNSAllRRsOKBody struct {

	// result
	Result int64 `json:"result,omitempty"`
}

// Validate validates this DNS d DNS all r rs o k body
func (o *DNSDDNSAllRRsOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DNSDDNSAllRRsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DNSDDNSAllRRsOKBody) UnmarshalBinary(b []byte) error {
	var res DNSDDNSAllRRsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
