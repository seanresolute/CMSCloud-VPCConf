// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/models"
)

// DNSConfigurationAllFilesReader is a Reader for the DNSConfigurationAllFiles structure.
type DNSConfigurationAllFilesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DNSConfigurationAllFilesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDNSConfigurationAllFilesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewDNSConfigurationAllFilesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDNSConfigurationAllFilesOK creates a DNSConfigurationAllFilesOK with default headers values
func NewDNSConfigurationAllFilesOK() *DNSConfigurationAllFilesOK {
	return &DNSConfigurationAllFilesOK{}
}

/*DNSConfigurationAllFilesOK handles this case with default header values.

integer returned
*/
type DNSConfigurationAllFilesOK struct {
	Payload *DNSConfigurationAllFilesOKBody
}

func (o *DNSConfigurationAllFilesOK) Error() string {
	return fmt.Sprintf("[POST /TaskInvocation/dnsConfigurationConfigOnly][%d] dnsConfigurationAllFilesOK  %+v", 200, o.Payload)
}

func (o *DNSConfigurationAllFilesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DNSConfigurationAllFilesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDNSConfigurationAllFilesDefault creates a DNSConfigurationAllFilesDefault with default headers values
func NewDNSConfigurationAllFilesDefault(code int) *DNSConfigurationAllFilesDefault {
	return &DNSConfigurationAllFilesDefault{
		_statusCode: code,
	}
}

/*DNSConfigurationAllFilesDefault handles this case with default header values.

Error response
*/
type DNSConfigurationAllFilesDefault struct {
	_statusCode int

	Payload *models.Fault
}

// Code gets the status code for the dns configuration all files default response
func (o *DNSConfigurationAllFilesDefault) Code() int {
	return o._statusCode
}

func (o *DNSConfigurationAllFilesDefault) Error() string {
	return fmt.Sprintf("[POST /TaskInvocation/dnsConfigurationConfigOnly][%d] dnsConfigurationAllFiles default  %+v", o._statusCode, o.Payload)
}

func (o *DNSConfigurationAllFilesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Fault)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DNSConfigurationAllFilesBody DNS configuration all files body
swagger:model DNSConfigurationAllFilesBody
*/
type DNSConfigurationAllFilesBody struct {

	// abortfailedcheck
	Abortfailedcheck bool `json:"abortfailedcheck,omitempty"`

	// checkconf
	Checkconf bool `json:"checkconf,omitempty"`

	// creatediff
	Creatediff bool `json:"creatediff,omitempty"`

	// ip
	IP string `json:"ip,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// priority
	Priority bool `json:"priority,omitempty"`
}

// Validate validates this DNS configuration all files body
func (o *DNSConfigurationAllFilesBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DNSConfigurationAllFilesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DNSConfigurationAllFilesBody) UnmarshalBinary(b []byte) error {
	var res DNSConfigurationAllFilesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DNSConfigurationAllFilesOKBody DNS configuration all files o k body
swagger:model DNSConfigurationAllFilesOKBody
*/
type DNSConfigurationAllFilesOKBody struct {

	// result
	Result int64 `json:"result,omitempty"`
}

// Validate validates this DNS configuration all files o k body
func (o *DNSConfigurationAllFilesOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DNSConfigurationAllFilesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DNSConfigurationAllFilesOKBody) UnmarshalBinary(b []byte) error {
	var res DNSConfigurationAllFilesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
