// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDNSDDNSAllRRsParams creates a new DNSDDNSAllRRsParams object
// with the default values initialized.
func NewDNSDDNSAllRRsParams() *DNSDDNSAllRRsParams {
	var ()
	return &DNSDDNSAllRRsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDNSDDNSAllRRsParamsWithTimeout creates a new DNSDDNSAllRRsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDNSDDNSAllRRsParamsWithTimeout(timeout time.Duration) *DNSDDNSAllRRsParams {
	var ()
	return &DNSDDNSAllRRsParams{

		timeout: timeout,
	}
}

// NewDNSDDNSAllRRsParamsWithContext creates a new DNSDDNSAllRRsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDNSDDNSAllRRsParamsWithContext(ctx context.Context) *DNSDDNSAllRRsParams {
	var ()
	return &DNSDDNSAllRRsParams{

		Context: ctx,
	}
}

// NewDNSDDNSAllRRsParamsWithHTTPClient creates a new DNSDDNSAllRRsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDNSDDNSAllRRsParamsWithHTTPClient(client *http.Client) *DNSDDNSAllRRsParams {
	var ()
	return &DNSDDNSAllRRsParams{
		HTTPClient: client,
	}
}

/*DNSDDNSAllRRsParams contains all the parameters to send to the API endpoint
for the dns d DNS all r rs operation typically these are written to a http.Request
*/
type DNSDDNSAllRRsParams struct {

	/*TaskParameters
	  One of name or ip must be specified. name: DNS server name. ip: DNS server IP address. view: Zone view name (defaults to 'Default'); zone: Name of zone to push, or null for all; userCreatedOption: When set to true, sends only resource records created in IPControl. Use this option to periodically refresh the records in Microsoft AD DNS to prevent their scavenging, while not interfering with the intended scavenging of dynamic records. Set priority to true to create a high priority task.

	*/
	TaskParameters DNSDDNSAllRRsBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the dns d DNS all r rs params
func (o *DNSDDNSAllRRsParams) WithTimeout(timeout time.Duration) *DNSDDNSAllRRsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the dns d DNS all r rs params
func (o *DNSDDNSAllRRsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the dns d DNS all r rs params
func (o *DNSDDNSAllRRsParams) WithContext(ctx context.Context) *DNSDDNSAllRRsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the dns d DNS all r rs params
func (o *DNSDDNSAllRRsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the dns d DNS all r rs params
func (o *DNSDDNSAllRRsParams) WithHTTPClient(client *http.Client) *DNSDDNSAllRRsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the dns d DNS all r rs params
func (o *DNSDDNSAllRRsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTaskParameters adds the taskParameters to the dns d DNS all r rs params
func (o *DNSDDNSAllRRsParams) WithTaskParameters(taskParameters DNSDDNSAllRRsBody) *DNSDDNSAllRRsParams {
	o.SetTaskParameters(taskParameters)
	return o
}

// SetTaskParameters adds the taskParameters to the dns d DNS all r rs params
func (o *DNSDDNSAllRRsParams) SetTaskParameters(taskParameters DNSDDNSAllRRsBody) {
	o.TaskParameters = taskParameters
}

// WriteToRequest writes these params to a swagger request
func (o *DNSDDNSAllRRsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.TaskParameters); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
