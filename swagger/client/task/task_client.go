// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new task API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for task API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ArpDiscoverNetElement issues arp discovery task

Issue an immediate ArpDiscovery task to collect host information from a router's ARP cache. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.
*/
func (a *Client) ArpDiscoverNetElement(params *ArpDiscoverNetElementParams, authInfo runtime.ClientAuthInfoWriter) (*ArpDiscoverNetElementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArpDiscoverNetElementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "arpDiscoverNetElement",
		Method:             "POST",
		PathPattern:        "/TaskInvocation/arpDiscoverNetElement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ArpDiscoverNetElementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ArpDiscoverNetElementOK), nil

}

/*
DeleteTaskByDate deletes tasks by date

The deleteTaskByDate operation enables you to delete tasks from IPControl that are older than a given date. Specify the date as YYYY-MM-DDTHH:MM:SSZ. Specifying the time following the 'T' is optional. Examples: 2015-04-24T18:35:37.52Z, 2015-04-24T18:35:37Z or 2015-04-24.  The number of tasks deleted is returned in the result.
*/
func (a *Client) DeleteTaskByDate(params *DeleteTaskByDateParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTaskByDateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTaskByDateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTaskByDate",
		Method:             "DELETE",
		PathPattern:        "/Deletes/deleteTaskByDate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTaskByDateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTaskByDateOK), nil

}

/*
DeleteTaskByDays deletes tasks by days

The deleteTaskByDays operation enables you to delete tasks from IPControl that are older than a given number of days.  The number of tasks deleted is returned in the result.
*/
func (a *Client) DeleteTaskByDays(params *DeleteTaskByDaysParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTaskByDaysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTaskByDaysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTaskByDays",
		Method:             "DELETE",
		PathPattern:        "/Deletes/deleteTaskByDays",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTaskByDaysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTaskByDaysOK), nil

}

/*
DeleteTaskByID deletes tasks by id

The deleteTaskById operation enables you to delete tasks from IPControl by specifying their task ids. The number of tasks deleted is returned in the result.
*/
func (a *Client) DeleteTaskByID(params *DeleteTaskByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTaskByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTaskByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTaskById",
		Method:             "DELETE",
		PathPattern:        "/Deletes/deleteTaskById",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTaskByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTaskByIDOK), nil

}

/*
DhcpConfigurationAllFiles issues d h c p configuration task

Issue an immediate DHCP configuration task for a specified DHCP server. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.
*/
func (a *Client) DhcpConfigurationAllFiles(params *DhcpConfigurationAllFilesParams, authInfo runtime.ClientAuthInfoWriter) (*DhcpConfigurationAllFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDhcpConfigurationAllFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "dhcpConfigurationAllFiles",
		Method:             "POST",
		PathPattern:        "/TaskInvocation/dhcpConfigurationAllFiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DhcpConfigurationAllFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DhcpConfigurationAllFilesOK), nil

}

/*
DhcpConfigurationAllFilesByTag issues d h c p configuration task

Issue an immediate DHCP configuration task for a specified tag. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, a negative integer is returned in the response.
*/
func (a *Client) DhcpConfigurationAllFilesByTag(params *DhcpConfigurationAllFilesByTagParams, authInfo runtime.ClientAuthInfoWriter) (*DhcpConfigurationAllFilesByTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDhcpConfigurationAllFilesByTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "dhcpConfigurationAllFilesByTag",
		Method:             "POST",
		PathPattern:        "/TaskInvocation/dhcpConfigurationAllFilesByTag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DhcpConfigurationAllFilesByTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DhcpConfigurationAllFilesByTagOK), nil

}

/*
DhcpUtilization issues d h c p collection task

Issue an immediate DHCP Collection task to collect statistics on the utilization of a DHCP server. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.
*/
func (a *Client) DhcpUtilization(params *DhcpUtilizationParams, authInfo runtime.ClientAuthInfoWriter) (*DhcpUtilizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDhcpUtilizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "dhcpUtilization",
		Method:             "POST",
		PathPattern:        "/TaskInvocation/dhcpUtilization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DhcpUtilizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DhcpUtilizationOK), nil

}

/*
DiscoverNetElement discovers network element task

Issue an immediate discover task to discover the interfaces bound to a network element already defined in IPControl. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.
*/
func (a *Client) DiscoverNetElement(params *DiscoverNetElementParams, authInfo runtime.ClientAuthInfoWriter) (*DiscoverNetElementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiscoverNetElementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "discoverNetElement",
		Method:             "POST",
		PathPattern:        "/TaskInvocation/discoverNetElement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DiscoverNetElementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DiscoverNetElementOK), nil

}

/*
DiscoverSubnetHosts discovers subnet hosts

Issue an immediate task to discover the hosts that are connected to a single subnet, or all hosts for all subnets in a container. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task.
*/
func (a *Client) DiscoverSubnetHosts(params *DiscoverSubnetHostsParams, authInfo runtime.ClientAuthInfoWriter) (*DiscoverSubnetHostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiscoverSubnetHostsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "discoverSubnetHosts",
		Method:             "POST",
		PathPattern:        "/TaskInvocation/discoverSubnetHosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DiscoverSubnetHostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DiscoverSubnetHostsOK), nil

}

/*
DNSConfigurationAllFiles issues DNS configuration task

Issue an immediate DNS Configuration task to generate and deploy the configuration file for DNS servers. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.
*/
func (a *Client) DNSConfigurationAllFiles(params *DNSConfigurationAllFilesParams, authInfo runtime.ClientAuthInfoWriter) (*DNSConfigurationAllFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDNSConfigurationAllFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "dnsConfigurationAllFiles",
		Method:             "POST",
		PathPattern:        "/TaskInvocation/dnsConfigurationConfigOnly",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DNSConfigurationAllFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DNSConfigurationAllFilesOK), nil

}

/*
DNSConfigurationChangedZones issues DNS selected zone file push task

Issue an immediate DNS selected zone file push task for a specific DNS Server.   A zone can be specified to limit the push to one zone.If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.
*/
func (a *Client) DNSConfigurationChangedZones(params *DNSConfigurationChangedZonesParams, authInfo runtime.ClientAuthInfoWriter) (*DNSConfigurationChangedZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDNSConfigurationChangedZonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "dnsConfigurationChangedZones",
		Method:             "POST",
		PathPattern:        "/TaskInvocation/dnsConfigurationSelectedZones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DNSConfigurationChangedZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DNSConfigurationChangedZonesOK), nil

}

/*
DNSConfigurationChangedZonesByTag issues DNS configuration changed zones task

Issue an immediate DNS Configuration task to generate and deploy changed configuration and zone files for DNS servers. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, a negative integer returned in the response.
*/
func (a *Client) DNSConfigurationChangedZonesByTag(params *DNSConfigurationChangedZonesByTagParams, authInfo runtime.ClientAuthInfoWriter) (*DNSConfigurationChangedZonesByTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDNSConfigurationChangedZonesByTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "dnsConfigurationChangedZonesByTag",
		Method:             "POST",
		PathPattern:        "/TaskInvocation/dnsConfigurationChangedZonesByTag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DNSConfigurationChangedZonesByTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DNSConfigurationChangedZonesByTagOK), nil

}

/*
DNSDDNSAllRRs issues dynamic DNS resource records push task

Issue an immediate Dynamic DNS configuration task to generate and deploy resource records for DNS servers. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.
*/
func (a *Client) DNSDDNSAllRRs(params *DNSDDNSAllRRsParams, authInfo runtime.ClientAuthInfoWriter) (*DNSDDNSAllRRsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDNSDDNSAllRRsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "dnsDDNSAllRRs",
		Method:             "POST",
		PathPattern:        "/TaskInvocation/dnsDDNSAllRRs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DNSDDNSAllRRsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DNSDDNSAllRRsOK), nil

}

/*
DNSDDNSAllRRsByTag issues dynamic DNS resource records push task

Issue an immediate Dynamic DNS configuration task to generate and deploy resource records for DNS servers. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, a negative integer is returned in the response.
*/
func (a *Client) DNSDDNSAllRRsByTag(params *DNSDDNSAllRRsByTagParams, authInfo runtime.ClientAuthInfoWriter) (*DNSDDNSAllRRsByTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDNSDDNSAllRRsByTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "dnsDDNSAllRRsByTag",
		Method:             "POST",
		PathPattern:        "/TaskInvocation/dnsDDNSAllRRsByTag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DNSDDNSAllRRsByTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DNSDDNSAllRRsByTagOK), nil

}

/*
DNSDDNSChangedRRs issues dynamic DNS configuration changed resource records task

Issue an immediate Dynamic DNS Configuration task to generate and deploy changed resource records for DNS servers. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.
*/
func (a *Client) DNSDDNSChangedRRs(params *DNSDDNSChangedRRsParams, authInfo runtime.ClientAuthInfoWriter) (*DNSDDNSChangedRRsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDNSDDNSChangedRRsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "dnsDDNSChangedRRs",
		Method:             "POST",
		PathPattern:        "/TaskInvocation/dnsDDNSChangedRRs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DNSDDNSChangedRRsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DNSDDNSChangedRRsOK), nil

}

/*
DNSDDNSChangedRRsByTag issues dynamic DNS configuration changed resource records task

Issue an immediate Dynamic DNS Configuration task to generate and deploy changed resource records for DNS servers. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, a negative integer is returned in the response.
*/
func (a *Client) DNSDDNSChangedRRsByTag(params *DNSDDNSChangedRRsByTagParams, authInfo runtime.ClientAuthInfoWriter) (*DNSDDNSChangedRRsByTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDNSDDNSChangedRRsByTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "dnsDDNSChangedRRsByTag",
		Method:             "POST",
		PathPattern:        "/TaskInvocation/dnsDDNSChangedRRsByTag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DNSDDNSChangedRRsByTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DNSDDNSChangedRRsByTagOK), nil

}

/*
DomainControllerCollection issues domain controller collection task

Issue an immediate Domain Controller Collection task to collect sites and subnets on the domain controller. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, a negative integer is returned for the response code.
*/
func (a *Client) DomainControllerCollection(params *DomainControllerCollectionParams, authInfo runtime.ClientAuthInfoWriter) (*DomainControllerCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainControllerCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainControllerCollection",
		Method:             "POST",
		PathPattern:        "/TaskInvocation/domainControllerCollection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DomainControllerCollectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainControllerCollectionOK), nil

}

/*
DomainControllerConfiguration issues domain controller configuration task

Issue an immediate Domain Controller Configuration task to deploy sites and subnets to the domain controller. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, a negative integer is returned for the response code.
*/
func (a *Client) DomainControllerConfiguration(params *DomainControllerConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*DomainControllerConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainControllerConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "domainControllerConfiguration",
		Method:             "POST",
		PathPattern:        "/TaskInvocation/domainControllerConfiguration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DomainControllerConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DomainControllerConfigurationOK), nil

}

/*
GetTask gets task information

Retrieve task information. The information is returned as a string array with the following information: 0-task id, 1-service, 2-scope, 3-status, 4-process start time.
*/
func (a *Client) GetTask(params *GetTaskParams, authInfo runtime.ClientAuthInfoWriter) (*GetTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTask",
		Method:             "GET",
		PathPattern:        "/TaskInvocation/getTask",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTaskOK), nil

}

/*
GetTaskStatus gets task status

Retrieve task status information. The status is returned as one of the following: NOTSTARTED, QUEUED, INPROGRESS, COMPLETE, COMPLETEWITHERRORS, ERROR.
*/
func (a *Client) GetTaskStatus(params *GetTaskStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetTaskStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskStatus",
		Method:             "GET",
		PathPattern:        "/TaskInvocation/getTaskStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTaskStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTaskStatusOK), nil

}

/*
GlobalNetElementSync issues global synchronization task for network elements

Issue an immediate Global Synchronization task for all network elements in IPControl that are flagged for inclusion in the Global Sync process. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.
*/
func (a *Client) GlobalNetElementSync(params *GlobalNetElementSyncParams, authInfo runtime.ClientAuthInfoWriter) (*GlobalNetElementSyncOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGlobalNetElementSyncParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "globalNetElementSync",
		Method:             "POST",
		PathPattern:        "/TaskInvocation/globalNetElementSync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GlobalNetElementSyncReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GlobalNetElementSyncOK), nil

}

/*
GlobalNetServiceSync issues global synchronization task for network service

Issue an immediate Global Synchronization task for all network services in IPControl that are flagged for inclusion in the Global Sync process. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.
*/
func (a *Client) GlobalNetServiceSync(params *GlobalNetServiceSyncParams, authInfo runtime.ClientAuthInfoWriter) (*GlobalNetServiceSyncOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGlobalNetServiceSyncParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "globalNetServiceSync",
		Method:             "POST",
		PathPattern:        "/TaskInvocation/globalNetServiceSync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GlobalNetServiceSyncReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GlobalNetServiceSyncOK), nil

}

/*
GlobalRollup issues global rollup task

Issue an immediate global rollup task to collect statistics and perform regression analysis. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.
*/
func (a *Client) GlobalRollup(params *GlobalRollupParams, authInfo runtime.ClientAuthInfoWriter) (*GlobalRollupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGlobalRollupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "globalRollup",
		Method:             "POST",
		PathPattern:        "/TaskInvocation/globalRollup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GlobalRollupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GlobalRollupOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
