// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDhcpUtilizationParams creates a new DhcpUtilizationParams object
// with the default values initialized.
func NewDhcpUtilizationParams() *DhcpUtilizationParams {
	var ()
	return &DhcpUtilizationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDhcpUtilizationParamsWithTimeout creates a new DhcpUtilizationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDhcpUtilizationParamsWithTimeout(timeout time.Duration) *DhcpUtilizationParams {
	var ()
	return &DhcpUtilizationParams{

		timeout: timeout,
	}
}

// NewDhcpUtilizationParamsWithContext creates a new DhcpUtilizationParams object
// with the default values initialized, and the ability to set a context for a request
func NewDhcpUtilizationParamsWithContext(ctx context.Context) *DhcpUtilizationParams {
	var ()
	return &DhcpUtilizationParams{

		Context: ctx,
	}
}

// NewDhcpUtilizationParamsWithHTTPClient creates a new DhcpUtilizationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDhcpUtilizationParamsWithHTTPClient(client *http.Client) *DhcpUtilizationParams {
	var ()
	return &DhcpUtilizationParams{
		HTTPClient: client,
	}
}

/*DhcpUtilizationParams contains all the parameters to send to the API endpoint
for the dhcp utilization operation typically these are written to a http.Request
*/
type DhcpUtilizationParams struct {

	/*TaskParameters
	  One of elementName or ipAddress must be specified to identify the DHCP server for which IPControl will collect statistics. elementName: name of the server; ipAddress: IP address or FQDN of the server. Set priority to true to create a high priority task.

	*/
	TaskParameters DhcpUtilizationBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the dhcp utilization params
func (o *DhcpUtilizationParams) WithTimeout(timeout time.Duration) *DhcpUtilizationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the dhcp utilization params
func (o *DhcpUtilizationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the dhcp utilization params
func (o *DhcpUtilizationParams) WithContext(ctx context.Context) *DhcpUtilizationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the dhcp utilization params
func (o *DhcpUtilizationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the dhcp utilization params
func (o *DhcpUtilizationParams) WithHTTPClient(client *http.Client) *DhcpUtilizationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the dhcp utilization params
func (o *DhcpUtilizationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTaskParameters adds the taskParameters to the dhcp utilization params
func (o *DhcpUtilizationParams) WithTaskParameters(taskParameters DhcpUtilizationBody) *DhcpUtilizationParams {
	o.SetTaskParameters(taskParameters)
	return o
}

// SetTaskParameters adds the taskParameters to the dhcp utilization params
func (o *DhcpUtilizationParams) SetTaskParameters(taskParameters DhcpUtilizationBody) {
	o.TaskParameters = taskParameters
}

// WriteToRequest writes these params to a swagger request
func (o *DhcpUtilizationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.TaskParameters); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
