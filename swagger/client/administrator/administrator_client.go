// Code generated by go-swagger; DO NOT EDIT.

package administrator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new administrator API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for administrator API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAdmin deletes an administrator

The deleteAdmin operation enables you to delete an administrator from IPControl.
*/
func (a *Client) DeleteAdmin(params *DeleteAdminParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAdminOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAdminParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAdmin",
		Method:             "DELETE",
		PathPattern:        "/Deletes/deleteAdmin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAdminReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAdminOK), nil

}

/*
EndExportAdmin exports administrators

The endExportAdmin operation is an optional final step in the series of calls to export administrators from IPControl. Invoking this operation enables IPControl to clean up session information.
*/
func (a *Client) EndExportAdmin(params *EndExportAdminParams, authInfo runtime.ClientAuthInfoWriter) (*EndExportAdminOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndExportAdminParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "endExportAdmin",
		Method:             "POST",
		PathPattern:        "/Exports/endExportAdmin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EndExportAdminReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EndExportAdminOK), nil

}

/*
ExportAdmin exports administrators

The exportAdmin operation enables you to export administrators from IPControl. Before invoking the exportAdmin operation, you must use initExportAdmin to initialize the API. The response returned from the init operation becomes the input to this operation.
*/
func (a *Client) ExportAdmin(params *ExportAdminParams, authInfo runtime.ClientAuthInfoWriter) (*ExportAdminOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportAdminParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportAdmin",
		Method:             "POST",
		PathPattern:        "/Exports/exportAdmin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportAdminReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportAdminOK), nil

}

/*
GetAdmin gets an administrator

Retrieve information about an administrator
*/
func (a *Client) GetAdmin(params *GetAdminParams, authInfo runtime.ClientAuthInfoWriter) (*GetAdminOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAdminParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAdmin",
		Method:             "GET",
		PathPattern:        "/Gets/getAdmin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAdminReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAdminOK), nil

}

/*
ImportAdmin imports an administrator

The ImportAdmin operation enables you to import administrators to IPControl. It can also be used to modify an existing administrator by specifying its id. Note that while adminstrators of administrator type 'NORMAL' can import and modify administrators and their roles, only MASTER administrators can import or update administrator policies and assignable roles. NORMAL administrators will receive an error message if policies or assignable roles are specified on import. On an import request to modify an administrator, if a NORMAL administrator specifies policies or assignable roles, that information is ignored. To modify an administrator, specify id.
*/
func (a *Client) ImportAdmin(params *ImportAdminParams, authInfo runtime.ClientAuthInfoWriter) (*ImportAdminOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportAdminParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importAdmin",
		Method:             "POST",
		PathPattern:        "/Imports/importAdmin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportAdminReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ImportAdminOK), nil

}

/*
InitExportAdmin exports administrators

The initExportAdmin operation enables you to export administrators from IPControl. You can filter the list of administrators retrieved.
When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportAdmin operation.
Otherwise, the returned structure can be passed on a subsequent exportAdmin operation to retrieve results.
There are no options for this operation.
*/
func (a *Client) InitExportAdmin(params *InitExportAdminParams, authInfo runtime.ClientAuthInfoWriter) (*InitExportAdminOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitExportAdminParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initExportAdmin",
		Method:             "POST",
		PathPattern:        "/Exports/initExportAdmin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitExportAdminReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InitExportAdminOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
