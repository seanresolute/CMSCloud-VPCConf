// Code generated by go-swagger; DO NOT EDIT.

package network_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new network service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for network service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteNetService deletes a network service

The deleteNetService operation enables you to delete a network service from IPControl.
*/
func (a *Client) DeleteNetService(params *DeleteNetServiceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetService",
		Method:             "DELETE",
		PathPattern:        "/Deletes/deleteNetService",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteNetServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNetServiceOK), nil

}

/*
ExportAllNetServicesAsCSV exports all network services

The exportAllNetServicesAsCSV operation enables you to export network services from IPControl. To filter the request, use exportNetServicesAsCSV.
*/
func (a *Client) ExportAllNetServicesAsCSV(params *ExportAllNetServicesAsCSVParams, authInfo runtime.ClientAuthInfoWriter) (*ExportAllNetServicesAsCSVOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportAllNetServicesAsCSVParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportAllNetServicesAsCSV",
		Method:             "POST",
		PathPattern:        "/Exports/exportAllNetServicesAsCSV",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportAllNetServicesAsCSVReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportAllNetServicesAsCSVOK), nil

}

/*
ExportNetServicesAsCSV exports network services

The exportNetServicesAsCSV operation enables you to export network services from IPControl. You can filter the list of network services retrieved. This is a legacy web service. It is designed to accept a list of parameters that define the filter. It returns a string response that contains the list of objects. Each object's fields are comma-delimited, and each object in the list is separated by a newline character. See the model example value, below, for the available filters. Refer to the IPControl CLI and API Guide for more information.
*/
func (a *Client) ExportNetServicesAsCSV(params *ExportNetServicesAsCSVParams, authInfo runtime.ClientAuthInfoWriter) (*ExportNetServicesAsCSVOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportNetServicesAsCSVParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportNetServicesAsCSV",
		Method:             "POST",
		PathPattern:        "/Exports/exportNetServicesAsCSV",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportNetServicesAsCSVReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportNetServicesAsCSVOK), nil

}

/*
ImportNetServiceWithTemplate imports a network service using a template

The importNetServiceWithTemplate operation enables you to import a network service to IPControl by applying a pre-defined Server Template.
*/
func (a *Client) ImportNetServiceWithTemplate(params *ImportNetServiceWithTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*ImportNetServiceWithTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportNetServiceWithTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importNetServiceWithTemplate",
		Method:             "POST",
		PathPattern:        "/Imports/importNetServiceWithTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportNetServiceWithTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ImportNetServiceWithTemplateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
