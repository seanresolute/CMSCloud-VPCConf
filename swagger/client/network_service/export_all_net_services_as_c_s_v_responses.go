// Code generated by go-swagger; DO NOT EDIT.

package network_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/models"
)

// ExportAllNetServicesAsCSVReader is a Reader for the ExportAllNetServicesAsCSV structure.
type ExportAllNetServicesAsCSVReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportAllNetServicesAsCSVReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewExportAllNetServicesAsCSVOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewExportAllNetServicesAsCSVDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewExportAllNetServicesAsCSVOK creates a ExportAllNetServicesAsCSVOK with default headers values
func NewExportAllNetServicesAsCSVOK() *ExportAllNetServicesAsCSVOK {
	return &ExportAllNetServicesAsCSVOK{}
}

/*ExportAllNetServicesAsCSVOK handles this case with default header values.

AllNetServicesAsCSV returned
*/
type ExportAllNetServicesAsCSVOK struct {
	Payload *ExportAllNetServicesAsCSVOKBody
}

func (o *ExportAllNetServicesAsCSVOK) Error() string {
	return fmt.Sprintf("[POST /Exports/exportAllNetServicesAsCSV][%d] exportAllNetServicesAsCSVOK  %+v", 200, o.Payload)
}

func (o *ExportAllNetServicesAsCSVOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ExportAllNetServicesAsCSVOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportAllNetServicesAsCSVDefault creates a ExportAllNetServicesAsCSVDefault with default headers values
func NewExportAllNetServicesAsCSVDefault(code int) *ExportAllNetServicesAsCSVDefault {
	return &ExportAllNetServicesAsCSVDefault{
		_statusCode: code,
	}
}

/*ExportAllNetServicesAsCSVDefault handles this case with default header values.

Error response
*/
type ExportAllNetServicesAsCSVDefault struct {
	_statusCode int

	Payload *models.Fault
}

// Code gets the status code for the export all net services as c s v default response
func (o *ExportAllNetServicesAsCSVDefault) Code() int {
	return o._statusCode
}

func (o *ExportAllNetServicesAsCSVDefault) Error() string {
	return fmt.Sprintf("[POST /Exports/exportAllNetServicesAsCSV][%d] exportAllNetServicesAsCSV default  %+v", o._statusCode, o.Payload)
}

func (o *ExportAllNetServicesAsCSVDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Fault)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ExportAllNetServicesAsCSVOKBody export all net services as c s v o k body
swagger:model ExportAllNetServicesAsCSVOKBody
*/
type ExportAllNetServicesAsCSVOKBody struct {

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this export all net services as c s v o k body
func (o *ExportAllNetServicesAsCSVOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ExportAllNetServicesAsCSVOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExportAllNetServicesAsCSVOKBody) UnmarshalBinary(b []byte) error {
	var res ExportAllNetServicesAsCSVOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
