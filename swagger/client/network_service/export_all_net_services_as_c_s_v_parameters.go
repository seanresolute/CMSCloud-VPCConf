// Code generated by go-swagger; DO NOT EDIT.

package network_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewExportAllNetServicesAsCSVParams creates a new ExportAllNetServicesAsCSVParams object
// with the default values initialized.
func NewExportAllNetServicesAsCSVParams() *ExportAllNetServicesAsCSVParams {
	var ()
	return &ExportAllNetServicesAsCSVParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewExportAllNetServicesAsCSVParamsWithTimeout creates a new ExportAllNetServicesAsCSVParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewExportAllNetServicesAsCSVParamsWithTimeout(timeout time.Duration) *ExportAllNetServicesAsCSVParams {
	var ()
	return &ExportAllNetServicesAsCSVParams{

		timeout: timeout,
	}
}

// NewExportAllNetServicesAsCSVParamsWithContext creates a new ExportAllNetServicesAsCSVParams object
// with the default values initialized, and the ability to set a context for a request
func NewExportAllNetServicesAsCSVParamsWithContext(ctx context.Context) *ExportAllNetServicesAsCSVParams {
	var ()
	return &ExportAllNetServicesAsCSVParams{

		Context: ctx,
	}
}

// NewExportAllNetServicesAsCSVParamsWithHTTPClient creates a new ExportAllNetServicesAsCSVParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewExportAllNetServicesAsCSVParamsWithHTTPClient(client *http.Client) *ExportAllNetServicesAsCSVParams {
	var ()
	return &ExportAllNetServicesAsCSVParams{
		HTTPClient: client,
	}
}

/*ExportAllNetServicesAsCSVParams contains all the parameters to send to the API endpoint
for the export all net services as c s v operation typically these are written to a http.Request
*/
type ExportAllNetServicesAsCSVParams struct {

	/*ExportsParameters*/
	ExportsParameters interface{}

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the export all net services as c s v params
func (o *ExportAllNetServicesAsCSVParams) WithTimeout(timeout time.Duration) *ExportAllNetServicesAsCSVParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the export all net services as c s v params
func (o *ExportAllNetServicesAsCSVParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the export all net services as c s v params
func (o *ExportAllNetServicesAsCSVParams) WithContext(ctx context.Context) *ExportAllNetServicesAsCSVParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the export all net services as c s v params
func (o *ExportAllNetServicesAsCSVParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the export all net services as c s v params
func (o *ExportAllNetServicesAsCSVParams) WithHTTPClient(client *http.Client) *ExportAllNetServicesAsCSVParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the export all net services as c s v params
func (o *ExportAllNetServicesAsCSVParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExportsParameters adds the exportsParameters to the export all net services as c s v params
func (o *ExportAllNetServicesAsCSVParams) WithExportsParameters(exportsParameters interface{}) *ExportAllNetServicesAsCSVParams {
	o.SetExportsParameters(exportsParameters)
	return o
}

// SetExportsParameters adds the exportsParameters to the export all net services as c s v params
func (o *ExportAllNetServicesAsCSVParams) SetExportsParameters(exportsParameters interface{}) {
	o.ExportsParameters = exportsParameters
}

// WriteToRequest writes these params to a swagger request
func (o *ExportAllNetServicesAsCSVParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ExportsParameters != nil {
		if err := r.SetBodyParam(o.ExportsParameters); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
