// Code generated by go-swagger; DO NOT EDIT.

package network_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewExportNetServicesAsCSVParams creates a new ExportNetServicesAsCSVParams object
// with the default values initialized.
func NewExportNetServicesAsCSVParams() *ExportNetServicesAsCSVParams {
	var ()
	return &ExportNetServicesAsCSVParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewExportNetServicesAsCSVParamsWithTimeout creates a new ExportNetServicesAsCSVParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewExportNetServicesAsCSVParamsWithTimeout(timeout time.Duration) *ExportNetServicesAsCSVParams {
	var ()
	return &ExportNetServicesAsCSVParams{

		timeout: timeout,
	}
}

// NewExportNetServicesAsCSVParamsWithContext creates a new ExportNetServicesAsCSVParams object
// with the default values initialized, and the ability to set a context for a request
func NewExportNetServicesAsCSVParamsWithContext(ctx context.Context) *ExportNetServicesAsCSVParams {
	var ()
	return &ExportNetServicesAsCSVParams{

		Context: ctx,
	}
}

// NewExportNetServicesAsCSVParamsWithHTTPClient creates a new ExportNetServicesAsCSVParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewExportNetServicesAsCSVParamsWithHTTPClient(client *http.Client) *ExportNetServicesAsCSVParams {
	var ()
	return &ExportNetServicesAsCSVParams{
		HTTPClient: client,
	}
}

/*ExportNetServicesAsCSVParams contains all the parameters to send to the API endpoint
for the export net services as c s v operation typically these are written to a http.Request
*/
type ExportNetServicesAsCSVParams struct {

	/*ExportParameters
	  Query filters

	*/
	ExportParameters ExportNetServicesAsCSVBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the export net services as c s v params
func (o *ExportNetServicesAsCSVParams) WithTimeout(timeout time.Duration) *ExportNetServicesAsCSVParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the export net services as c s v params
func (o *ExportNetServicesAsCSVParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the export net services as c s v params
func (o *ExportNetServicesAsCSVParams) WithContext(ctx context.Context) *ExportNetServicesAsCSVParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the export net services as c s v params
func (o *ExportNetServicesAsCSVParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the export net services as c s v params
func (o *ExportNetServicesAsCSVParams) WithHTTPClient(client *http.Client) *ExportNetServicesAsCSVParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the export net services as c s v params
func (o *ExportNetServicesAsCSVParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExportParameters adds the exportParameters to the export net services as c s v params
func (o *ExportNetServicesAsCSVParams) WithExportParameters(exportParameters ExportNetServicesAsCSVBody) *ExportNetServicesAsCSVParams {
	o.SetExportParameters(exportParameters)
	return o
}

// SetExportParameters adds the exportParameters to the export net services as c s v params
func (o *ExportNetServicesAsCSVParams) SetExportParameters(exportParameters ExportNetServicesAsCSVBody) {
	o.ExportParameters = exportParameters
}

// WriteToRequest writes these params to a swagger request
func (o *ExportNetServicesAsCSVParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.ExportParameters); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
