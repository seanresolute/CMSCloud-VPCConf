// Code generated by go-swagger; DO NOT EDIT.

package d_h_c_p_option_set

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDhcpOptionSetByScopeParams creates a new GetDhcpOptionSetByScopeParams object
// with the default values initialized.
func NewGetDhcpOptionSetByScopeParams() *GetDhcpOptionSetByScopeParams {
	var ()
	return &GetDhcpOptionSetByScopeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDhcpOptionSetByScopeParamsWithTimeout creates a new GetDhcpOptionSetByScopeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDhcpOptionSetByScopeParamsWithTimeout(timeout time.Duration) *GetDhcpOptionSetByScopeParams {
	var ()
	return &GetDhcpOptionSetByScopeParams{

		timeout: timeout,
	}
}

// NewGetDhcpOptionSetByScopeParamsWithContext creates a new GetDhcpOptionSetByScopeParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDhcpOptionSetByScopeParamsWithContext(ctx context.Context) *GetDhcpOptionSetByScopeParams {
	var ()
	return &GetDhcpOptionSetByScopeParams{

		Context: ctx,
	}
}

// NewGetDhcpOptionSetByScopeParamsWithHTTPClient creates a new GetDhcpOptionSetByScopeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDhcpOptionSetByScopeParamsWithHTTPClient(client *http.Client) *GetDhcpOptionSetByScopeParams {
	var ()
	return &GetDhcpOptionSetByScopeParams{
		HTTPClient: client,
	}
}

/*GetDhcpOptionSetByScopeParams contains all the parameters to send to the API endpoint
for the get dhcp option set by scope operation typically these are written to a http.Request
*/
type GetDhcpOptionSetByScopeParams struct {

	/*Scope
	  Identify the scope: CIDR notation of subnet, address pool name, or device IP address

	*/
	Scope string
	/*ScopeType
	  Specify one of subnet, pool, ipAddress.

	*/
	ScopeType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get dhcp option set by scope params
func (o *GetDhcpOptionSetByScopeParams) WithTimeout(timeout time.Duration) *GetDhcpOptionSetByScopeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get dhcp option set by scope params
func (o *GetDhcpOptionSetByScopeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get dhcp option set by scope params
func (o *GetDhcpOptionSetByScopeParams) WithContext(ctx context.Context) *GetDhcpOptionSetByScopeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get dhcp option set by scope params
func (o *GetDhcpOptionSetByScopeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get dhcp option set by scope params
func (o *GetDhcpOptionSetByScopeParams) WithHTTPClient(client *http.Client) *GetDhcpOptionSetByScopeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get dhcp option set by scope params
func (o *GetDhcpOptionSetByScopeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithScope adds the scope to the get dhcp option set by scope params
func (o *GetDhcpOptionSetByScopeParams) WithScope(scope string) *GetDhcpOptionSetByScopeParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the get dhcp option set by scope params
func (o *GetDhcpOptionSetByScopeParams) SetScope(scope string) {
	o.Scope = scope
}

// WithScopeType adds the scopeType to the get dhcp option set by scope params
func (o *GetDhcpOptionSetByScopeParams) WithScopeType(scopeType string) *GetDhcpOptionSetByScopeParams {
	o.SetScopeType(scopeType)
	return o
}

// SetScopeType adds the scopeType to the get dhcp option set by scope params
func (o *GetDhcpOptionSetByScopeParams) SetScopeType(scopeType string) {
	o.ScopeType = scopeType
}

// WriteToRequest writes these params to a swagger request
func (o *GetDhcpOptionSetByScopeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param scope
	qrScope := o.Scope
	qScope := qrScope
	if qScope != "" {
		if err := r.SetQueryParam("scope", qScope); err != nil {
			return err
		}
	}

	// query param scopeType
	qrScopeType := o.ScopeType
	qScopeType := qrScopeType
	if qScopeType != "" {
		if err := r.SetQueryParam("scopeType", qScopeType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
