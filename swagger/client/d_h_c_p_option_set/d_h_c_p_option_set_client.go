// Code generated by go-swagger; DO NOT EDIT.

package d_h_c_p_option_set

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new d h c p option set API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for d h c p option set API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteDhcpOptionSet deletes a d h c p option set

The deleteDhcpOptionSet operation enables you to delete a DHCP Option Set from IPControl.
*/
func (a *Client) DeleteDhcpOptionSet(params *DeleteDhcpOptionSetParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDhcpOptionSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDhcpOptionSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDhcpOptionSet",
		Method:             "DELETE",
		PathPattern:        "/Deletes/deleteDhcpOptionSet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDhcpOptionSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDhcpOptionSetOK), nil

}

/*
EndExportDhcpOptionSet exports d h c p option sets

The endExportDhcpOptionSet operation is an optional final step in the series of calls to export DHCP option sets from IPControl. Invoking this operation enables IPControl to clean up session information.
*/
func (a *Client) EndExportDhcpOptionSet(params *EndExportDhcpOptionSetParams, authInfo runtime.ClientAuthInfoWriter) (*EndExportDhcpOptionSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndExportDhcpOptionSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "endExportDhcpOptionSet",
		Method:             "POST",
		PathPattern:        "/Exports/endExportDhcpOptionSet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EndExportDhcpOptionSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EndExportDhcpOptionSetOK), nil

}

/*
ExportDhcpOptionSet exports d h c p option sets

The exportDhcpOptionSet operation enables you to export DHCP option sets from IPControl. Before invoking the exportDhcpOptionSet operation, you must use initExportDhcpOptionSet to initialize the API. The response returned from the init operation becomes the input to this operation.
*/
func (a *Client) ExportDhcpOptionSet(params *ExportDhcpOptionSetParams, authInfo runtime.ClientAuthInfoWriter) (*ExportDhcpOptionSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportDhcpOptionSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportDhcpOptionSet",
		Method:             "POST",
		PathPattern:        "/Exports/exportDhcpOptionSet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportDhcpOptionSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportDhcpOptionSetOK), nil

}

/*
GetDhcpOptionSetByName gets a d h c p option set

Retrieve information about a DHCP option set
*/
func (a *Client) GetDhcpOptionSetByName(params *GetDhcpOptionSetByNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetDhcpOptionSetByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDhcpOptionSetByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDhcpOptionSetByName",
		Method:             "GET",
		PathPattern:        "/Gets/getDhcpOptionSetByName",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDhcpOptionSetByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDhcpOptionSetByNameOK), nil

}

/*
GetDhcpOptionSetByScope gets a d h c p option set

Retrieve information about a scope-specific DHCP option set
*/
func (a *Client) GetDhcpOptionSetByScope(params *GetDhcpOptionSetByScopeParams, authInfo runtime.ClientAuthInfoWriter) (*GetDhcpOptionSetByScopeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDhcpOptionSetByScopeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDhcpOptionSetByScope",
		Method:             "GET",
		PathPattern:        "/Gets/getDhcpOptionSetByScope",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDhcpOptionSetByScopeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDhcpOptionSetByScopeOK), nil

}

/*
ImportDhcpOptionSet imports a d h c p option set

The ImportDhcpOptionSet operation enables you to import DHCP option set definitions into IPControl. Both standard and scope-specific option sets can be imported.  Specify the new set name and (optionally) the DHCP options. For each option, specify the code or name and the optionValue
*/
func (a *Client) ImportDhcpOptionSet(params *ImportDhcpOptionSetParams, authInfo runtime.ClientAuthInfoWriter) (*ImportDhcpOptionSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportDhcpOptionSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importDhcpOptionSet",
		Method:             "POST",
		PathPattern:        "/Imports/importDhcpOptionSet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportDhcpOptionSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ImportDhcpOptionSetOK), nil

}

/*
InitExportDhcpOptionSet exports d h c p option sets

The initExportDhcpOptionSet operation enables you to export DHCP option sets from IPControl. You can filter the list of option sets retrieved.
When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportDhcpOptionSet operation.
Otherwise, the returned structure can be passed on a subsequent exportDhcpOptionSet operation to retrieve results.
There are no options for this operation.
*/
func (a *Client) InitExportDhcpOptionSet(params *InitExportDhcpOptionSetParams, authInfo runtime.ClientAuthInfoWriter) (*InitExportDhcpOptionSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitExportDhcpOptionSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initExportDhcpOptionSet",
		Method:             "POST",
		PathPattern:        "/Exports/initExportDhcpOptionSet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitExportDhcpOptionSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InitExportDhcpOptionSetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
