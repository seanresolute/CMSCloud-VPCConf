// Code generated by go-swagger; DO NOT EDIT.

package d_h_c_p_server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDhcpServerByIPAddressParams creates a new GetDhcpServerByIPAddressParams object
// with the default values initialized.
func NewGetDhcpServerByIPAddressParams() *GetDhcpServerByIPAddressParams {
	var ()
	return &GetDhcpServerByIPAddressParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDhcpServerByIPAddressParamsWithTimeout creates a new GetDhcpServerByIPAddressParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDhcpServerByIPAddressParamsWithTimeout(timeout time.Duration) *GetDhcpServerByIPAddressParams {
	var ()
	return &GetDhcpServerByIPAddressParams{

		timeout: timeout,
	}
}

// NewGetDhcpServerByIPAddressParamsWithContext creates a new GetDhcpServerByIPAddressParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDhcpServerByIPAddressParamsWithContext(ctx context.Context) *GetDhcpServerByIPAddressParams {
	var ()
	return &GetDhcpServerByIPAddressParams{

		Context: ctx,
	}
}

// NewGetDhcpServerByIPAddressParamsWithHTTPClient creates a new GetDhcpServerByIPAddressParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDhcpServerByIPAddressParamsWithHTTPClient(client *http.Client) *GetDhcpServerByIPAddressParams {
	var ()
	return &GetDhcpServerByIPAddressParams{
		HTTPClient: client,
	}
}

/*GetDhcpServerByIPAddressParams contains all the parameters to send to the API endpoint
for the get dhcp server by Ip address operation typically these are written to a http.Request
*/
type GetDhcpServerByIPAddressParams struct {

	/*IPAddress
	  The IP address of the DHCP server, e.g. 10.0.0.18

	*/
	IPAddress string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get dhcp server by Ip address params
func (o *GetDhcpServerByIPAddressParams) WithTimeout(timeout time.Duration) *GetDhcpServerByIPAddressParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get dhcp server by Ip address params
func (o *GetDhcpServerByIPAddressParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get dhcp server by Ip address params
func (o *GetDhcpServerByIPAddressParams) WithContext(ctx context.Context) *GetDhcpServerByIPAddressParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get dhcp server by Ip address params
func (o *GetDhcpServerByIPAddressParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get dhcp server by Ip address params
func (o *GetDhcpServerByIPAddressParams) WithHTTPClient(client *http.Client) *GetDhcpServerByIPAddressParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get dhcp server by Ip address params
func (o *GetDhcpServerByIPAddressParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIPAddress adds the iPAddress to the get dhcp server by Ip address params
func (o *GetDhcpServerByIPAddressParams) WithIPAddress(iPAddress string) *GetDhcpServerByIPAddressParams {
	o.SetIPAddress(iPAddress)
	return o
}

// SetIPAddress adds the ipAddress to the get dhcp server by Ip address params
func (o *GetDhcpServerByIPAddressParams) SetIPAddress(iPAddress string) {
	o.IPAddress = iPAddress
}

// WriteToRequest writes these params to a swagger request
func (o *GetDhcpServerByIPAddressParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param ipAddress
	qrIPAddress := o.IPAddress
	qIPAddress := qrIPAddress
	if qIPAddress != "" {
		if err := r.SetQueryParam("ipAddress", qIPAddress); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
