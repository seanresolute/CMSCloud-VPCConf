// Code generated by go-swagger; DO NOT EDIT.

package d_h_c_p_server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new d h c p server API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for d h c p server API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
EndExportDhcpServer exports d h c p servers

The endExportDhcpServer operation is an optional final step in the series of calls to export from IPControl. Invoking this operation enables IPControl to clean up session information.
*/
func (a *Client) EndExportDhcpServer(params *EndExportDhcpServerParams, authInfo runtime.ClientAuthInfoWriter) (*EndExportDhcpServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndExportDhcpServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "endExportDhcpServer",
		Method:             "POST",
		PathPattern:        "/Exports/endExportDhcpServer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EndExportDhcpServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EndExportDhcpServerOK), nil

}

/*
ExportDhcpServer exports d h c p servers

The exportDhcpServer operation enables you to export DHCP servers from IPControl. Before invoking the exportDhcpServer operation, you must use initExportDhcpServer to initialize the API. The response returned from the init operation becomes the input to this operation.
*/
func (a *Client) ExportDhcpServer(params *ExportDhcpServerParams, authInfo runtime.ClientAuthInfoWriter) (*ExportDhcpServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportDhcpServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportDhcpServer",
		Method:             "POST",
		PathPattern:        "/Exports/exportDhcpServer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportDhcpServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportDhcpServerOK), nil

}

/*
GetDhcpServerByIPAddress gets a d h c p server by identifying its IP address

Retrieve information about a DHCP server by identifying its IP address.
*/
func (a *Client) GetDhcpServerByIPAddress(params *GetDhcpServerByIPAddressParams, authInfo runtime.ClientAuthInfoWriter) (*GetDhcpServerByIPAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDhcpServerByIPAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDhcpServerByIpAddress",
		Method:             "GET",
		PathPattern:        "/Gets/getDhcpServerByIpAddress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDhcpServerByIPAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDhcpServerByIPAddressOK), nil

}

/*
GetDhcpServerByName gets a d h c p server by identifying its name

Retrieve information about a DHCP server by identifying its name.
*/
func (a *Client) GetDhcpServerByName(params *GetDhcpServerByNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetDhcpServerByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDhcpServerByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDhcpServerByName",
		Method:             "GET",
		PathPattern:        "/Gets/getDhcpServerByName",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDhcpServerByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDhcpServerByNameOK), nil

}

/*
GetEffectiveDhcpServersForContainer gets a list of accessible d h c p servers

Retrieve a list of all valid and accessible DHCP servers for a given container.
*/
func (a *Client) GetEffectiveDhcpServersForContainer(params *GetEffectiveDhcpServersForContainerParams, authInfo runtime.ClientAuthInfoWriter) (*GetEffectiveDhcpServersForContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEffectiveDhcpServersForContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEffectiveDhcpServersForContainer",
		Method:             "GET",
		PathPattern:        "/Gets/getEffectiveDhcpServersForContainer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetEffectiveDhcpServersForContainerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEffectiveDhcpServersForContainerOK), nil

}

/*
ImportDhcpServer imports a d h c p server

The importDhcpServer operation enables you to import a DHCP Server. It can also be used to modify an existing server by specifying its id.
*/
func (a *Client) ImportDhcpServer(params *ImportDhcpServerParams, authInfo runtime.ClientAuthInfoWriter) (*ImportDhcpServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportDhcpServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importDhcpServer",
		Method:             "POST",
		PathPattern:        "/Imports/importDhcpServer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportDhcpServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ImportDhcpServerOK), nil

}

/*
InitExportDhcpServer exports d h c p servers

The initExportDhcpServer operation enables you to export DHCP servers from IPControl. You can filter the list of servers retrieved.
When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportDhcpServer operation.
Otherwise, the returned structure can be passed on a subsequent exportDhcpServer operation to retrieve results.
There are no options for this operation.
*/
func (a *Client) InitExportDhcpServer(params *InitExportDhcpServerParams, authInfo runtime.ClientAuthInfoWriter) (*InitExportDhcpServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitExportDhcpServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initExportDhcpServer",
		Method:             "POST",
		PathPattern:        "/Exports/initExportDhcpServer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitExportDhcpServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InitExportDhcpServerOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
