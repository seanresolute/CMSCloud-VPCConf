// Code generated by go-swagger; DO NOT EDIT.

package tag_association

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new tag association API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tag association API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteTagAssociation deletes a tag association

The deleteTagAssociation operation enables you to delete a tag association from IPControl.
*/
func (a *Client) DeleteTagAssociation(params *DeleteTagAssociationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTagAssociationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTagAssociationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTagAssociation",
		Method:             "DELETE",
		PathPattern:        "/Deletes/deleteTagAssociation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTagAssociationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTagAssociationOK), nil

}

/*
EndExportTagAssociation exports tag associations

The endExportTagAssociation operation is an optional final step in the series of calls to export from IPControl. Invoking this operation enables IPControl to clean up session information.
*/
func (a *Client) EndExportTagAssociation(params *EndExportTagAssociationParams, authInfo runtime.ClientAuthInfoWriter) (*EndExportTagAssociationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndExportTagAssociationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "endExportTagAssociation",
		Method:             "POST",
		PathPattern:        "/Exports/endExportTagAssociation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EndExportTagAssociationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EndExportTagAssociationOK), nil

}

/*
ExportTagAssociation exports tag associations

The exportTagAssociation operation enables you to export tag associations from IPControl. Before invoking the operation, you must use the corresponding init operation to initialize the API. The response returned from the init operation becomes the input to this operation.
*/
func (a *Client) ExportTagAssociation(params *ExportTagAssociationParams, authInfo runtime.ClientAuthInfoWriter) (*ExportTagAssociationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportTagAssociationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportTagAssociation",
		Method:             "POST",
		PathPattern:        "/Exports/exportTagAssociation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportTagAssociationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportTagAssociationOK), nil

}

/*
GetTagAssociationByName gets a tag association by name

Retrieve information about a tag association.
*/
func (a *Client) GetTagAssociationByName(params *GetTagAssociationByNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetTagAssociationByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagAssociationByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTagAssociationByName",
		Method:             "GET",
		PathPattern:        "/Gets/getTagAssociationByName",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTagAssociationByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTagAssociationByNameOK), nil

}

/*
ImportTagAssociation imports tag association

The importTagAssociation operation enables you to import tag associations to IPControl. It can also be used to modify an existing one. A Tag Association is identified by the tag name, the type of association, and the server the tag is associated with. The type of association identifies what type of server the tag is associated with. This can be specified as a DhcpServer, DnsServer, or Appliance. The server is identified by either a name or ipAddresses. The ipAddresses are specified as an array of one or two IP Addresses to identify the server. If two IP Addresses are specified, the server must be configured with both or it will not be found. The description field will only be used if the tag does not currently exist in the IPControl database or the id is specified.
*/
func (a *Client) ImportTagAssociation(params *ImportTagAssociationParams, authInfo runtime.ClientAuthInfoWriter) (*ImportTagAssociationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportTagAssociationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importTagAssociation",
		Method:             "POST",
		PathPattern:        "/Imports/importTagAssociation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportTagAssociationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ImportTagAssociationOK), nil

}

/*
InitExportTagAssociation exports tag associations

The initExportTagAssociation operation enables you to export tag associaitons from IPControl. You can filter the list retrieved. There are no options defined for this operation. When pageSize and firstResultPos are specified, a list of structures is returned as described for the operation. Otherwise, the returned structure can be passed on a subsequent operation to retrieve the results.
*/
func (a *Client) InitExportTagAssociation(params *InitExportTagAssociationParams, authInfo runtime.ClientAuthInfoWriter) (*InitExportTagAssociationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitExportTagAssociationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initExportTagAssociation",
		Method:             "POST",
		PathPattern:        "/Exports/initExportTagAssociation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitExportTagAssociationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InitExportTagAssociationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
