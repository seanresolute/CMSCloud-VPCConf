// Code generated by go-swagger; DO NOT EDIT.

package resource_record

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetZoneResourceRecParams creates a new GetZoneResourceRecParams object
// with the default values initialized.
func NewGetZoneResourceRecParams() *GetZoneResourceRecParams {
	var ()
	return &GetZoneResourceRecParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetZoneResourceRecParamsWithTimeout creates a new GetZoneResourceRecParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetZoneResourceRecParamsWithTimeout(timeout time.Duration) *GetZoneResourceRecParams {
	var ()
	return &GetZoneResourceRecParams{

		timeout: timeout,
	}
}

// NewGetZoneResourceRecParamsWithContext creates a new GetZoneResourceRecParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetZoneResourceRecParamsWithContext(ctx context.Context) *GetZoneResourceRecParams {
	var ()
	return &GetZoneResourceRecParams{

		Context: ctx,
	}
}

// NewGetZoneResourceRecParamsWithHTTPClient creates a new GetZoneResourceRecParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetZoneResourceRecParamsWithHTTPClient(client *http.Client) *GetZoneResourceRecParams {
	var ()
	return &GetZoneResourceRecParams{
		HTTPClient: client,
	}
}

/*GetZoneResourceRecParams contains all the parameters to send to the API endpoint
for the get zone resource rec operation typically these are written to a http.Request
*/
type GetZoneResourceRecParams struct {

	/*Owner
	  The resource record owner

	*/
	Owner string
	/*Rdata
	  The resource record data text

	*/
	Rdata *string
	/*Server
	  The name of the DNS server

	*/
	Server string
	/*Type
	  The resource record type

	*/
	Type string
	/*View
	  The DNS view in which the zone resides; defaults to 'Default'

	*/
	View *string
	/*Zone
	  The name of the zone

	*/
	Zone string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get zone resource rec params
func (o *GetZoneResourceRecParams) WithTimeout(timeout time.Duration) *GetZoneResourceRecParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get zone resource rec params
func (o *GetZoneResourceRecParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get zone resource rec params
func (o *GetZoneResourceRecParams) WithContext(ctx context.Context) *GetZoneResourceRecParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get zone resource rec params
func (o *GetZoneResourceRecParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get zone resource rec params
func (o *GetZoneResourceRecParams) WithHTTPClient(client *http.Client) *GetZoneResourceRecParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get zone resource rec params
func (o *GetZoneResourceRecParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOwner adds the owner to the get zone resource rec params
func (o *GetZoneResourceRecParams) WithOwner(owner string) *GetZoneResourceRecParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the get zone resource rec params
func (o *GetZoneResourceRecParams) SetOwner(owner string) {
	o.Owner = owner
}

// WithRdata adds the rdata to the get zone resource rec params
func (o *GetZoneResourceRecParams) WithRdata(rdata *string) *GetZoneResourceRecParams {
	o.SetRdata(rdata)
	return o
}

// SetRdata adds the rdata to the get zone resource rec params
func (o *GetZoneResourceRecParams) SetRdata(rdata *string) {
	o.Rdata = rdata
}

// WithServer adds the server to the get zone resource rec params
func (o *GetZoneResourceRecParams) WithServer(server string) *GetZoneResourceRecParams {
	o.SetServer(server)
	return o
}

// SetServer adds the server to the get zone resource rec params
func (o *GetZoneResourceRecParams) SetServer(server string) {
	o.Server = server
}

// WithType adds the typeVar to the get zone resource rec params
func (o *GetZoneResourceRecParams) WithType(typeVar string) *GetZoneResourceRecParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get zone resource rec params
func (o *GetZoneResourceRecParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WithView adds the view to the get zone resource rec params
func (o *GetZoneResourceRecParams) WithView(view *string) *GetZoneResourceRecParams {
	o.SetView(view)
	return o
}

// SetView adds the view to the get zone resource rec params
func (o *GetZoneResourceRecParams) SetView(view *string) {
	o.View = view
}

// WithZone adds the zone to the get zone resource rec params
func (o *GetZoneResourceRecParams) WithZone(zone string) *GetZoneResourceRecParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the get zone resource rec params
func (o *GetZoneResourceRecParams) SetZone(zone string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *GetZoneResourceRecParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param owner
	qrOwner := o.Owner
	qOwner := qrOwner
	if qOwner != "" {
		if err := r.SetQueryParam("owner", qOwner); err != nil {
			return err
		}
	}

	if o.Rdata != nil {

		// query param rdata
		var qrRdata string
		if o.Rdata != nil {
			qrRdata = *o.Rdata
		}
		qRdata := qrRdata
		if qRdata != "" {
			if err := r.SetQueryParam("rdata", qRdata); err != nil {
				return err
			}
		}

	}

	// query param server
	qrServer := o.Server
	qServer := qrServer
	if qServer != "" {
		if err := r.SetQueryParam("server", qServer); err != nil {
			return err
		}
	}

	// query param type
	qrType := o.Type
	qType := qrType
	if qType != "" {
		if err := r.SetQueryParam("type", qType); err != nil {
			return err
		}
	}

	if o.View != nil {

		// query param view
		var qrView string
		if o.View != nil {
			qrView = *o.View
		}
		qView := qrView
		if qView != "" {
			if err := r.SetQueryParam("view", qView); err != nil {
				return err
			}
		}

	}

	// query param zone
	qrZone := o.Zone
	qZone := qrZone
	if qZone != "" {
		if err := r.SetQueryParam("zone", qZone); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
