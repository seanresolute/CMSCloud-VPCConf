// Code generated by go-swagger; DO NOT EDIT.

package resource_record

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new resource record API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for resource record API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteDeviceResourceRecord deletes a device resource record

The deleteDeviceResourceRecord operation enables you to delete a resource record from IPControl that is affiliated with a device.
*/
func (a *Client) DeleteDeviceResourceRecord(params *DeleteDeviceResourceRecordParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDeviceResourceRecordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeviceResourceRecordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDeviceResourceRecord",
		Method:             "DELETE",
		PathPattern:        "/Deletes/deleteDeviceResourceRecord",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDeviceResourceRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDeviceResourceRecordOK), nil

}

/*
DeleteDomainResourceRecord deletes a domain resource record

The deleteDomainResourceRecord operation enables you to delete a resource record from IPControl that is affiliated with a domain.
*/
func (a *Client) DeleteDomainResourceRecord(params *DeleteDomainResourceRecordParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDomainResourceRecordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDomainResourceRecordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDomainResourceRecord",
		Method:             "DELETE",
		PathPattern:        "/Deletes/deleteDomainResourceRecord",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDomainResourceRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDomainResourceRecordOK), nil

}

/*
DeleteZoneResourceRecord deletes a zone resource record

The deleteZoneResourceRecord operation enables you to delete a resource record from IPControl that is affiliated with a zone. These are specialized resource records, known as 'glue' records.
*/
func (a *Client) DeleteZoneResourceRecord(params *DeleteZoneResourceRecordParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteZoneResourceRecordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteZoneResourceRecordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteZoneResourceRecord",
		Method:             "DELETE",
		PathPattern:        "/Deletes/deleteZoneResourceRecord",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteZoneResourceRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteZoneResourceRecordOK), nil

}

/*
EndExportDeviceResourceRec exports device resource records

The endExportDevice operation is an optional final step in the series of calls to export resource records for a device or list of devices from IPControl. Invoking this operation enables IPControl to clean up session information.
*/
func (a *Client) EndExportDeviceResourceRec(params *EndExportDeviceResourceRecParams, authInfo runtime.ClientAuthInfoWriter) (*EndExportDeviceResourceRecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndExportDeviceResourceRecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "endExportDeviceResourceRec",
		Method:             "POST",
		PathPattern:        "/Exports/endExportDeviceResourceRec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EndExportDeviceResourceRecReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EndExportDeviceResourceRecOK), nil

}

/*
EndExportDomainResourceRec exports domain resource records

The endExportDomainResourceRec operation is an optional final step in the series of calls to export domain resource records for a domain or list of domains from IPControl. Invoking this operation enables IPControl to clean up session information.
*/
func (a *Client) EndExportDomainResourceRec(params *EndExportDomainResourceRecParams, authInfo runtime.ClientAuthInfoWriter) (*EndExportDomainResourceRecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndExportDomainResourceRecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "endExportDomainResourceRec",
		Method:             "POST",
		PathPattern:        "/Exports/endExportDomainResourceRec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EndExportDomainResourceRecReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EndExportDomainResourceRecOK), nil

}

/*
EndExportResourceRecordRestoreList exports resource record restore list

The endExportResourceRecordRestoreList operation is an optional final step in the series of calls to export a list of resource records that have been deleted and may be eligible for restoring. Invoking this operation enables IPControl to clean up session information.
*/
func (a *Client) EndExportResourceRecordRestoreList(params *EndExportResourceRecordRestoreListParams, authInfo runtime.ClientAuthInfoWriter) (*EndExportResourceRecordRestoreListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndExportResourceRecordRestoreListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "endExportResourceRecordRestoreList",
		Method:             "POST",
		PathPattern:        "/Exports/endExportResourceRecordRestoreList",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EndExportResourceRecordRestoreListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EndExportResourceRecordRestoreListOK), nil

}

/*
EndExportZoneResourceRec exports zone resource records

The endExportZoneResourceRec operation is an optional final step in the series of calls to export zone resource records for a zone or list of zones from IPControl. Invoking this operation enables IPControl to clean up session information.
*/
func (a *Client) EndExportZoneResourceRec(params *EndExportZoneResourceRecParams, authInfo runtime.ClientAuthInfoWriter) (*EndExportZoneResourceRecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndExportZoneResourceRecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "endExportZoneResourceRec",
		Method:             "POST",
		PathPattern:        "/Exports/endExportZoneResourceRecord",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EndExportZoneResourceRecReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EndExportZoneResourceRecOK), nil

}

/*
ExportDeviceResourceRec exports device resource records

The exportDeviceResourceRec operation enables you to export resource records for a device or list of devices from IPControl. Before invoking the exportDeviceResourceRec operation, you must use initExportDeviceResourceRec to initialize the API. The response returned from the init operation becomes the input to this operation.
*/
func (a *Client) ExportDeviceResourceRec(params *ExportDeviceResourceRecParams, authInfo runtime.ClientAuthInfoWriter) (*ExportDeviceResourceRecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportDeviceResourceRecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportDeviceResourceRec",
		Method:             "POST",
		PathPattern:        "/Exports/exportDeviceResourceRec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportDeviceResourceRecReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportDeviceResourceRecOK), nil

}

/*
ExportDomainResourceRec exports domain resource records

The exportDomainResourceRec operation enables you to export domain resource records for a domain or list of domains from IPControl. Before invoking the exportDomainResourceRec operation, you must use initExportDomainResourceRec to initialize the API. The response returned from the init operation becomes the input to this operation.
*/
func (a *Client) ExportDomainResourceRec(params *ExportDomainResourceRecParams, authInfo runtime.ClientAuthInfoWriter) (*ExportDomainResourceRecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportDomainResourceRecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportDomainResourceRec",
		Method:             "POST",
		PathPattern:        "/Exports/exportDomainResourceRec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportDomainResourceRecReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportDomainResourceRecOK), nil

}

/*
ExportResourceRecordRestoreList exports resource record restore list

The exportResourceRecordRestoreList API enables you to issue a request to retrieve a list of resource records that have been deleted and may be eligible for restoring. Before invoking the exportResourceRecordRestoreList operation, you must use initExportResourceRecordRestoreList to initialize the API. The response returned from the init operation becomes the input to this operation.
*/
func (a *Client) ExportResourceRecordRestoreList(params *ExportResourceRecordRestoreListParams, authInfo runtime.ClientAuthInfoWriter) (*ExportResourceRecordRestoreListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportResourceRecordRestoreListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportResourceRecordRestoreList",
		Method:             "POST",
		PathPattern:        "/Exports/exportResourceRecordRestoreList",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportResourceRecordRestoreListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportResourceRecordRestoreListOK), nil

}

/*
ExportZoneResourceRec exports zone resource records

The exportZoneResourceRec operation enables you to export zone resource records for a zone or list of zones from IPControl. Before invoking the exportZoneResourceRec operation, you must use initExportZoneResourceRec to initialize the API. The response returned from the init operation becomes the input to this operation.
*/
func (a *Client) ExportZoneResourceRec(params *ExportZoneResourceRecParams, authInfo runtime.ClientAuthInfoWriter) (*ExportZoneResourceRecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportZoneResourceRecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportZoneResourceRec",
		Method:             "POST",
		PathPattern:        "/Exports/exportZoneResourceRecord",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportZoneResourceRecReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportZoneResourceRecOK), nil

}

/*
GetDeviceResourceRec gets a device resource record

Retrieve information about a DNS resource record. Either the IP address or the host name of the device must be specified.
*/
func (a *Client) GetDeviceResourceRec(params *GetDeviceResourceRecParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceResourceRecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceResourceRecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceResourceRec",
		Method:             "GET",
		PathPattern:        "/Gets/getDeviceResourceRec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDeviceResourceRecReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceResourceRecOK), nil

}

/*
GetDomainResourceRec gets a domain resource record

Retrieve information about a DNS resource record.
*/
func (a *Client) GetDomainResourceRec(params *GetDomainResourceRecParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainResourceRecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainResourceRecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDomainResourceRec",
		Method:             "GET",
		PathPattern:        "/Gets/getDomainResourceRec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDomainResourceRecReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainResourceRecOK), nil

}

/*
GetZoneResourceRec gets a zone resource record

Retrieve information about a DNS zone resource record.
*/
func (a *Client) GetZoneResourceRec(params *GetZoneResourceRecParams, authInfo runtime.ClientAuthInfoWriter) (*GetZoneResourceRecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetZoneResourceRecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getZoneResourceRec",
		Method:             "GET",
		PathPattern:        "/Gets/getZoneResourceRecord",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetZoneResourceRecReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetZoneResourceRecOK), nil

}

/*
ImportDeviceResourceRecord imports a device resource record

The importDeviceResourceRecord operation enables you to import DNS resource records for a device into IPControl. It can also be used to modify an existing resource record by specifying its id.
*/
func (a *Client) ImportDeviceResourceRecord(params *ImportDeviceResourceRecordParams, authInfo runtime.ClientAuthInfoWriter) (*ImportDeviceResourceRecordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportDeviceResourceRecordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importDeviceResourceRecord",
		Method:             "POST",
		PathPattern:        "/Imports/importDeviceResourceRecord",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportDeviceResourceRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ImportDeviceResourceRecordOK), nil

}

/*
ImportDomainResourceRecord imports a domain resource record

The importDomainResourceRecord operation enables you to import resource records into IPControl that are not bound to a device, but still appear in a zone file. It can also be used to modify an existing resource record by specifying its id.
*/
func (a *Client) ImportDomainResourceRecord(params *ImportDomainResourceRecordParams, authInfo runtime.ClientAuthInfoWriter) (*ImportDomainResourceRecordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportDomainResourceRecordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importDomainResourceRecord",
		Method:             "POST",
		PathPattern:        "/Imports/importDomainResourceRecord",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportDomainResourceRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ImportDomainResourceRecordOK), nil

}

/*
ImportZoneResourceRecord imports a zone resource record

The importZoneResourceRecord operation enables you to import a DNS resource record for a zone to IPControl. Note: this interface should not be confused with the ImportDomainResourceRecord API, which is used to add records to a domain. ImportZoneResourceRecord is only effective when the 'Automatic Generation of NS/Glue Records' is set to OFF on the target zone.
*/
func (a *Client) ImportZoneResourceRecord(params *ImportZoneResourceRecordParams, authInfo runtime.ClientAuthInfoWriter) (*ImportZoneResourceRecordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportZoneResourceRecordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importZoneResourceRecord",
		Method:             "POST",
		PathPattern:        "/Imports/importZoneResourceRecord",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportZoneResourceRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ImportZoneResourceRecordOK), nil

}

/*
InitExportDeviceResourceRec exports device resource records

The initExportDeviceResourceRec operation enables you to export device resource records for a device or list of devices from IPControl. You can filter the list of records retrieved. When recurseContainerHierarchy is specified in the options array, the service recursively selects all devices within all child containers specified within the Container Selector filter. This flag is ignored if a Container Selector is not included. When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportDeviceResourceRec operation. Otherwise, the returned structure can be passed on a subsequent exportDeviceResourceRec operation to retrieve results.
*/
func (a *Client) InitExportDeviceResourceRec(params *InitExportDeviceResourceRecParams, authInfo runtime.ClientAuthInfoWriter) (*InitExportDeviceResourceRecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitExportDeviceResourceRecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initExportDeviceResourceRec",
		Method:             "POST",
		PathPattern:        "/Exports/initExportDeviceResourceRec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitExportDeviceResourceRecReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InitExportDeviceResourceRecOK), nil

}

/*
InitExportDomainResourceRec exports domain resource records

The initExportDomainResourceRec operation enables you to export domain resource records for a domain or list of domains from IPControl. You can filter the list of records retrieved. When includeDeviceRRs is specified in the options array, all resource records for the included domains will be exported, including those bound to a device. The default behavior is to export only those resource records not bound to a device. When pageSize and firstResultPos are specified,  a list of structures is returned as described for the exportDomainResourceRec operation. Otherwise, the returned structure can be passed on a subsequent exportDomainResourceRec operation to retrieve results.
*/
func (a *Client) InitExportDomainResourceRec(params *InitExportDomainResourceRecParams, authInfo runtime.ClientAuthInfoWriter) (*InitExportDomainResourceRecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitExportDomainResourceRecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initExportDomainResourceRec",
		Method:             "POST",
		PathPattern:        "/Exports/initExportDomainResourceRec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitExportDomainResourceRecReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InitExportDomainResourceRecOK), nil

}

/*
InitExportResourceRecordRestoreList exports resource record restore list

The initExportResourceRecordRestoreList API enables the web service client to issue a request to retrieve a list of resource records that have been deleted and may be eligible for restoring. This service enables the client to filter the list of resource records exported. A superuser may filter the results based on the requesting administrator(not available for non-superusers). Resource records deleted from a device may be filtered based on hostname or IP Address of the device. Resource records deleted from a zone may be filtered based on the zone, server or view. There are no options defined for this operation. When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportResourceRecordRestoreList operation. Otherwise, the returned structure can be passed on a subsequent exportResourceRecordRestoreList operation to retrieve results.
*/
func (a *Client) InitExportResourceRecordRestoreList(params *InitExportResourceRecordRestoreListParams, authInfo runtime.ClientAuthInfoWriter) (*InitExportResourceRecordRestoreListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitExportResourceRecordRestoreListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initExportResourceRecordRestoreList",
		Method:             "POST",
		PathPattern:        "/Exports/initExportResourceRecordRestoreList",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitExportResourceRecordRestoreListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InitExportResourceRecordRestoreListOK), nil

}

/*
InitExportZoneResourceRec exports zone resource records

The initExportZoneResourceRec operation enables you to export zone resource records for a zone or list of zones from IPControl. You can filter the list of records retrieved. When pageSize and firstResultPos are specified,  a list of structures is returned as described for the exportZoneResourceRec operation. Otherwise, the returned structure can be passed on a subsequent exportZoneResourceRec operation to retrieve results.
*/
func (a *Client) InitExportZoneResourceRec(params *InitExportZoneResourceRecParams, authInfo runtime.ClientAuthInfoWriter) (*InitExportZoneResourceRecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitExportZoneResourceRecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initExportZoneResourceRec",
		Method:             "POST",
		PathPattern:        "/Exports/initExportZoneResourceRecord",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitExportZoneResourceRecReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InitExportZoneResourceRecOK), nil

}

/*
RestoreDeletedResourceRecord restores a deleted resource record

The restoreDeletedResourceRecord operation enables you to restore a deleted resource record. To obtain the required restoreId, use the exportResourceRecordRestoreList operation to export a list of the resource records that were deleted and are available to be restored.
*/
func (a *Client) RestoreDeletedResourceRecord(params *RestoreDeletedResourceRecordParams, authInfo runtime.ClientAuthInfoWriter) (*RestoreDeletedResourceRecordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreDeletedResourceRecordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "restoreDeletedResourceRecord",
		Method:             "POST",
		PathPattern:        "/Imports/restoreDeletedResourceRecord",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RestoreDeletedResourceRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RestoreDeletedResourceRecordOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
