// Code generated by go-swagger; DO NOT EDIT.

package pending_approval

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new pending approval API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pending approval API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
EndExportResourceRecordPendingApproval exports resource record pending approvals

The endExportResourceRecordPendingApproval operation is an optional final step in the series of calls to export a list of resource records that were submitted for approval by the invoking administrator from IPControl. Invoking this operation enables IPControl to clean up session information.
*/
func (a *Client) EndExportResourceRecordPendingApproval(params *EndExportResourceRecordPendingApprovalParams, authInfo runtime.ClientAuthInfoWriter) (*EndExportResourceRecordPendingApprovalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndExportResourceRecordPendingApprovalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "endExportResourceRecordPendingApproval",
		Method:             "POST",
		PathPattern:        "/Exports/endExportResourceRecordPendingApproval",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EndExportResourceRecordPendingApprovalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EndExportResourceRecordPendingApprovalOK), nil

}

/*
EndExportResourceRecordPendingApprovalStatus exports resource record pending approval status

The endExportResourceRecordPendingApprovalStatus operation is an optional final step in the series of calls to export a list of resource records that were submitted for approval by the invoking administrator from IPControl. Invoking this operation enables IPControl to clean up session information.
*/
func (a *Client) EndExportResourceRecordPendingApprovalStatus(params *EndExportResourceRecordPendingApprovalStatusParams, authInfo runtime.ClientAuthInfoWriter) (*EndExportResourceRecordPendingApprovalStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndExportResourceRecordPendingApprovalStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "endExportResourceRecordPendingApprovalStatus",
		Method:             "POST",
		PathPattern:        "/Exports/endExportResourceRecordPendingApprovalStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EndExportResourceRecordPendingApprovalStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EndExportResourceRecordPendingApprovalStatusOK), nil

}

/*
ExportResourceRecordPendingApproval exports resource record pending approvals

The exportResourceRecordPendingApproval operation enables you to export a list of resource records that were submitted for approval by the invoking administrator. These updates include those to create, update or delete a resource record. Before invoking the exportResourceRecordPendingApproval operation, you must use initExportResourceRecordPendingApproval to initialize the API. The response returned from the init operation becomes the input to this operation.
*/
func (a *Client) ExportResourceRecordPendingApproval(params *ExportResourceRecordPendingApprovalParams, authInfo runtime.ClientAuthInfoWriter) (*ExportResourceRecordPendingApprovalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportResourceRecordPendingApprovalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportResourceRecordPendingApproval",
		Method:             "POST",
		PathPattern:        "/Exports/exportResourceRecordPendingApproval",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportResourceRecordPendingApprovalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportResourceRecordPendingApprovalOK), nil

}

/*
ExportResourceRecordPendingApprovalStatus exports resource record pending approval status

The exportResourceRecordPendingApprovalStatus operation enables you to export a list of resource records that were submitted for approval by the invoking administrator. These updates include those to create, update or delete a resource record. Before invoking the exportResourceRecordPendingApprovalStatus operation, you must use initExportResourceRecordPendingApprovalStatus to initialize the API. The response returned from the init operation becomes the input to this operation.
*/
func (a *Client) ExportResourceRecordPendingApprovalStatus(params *ExportResourceRecordPendingApprovalStatusParams, authInfo runtime.ClientAuthInfoWriter) (*ExportResourceRecordPendingApprovalStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportResourceRecordPendingApprovalStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportResourceRecordPendingApprovalStatus",
		Method:             "POST",
		PathPattern:        "/Exports/exportResourceRecordPendingApprovalStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportResourceRecordPendingApprovalStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportResourceRecordPendingApprovalStatusOK), nil

}

/*
InitExportResourceRecordPendingApproval exports resource record pending approvals

The initExportResourceRecordPendingApproval operation enables you to issue a request to retrieve a list of resource records that are waiting for approval by the invoking administrator. This service enables the client to filter the list of resource records retrieved by requesting administrator, domain name/type and the requested action. There are no options defined for this operation. When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportResourceRecordPendingApproval operation. Otherwise, the returned structure can be passed on a subsequent exportResourceRecordPendingApproval operation to retrieve results.
*/
func (a *Client) InitExportResourceRecordPendingApproval(params *InitExportResourceRecordPendingApprovalParams, authInfo runtime.ClientAuthInfoWriter) (*InitExportResourceRecordPendingApprovalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitExportResourceRecordPendingApprovalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initExportResourceRecordPendingApproval",
		Method:             "POST",
		PathPattern:        "/Exports/initExportResourceRecordPendingApproval",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitExportResourceRecordPendingApprovalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InitExportResourceRecordPendingApprovalOK), nil

}

/*
InitExportResourceRecordPendingApprovalStatus exports resource record pending approval status

The initExportResourceRecordPendingApprovalStatus operation enables you to issue a request to retrieve a list of resource records that were submitted for approval by the invoking administrator. These updates include those to create, update or delete a resource record. There are no options defined for this operation. When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportResourceRecordPendingApprovalStatus operation. Otherwise, the returned structure can be passed on a subsequent exportResourceRecordPendingApprovalStatus operation to retrieve results.
*/
func (a *Client) InitExportResourceRecordPendingApprovalStatus(params *InitExportResourceRecordPendingApprovalStatusParams, authInfo runtime.ClientAuthInfoWriter) (*InitExportResourceRecordPendingApprovalStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitExportResourceRecordPendingApprovalStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initExportResourceRecordPendingApprovalStatus",
		Method:             "POST",
		PathPattern:        "/Exports/initExportResourceRecordPendingApprovalStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitExportResourceRecordPendingApprovalStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InitExportResourceRecordPendingApprovalStatusOK), nil

}

/*
ModifyPendingApproval modifies pending approval

The modifyPendingApproval operation enables you to approve or reject changes submitted to the administrator's pending approval queue.
*/
func (a *Client) ModifyPendingApproval(params *ModifyPendingApprovalParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyPendingApprovalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyPendingApprovalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyPendingApproval",
		Method:             "POST",
		PathPattern:        "/Imports/modifyPendingApproval",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyPendingApprovalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyPendingApprovalOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
