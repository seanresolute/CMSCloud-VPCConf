// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDeviceByMACAddressParams creates a new GetDeviceByMACAddressParams object
// with the default values initialized.
func NewGetDeviceByMACAddressParams() *GetDeviceByMACAddressParams {
	var ()
	return &GetDeviceByMACAddressParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDeviceByMACAddressParamsWithTimeout creates a new GetDeviceByMACAddressParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDeviceByMACAddressParamsWithTimeout(timeout time.Duration) *GetDeviceByMACAddressParams {
	var ()
	return &GetDeviceByMACAddressParams{

		timeout: timeout,
	}
}

// NewGetDeviceByMACAddressParamsWithContext creates a new GetDeviceByMACAddressParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDeviceByMACAddressParamsWithContext(ctx context.Context) *GetDeviceByMACAddressParams {
	var ()
	return &GetDeviceByMACAddressParams{

		Context: ctx,
	}
}

// NewGetDeviceByMACAddressParamsWithHTTPClient creates a new GetDeviceByMACAddressParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDeviceByMACAddressParamsWithHTTPClient(client *http.Client) *GetDeviceByMACAddressParams {
	var ()
	return &GetDeviceByMACAddressParams{
		HTTPClient: client,
	}
}

/*GetDeviceByMACAddressParams contains all the parameters to send to the API endpoint
for the get device by m a c address operation typically these are written to a http.Request
*/
type GetDeviceByMACAddressParams struct {

	/*MacAddress
	  The hardware address of the device

	*/
	MacAddress string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get device by m a c address params
func (o *GetDeviceByMACAddressParams) WithTimeout(timeout time.Duration) *GetDeviceByMACAddressParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get device by m a c address params
func (o *GetDeviceByMACAddressParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get device by m a c address params
func (o *GetDeviceByMACAddressParams) WithContext(ctx context.Context) *GetDeviceByMACAddressParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get device by m a c address params
func (o *GetDeviceByMACAddressParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get device by m a c address params
func (o *GetDeviceByMACAddressParams) WithHTTPClient(client *http.Client) *GetDeviceByMACAddressParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get device by m a c address params
func (o *GetDeviceByMACAddressParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMacAddress adds the macAddress to the get device by m a c address params
func (o *GetDeviceByMACAddressParams) WithMacAddress(macAddress string) *GetDeviceByMACAddressParams {
	o.SetMacAddress(macAddress)
	return o
}

// SetMacAddress adds the macAddress to the get device by m a c address params
func (o *GetDeviceByMACAddressParams) SetMacAddress(macAddress string) {
	o.MacAddress = macAddress
}

// WriteToRequest writes these params to a swagger request
func (o *GetDeviceByMACAddressParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param macAddress
	qrMacAddress := o.MacAddress
	qMacAddress := qrMacAddress
	if qMacAddress != "" {
		if err := r.SetQueryParam("macAddress", qMacAddress); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
