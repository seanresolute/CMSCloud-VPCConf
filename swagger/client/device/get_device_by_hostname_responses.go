// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/models"
)

// GetDeviceByHostnameReader is a Reader for the GetDeviceByHostname structure.
type GetDeviceByHostnameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeviceByHostnameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetDeviceByHostnameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewGetDeviceByHostnameDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetDeviceByHostnameOK creates a GetDeviceByHostnameOK with default headers values
func NewGetDeviceByHostnameOK() *GetDeviceByHostnameOK {
	return &GetDeviceByHostnameOK{}
}

/*GetDeviceByHostnameOK handles this case with default header values.

Device
*/
type GetDeviceByHostnameOK struct {
	Payload *models.WSDevice
}

func (o *GetDeviceByHostnameOK) Error() string {
	return fmt.Sprintf("[GET /Gets/getDeviceByHostname][%d] getDeviceByHostnameOK  %+v", 200, o.Payload)
}

func (o *GetDeviceByHostnameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WSDevice)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceByHostnameDefault creates a GetDeviceByHostnameDefault with default headers values
func NewGetDeviceByHostnameDefault(code int) *GetDeviceByHostnameDefault {
	return &GetDeviceByHostnameDefault{
		_statusCode: code,
	}
}

/*GetDeviceByHostnameDefault handles this case with default header values.

Error response
*/
type GetDeviceByHostnameDefault struct {
	_statusCode int

	Payload *models.Fault
}

// Code gets the status code for the get device by hostname default response
func (o *GetDeviceByHostnameDefault) Code() int {
	return o._statusCode
}

func (o *GetDeviceByHostnameDefault) Error() string {
	return fmt.Sprintf("[GET /Gets/getDeviceByHostname][%d] getDeviceByHostname default  %+v", o._statusCode, o.Payload)
}

func (o *GetDeviceByHostnameDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Fault)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
