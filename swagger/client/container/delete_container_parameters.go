// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteContainerParams creates a new DeleteContainerParams object
// with the default values initialized.
func NewDeleteContainerParams() *DeleteContainerParams {
	var ()
	return &DeleteContainerParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteContainerParamsWithTimeout creates a new DeleteContainerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteContainerParamsWithTimeout(timeout time.Duration) *DeleteContainerParams {
	var ()
	return &DeleteContainerParams{

		timeout: timeout,
	}
}

// NewDeleteContainerParamsWithContext creates a new DeleteContainerParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteContainerParamsWithContext(ctx context.Context) *DeleteContainerParams {
	var ()
	return &DeleteContainerParams{

		Context: ctx,
	}
}

// NewDeleteContainerParamsWithHTTPClient creates a new DeleteContainerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteContainerParamsWithHTTPClient(client *http.Client) *DeleteContainerParams {
	var ()
	return &DeleteContainerParams{
		HTTPClient: client,
	}
}

/*DeleteContainerParams contains all the parameters to send to the API endpoint
for the delete container operation typically these are written to a http.Request
*/
type DeleteContainerParams struct {

	/*DeleteParameters
	  The name of the container to be deleted. The name can be either qualified or unqualified, but must be unique. A qualified name must start with the root container and include the complete container path to the desired container. The container names should be separated by slashes. For example, 'InControl/North America/US/PA'

	*/
	DeleteParameters DeleteContainerBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete container params
func (o *DeleteContainerParams) WithTimeout(timeout time.Duration) *DeleteContainerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete container params
func (o *DeleteContainerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete container params
func (o *DeleteContainerParams) WithContext(ctx context.Context) *DeleteContainerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete container params
func (o *DeleteContainerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete container params
func (o *DeleteContainerParams) WithHTTPClient(client *http.Client) *DeleteContainerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete container params
func (o *DeleteContainerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeleteParameters adds the deleteParameters to the delete container params
func (o *DeleteContainerParams) WithDeleteParameters(deleteParameters DeleteContainerBody) *DeleteContainerParams {
	o.SetDeleteParameters(deleteParameters)
	return o
}

// SetDeleteParameters adds the deleteParameters to the delete container params
func (o *DeleteContainerParams) SetDeleteParameters(deleteParameters DeleteContainerBody) {
	o.DeleteParameters = deleteParameters
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteContainerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.DeleteParameters); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
