// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/models"
)

// AddSiteReader is a Reader for the AddSite structure.
type AddSiteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddSiteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddSiteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewAddSiteDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddSiteOK creates a AddSiteOK with default headers values
func NewAddSiteOK() *AddSiteOK {
	return &AddSiteOK{}
}

/*AddSiteOK handles this case with default header values.

Site returned
*/
type AddSiteOK struct {
	Payload *AddSiteOKBody
}

func (o *AddSiteOK) Error() string {
	return fmt.Sprintf("[POST /Imports/addSite][%d] addSiteOK  %+v", 200, o.Payload)
}

func (o *AddSiteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddSiteOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddSiteDefault creates a AddSiteDefault with default headers values
func NewAddSiteDefault(code int) *AddSiteDefault {
	return &AddSiteDefault{
		_statusCode: code,
	}
}

/*AddSiteDefault handles this case with default header values.

Error response
*/
type AddSiteDefault struct {
	_statusCode int

	Payload *models.Fault
}

// Code gets the status code for the add site default response
func (o *AddSiteDefault) Code() int {
	return o._statusCode
}

func (o *AddSiteDefault) Error() string {
	return fmt.Sprintf("[POST /Imports/addSite][%d] addSite default  %+v", o._statusCode, o.Payload)
}

func (o *AddSiteDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Fault)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AddSiteBody add site body
swagger:model AddSiteBody
*/
type AddSiteBody struct {

	// site
	Site *models.WSSite `json:"site,omitempty"`
}

// Validate validates this add site body
func (o *AddSiteBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddSiteBody) validateSite(formats strfmt.Registry) error {

	if swag.IsZero(o.Site) { // not required
		return nil
	}

	if o.Site != nil {
		if err := o.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Import Parameters" + "." + "site")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddSiteBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddSiteBody) UnmarshalBinary(b []byte) error {
	var res AddSiteBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddSiteOKBody add site o k body
swagger:model AddSiteOKBody
*/
type AddSiteOKBody struct {

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this add site o k body
func (o *AddSiteOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddSiteOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddSiteOKBody) UnmarshalBinary(b []byte) error {
	var res AddSiteOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
