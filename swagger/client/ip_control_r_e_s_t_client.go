// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/address_pool"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/administrator"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/administrator_role"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/aggregate_block"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/block"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/child_block"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/container"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/d_h_c_p_option_set"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/d_h_c_p_policy_set"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/d_h_c_p_server"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/device"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/domain"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/login"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/network_element"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/network_link"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/network_service"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/pending_approval"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/prefix_pool"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/resource_record"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/root_block"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/tag_association"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/task"
	"github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/client/zone"
)

// Default IP control r e s t HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "54.218.232.193:8443"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/inc-rest/api/v1"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http", "https"}

// NewHTTPClient creates a new IP control r e s t HTTP client.
func NewHTTPClient(formats strfmt.Registry) *IPControlREST {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new IP control r e s t HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *IPControlREST {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new IP control r e s t client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *IPControlREST {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(IPControlREST)
	cli.Transport = transport

	cli.AddressPool = address_pool.New(transport, formats)

	cli.Administrator = administrator.New(transport, formats)

	cli.AdministratorRole = administrator_role.New(transport, formats)

	cli.AggregateBlock = aggregate_block.New(transport, formats)

	cli.Block = block.New(transport, formats)

	cli.ChildBlock = child_block.New(transport, formats)

	cli.Container = container.New(transport, formats)

	cli.DHCPOptionSet = d_h_c_p_option_set.New(transport, formats)

	cli.DHCPPolicySet = d_h_c_p_policy_set.New(transport, formats)

	cli.DHCPServer = d_h_c_p_server.New(transport, formats)

	cli.Device = device.New(transport, formats)

	cli.Domain = domain.New(transport, formats)

	cli.Login = login.New(transport, formats)

	cli.NetworkElement = network_element.New(transport, formats)

	cli.NetworkLink = network_link.New(transport, formats)

	cli.NetworkService = network_service.New(transport, formats)

	cli.PendingApproval = pending_approval.New(transport, formats)

	cli.PrefixPool = prefix_pool.New(transport, formats)

	cli.ResourceRecord = resource_record.New(transport, formats)

	cli.RootBlock = root_block.New(transport, formats)

	cli.TagAssociation = tag_association.New(transport, formats)

	cli.Task = task.New(transport, formats)

	cli.Zone = zone.New(transport, formats)

	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// IPControlREST is a client for IP control r e s t
type IPControlREST struct {
	AddressPool *address_pool.Client

	Administrator *administrator.Client

	AdministratorRole *administrator_role.Client

	AggregateBlock *aggregate_block.Client

	Block *block.Client

	ChildBlock *child_block.Client

	Container *container.Client

	DHCPOptionSet *d_h_c_p_option_set.Client

	DHCPPolicySet *d_h_c_p_policy_set.Client

	DHCPServer *d_h_c_p_server.Client

	Device *device.Client

	Domain *domain.Client

	Login *login.Client

	NetworkElement *network_element.Client

	NetworkLink *network_link.Client

	NetworkService *network_service.Client

	PendingApproval *pending_approval.Client

	PrefixPool *prefix_pool.Client

	ResourceRecord *resource_record.Client

	RootBlock *root_block.Client

	TagAssociation *tag_association.Client

	Task *task.Client

	Zone *zone.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *IPControlREST) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.AddressPool.SetTransport(transport)

	c.Administrator.SetTransport(transport)

	c.AdministratorRole.SetTransport(transport)

	c.AggregateBlock.SetTransport(transport)

	c.Block.SetTransport(transport)

	c.ChildBlock.SetTransport(transport)

	c.Container.SetTransport(transport)

	c.DHCPOptionSet.SetTransport(transport)

	c.DHCPPolicySet.SetTransport(transport)

	c.DHCPServer.SetTransport(transport)

	c.Device.SetTransport(transport)

	c.Domain.SetTransport(transport)

	c.Login.SetTransport(transport)

	c.NetworkElement.SetTransport(transport)

	c.NetworkLink.SetTransport(transport)

	c.NetworkService.SetTransport(transport)

	c.PendingApproval.SetTransport(transport)

	c.PrefixPool.SetTransport(transport)

	c.ResourceRecord.SetTransport(transport)

	c.RootBlock.SetTransport(transport)

	c.TagAssociation.SetTransport(transport)

	c.Task.SetTransport(transport)

	c.Zone.SetTransport(transport)

}
