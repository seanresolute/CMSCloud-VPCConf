// Code generated by go-swagger; DO NOT EDIT.

package login

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAcceptItemParams creates a new AcceptItemParams object
// with the default values initialized.
func NewAcceptItemParams() *AcceptItemParams {
	var ()
	return &AcceptItemParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAcceptItemParamsWithTimeout creates a new AcceptItemParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAcceptItemParamsWithTimeout(timeout time.Duration) *AcceptItemParams {
	var ()
	return &AcceptItemParams{

		timeout: timeout,
	}
}

// NewAcceptItemParamsWithContext creates a new AcceptItemParams object
// with the default values initialized, and the ability to set a context for a request
func NewAcceptItemParamsWithContext(ctx context.Context) *AcceptItemParams {
	var ()
	return &AcceptItemParams{

		Context: ctx,
	}
}

// NewAcceptItemParamsWithHTTPClient creates a new AcceptItemParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAcceptItemParamsWithHTTPClient(client *http.Client) *AcceptItemParams {
	var ()
	return &AcceptItemParams{
		HTTPClient: client,
	}
}

/*AcceptItemParams contains all the parameters to send to the API endpoint
for the accept item operation typically these are written to a http.Request
*/
type AcceptItemParams struct {

	/*Password
	  Password for user

	*/
	Password *string
	/*Username
	  IPControl user name

	*/
	Username *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the accept item params
func (o *AcceptItemParams) WithTimeout(timeout time.Duration) *AcceptItemParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the accept item params
func (o *AcceptItemParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the accept item params
func (o *AcceptItemParams) WithContext(ctx context.Context) *AcceptItemParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the accept item params
func (o *AcceptItemParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the accept item params
func (o *AcceptItemParams) WithHTTPClient(client *http.Client) *AcceptItemParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the accept item params
func (o *AcceptItemParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPassword adds the password to the accept item params
func (o *AcceptItemParams) WithPassword(password *string) *AcceptItemParams {
	o.SetPassword(password)
	return o
}

// SetPassword adds the password to the accept item params
func (o *AcceptItemParams) SetPassword(password *string) {
	o.Password = password
}

// WithUsername adds the username to the accept item params
func (o *AcceptItemParams) WithUsername(username *string) *AcceptItemParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the accept item params
func (o *AcceptItemParams) SetUsername(username *string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *AcceptItemParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Password != nil {

		// form param password
		var frPassword string
		if o.Password != nil {
			frPassword = *o.Password
		}
		fPassword := frPassword
		if fPassword != "" {
			if err := r.SetFormParam("password", fPassword); err != nil {
				return err
			}
		}

	}

	if o.Username != nil {

		// form param username
		var frUsername string
		if o.Username != nil {
			frUsername = *o.Username
		}
		fUsername := frUsername
		if fUsername != "" {
			if err := r.SetFormParam("username", fUsername); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
