// Code generated by go-swagger; DO NOT EDIT.

package d_h_c_p_policy_set

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteDhcpPolicySetParams creates a new DeleteDhcpPolicySetParams object
// with the default values initialized.
func NewDeleteDhcpPolicySetParams() *DeleteDhcpPolicySetParams {
	var ()
	return &DeleteDhcpPolicySetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteDhcpPolicySetParamsWithTimeout creates a new DeleteDhcpPolicySetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteDhcpPolicySetParamsWithTimeout(timeout time.Duration) *DeleteDhcpPolicySetParams {
	var ()
	return &DeleteDhcpPolicySetParams{

		timeout: timeout,
	}
}

// NewDeleteDhcpPolicySetParamsWithContext creates a new DeleteDhcpPolicySetParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteDhcpPolicySetParamsWithContext(ctx context.Context) *DeleteDhcpPolicySetParams {
	var ()
	return &DeleteDhcpPolicySetParams{

		Context: ctx,
	}
}

// NewDeleteDhcpPolicySetParamsWithHTTPClient creates a new DeleteDhcpPolicySetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteDhcpPolicySetParamsWithHTTPClient(client *http.Client) *DeleteDhcpPolicySetParams {
	var ()
	return &DeleteDhcpPolicySetParams{
		HTTPClient: client,
	}
}

/*DeleteDhcpPolicySetParams contains all the parameters to send to the API endpoint
for the delete dhcp policy set operation typically these are written to a http.Request
*/
type DeleteDhcpPolicySetParams struct {

	/*DeleteParameters
	  The input describing the DHCP policy set to be deleted. name is required.

	*/
	DeleteParameters DeleteDhcpPolicySetBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete dhcp policy set params
func (o *DeleteDhcpPolicySetParams) WithTimeout(timeout time.Duration) *DeleteDhcpPolicySetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete dhcp policy set params
func (o *DeleteDhcpPolicySetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete dhcp policy set params
func (o *DeleteDhcpPolicySetParams) WithContext(ctx context.Context) *DeleteDhcpPolicySetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete dhcp policy set params
func (o *DeleteDhcpPolicySetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete dhcp policy set params
func (o *DeleteDhcpPolicySetParams) WithHTTPClient(client *http.Client) *DeleteDhcpPolicySetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete dhcp policy set params
func (o *DeleteDhcpPolicySetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeleteParameters adds the deleteParameters to the delete dhcp policy set params
func (o *DeleteDhcpPolicySetParams) WithDeleteParameters(deleteParameters DeleteDhcpPolicySetBody) *DeleteDhcpPolicySetParams {
	o.SetDeleteParameters(deleteParameters)
	return o
}

// SetDeleteParameters adds the deleteParameters to the delete dhcp policy set params
func (o *DeleteDhcpPolicySetParams) SetDeleteParameters(deleteParameters DeleteDhcpPolicySetBody) {
	o.DeleteParameters = deleteParameters
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteDhcpPolicySetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.DeleteParameters); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
