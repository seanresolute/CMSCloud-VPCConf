// Code generated by go-swagger; DO NOT EDIT.

package d_h_c_p_policy_set

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDhcpPolicySetByNameParams creates a new GetDhcpPolicySetByNameParams object
// with the default values initialized.
func NewGetDhcpPolicySetByNameParams() *GetDhcpPolicySetByNameParams {
	var ()
	return &GetDhcpPolicySetByNameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDhcpPolicySetByNameParamsWithTimeout creates a new GetDhcpPolicySetByNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDhcpPolicySetByNameParamsWithTimeout(timeout time.Duration) *GetDhcpPolicySetByNameParams {
	var ()
	return &GetDhcpPolicySetByNameParams{

		timeout: timeout,
	}
}

// NewGetDhcpPolicySetByNameParamsWithContext creates a new GetDhcpPolicySetByNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDhcpPolicySetByNameParamsWithContext(ctx context.Context) *GetDhcpPolicySetByNameParams {
	var ()
	return &GetDhcpPolicySetByNameParams{

		Context: ctx,
	}
}

// NewGetDhcpPolicySetByNameParamsWithHTTPClient creates a new GetDhcpPolicySetByNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDhcpPolicySetByNameParamsWithHTTPClient(client *http.Client) *GetDhcpPolicySetByNameParams {
	var ()
	return &GetDhcpPolicySetByNameParams{
		HTTPClient: client,
	}
}

/*GetDhcpPolicySetByNameParams contains all the parameters to send to the API endpoint
for the get dhcp policy set by name operation typically these are written to a http.Request
*/
type GetDhcpPolicySetByNameParams struct {

	/*SetName
	  The name of the DHCP policy set

	*/
	SetName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get dhcp policy set by name params
func (o *GetDhcpPolicySetByNameParams) WithTimeout(timeout time.Duration) *GetDhcpPolicySetByNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get dhcp policy set by name params
func (o *GetDhcpPolicySetByNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get dhcp policy set by name params
func (o *GetDhcpPolicySetByNameParams) WithContext(ctx context.Context) *GetDhcpPolicySetByNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get dhcp policy set by name params
func (o *GetDhcpPolicySetByNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get dhcp policy set by name params
func (o *GetDhcpPolicySetByNameParams) WithHTTPClient(client *http.Client) *GetDhcpPolicySetByNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get dhcp policy set by name params
func (o *GetDhcpPolicySetByNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSetName adds the setName to the get dhcp policy set by name params
func (o *GetDhcpPolicySetByNameParams) WithSetName(setName string) *GetDhcpPolicySetByNameParams {
	o.SetSetName(setName)
	return o
}

// SetSetName adds the setName to the get dhcp policy set by name params
func (o *GetDhcpPolicySetByNameParams) SetSetName(setName string) {
	o.SetName = setName
}

// WriteToRequest writes these params to a swagger request
func (o *GetDhcpPolicySetByNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param setName
	qrSetName := o.SetName
	qSetName := qrSetName
	if qSetName != "" {
		if err := r.SetQueryParam("setName", qSetName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
