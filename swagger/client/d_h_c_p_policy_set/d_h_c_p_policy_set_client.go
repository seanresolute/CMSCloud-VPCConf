// Code generated by go-swagger; DO NOT EDIT.

package d_h_c_p_policy_set

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new d h c p policy set API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for d h c p policy set API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteDhcpPolicySet deletes a d h c p policy set

The deleteDhcpPolicySet operation enables you to delete a DHCP Policy Set from IPControl.
*/
func (a *Client) DeleteDhcpPolicySet(params *DeleteDhcpPolicySetParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDhcpPolicySetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDhcpPolicySetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDhcpPolicySet",
		Method:             "DELETE",
		PathPattern:        "/Deletes/deleteDhcpPolicySet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDhcpPolicySetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDhcpPolicySetOK), nil

}

/*
EndExportDhcpPolicySet exports d h c p policy sets

The endExportDhcpPolicySet operation is an optional final step in the series of calls to export DHCP policy sets from IPControl. Invoking this operation enables IPControl to clean up session information.
*/
func (a *Client) EndExportDhcpPolicySet(params *EndExportDhcpPolicySetParams, authInfo runtime.ClientAuthInfoWriter) (*EndExportDhcpPolicySetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndExportDhcpPolicySetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "endExportDhcpPolicySet",
		Method:             "POST",
		PathPattern:        "/Exports/endExportDhcpPolicySet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EndExportDhcpPolicySetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EndExportDhcpPolicySetOK), nil

}

/*
ExportDhcpPolicySet exports d h c p policy sets

The exportDhcpPolicySet operation enables you to export DHCP policy sets from IPControl. Before invoking the exportDhcpPolicySet operation, you must use initExportDhcpPolicySet to initialize the API. The response returned from the init operation becomes the input to this operation.
*/
func (a *Client) ExportDhcpPolicySet(params *ExportDhcpPolicySetParams, authInfo runtime.ClientAuthInfoWriter) (*ExportDhcpPolicySetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportDhcpPolicySetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportDhcpPolicySet",
		Method:             "POST",
		PathPattern:        "/Exports/exportDhcpPolicySet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportDhcpPolicySetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportDhcpPolicySetOK), nil

}

/*
GetDhcpPolicySetByName gets a d h c p policy set

Retrieve information about a DHCP policy set
*/
func (a *Client) GetDhcpPolicySetByName(params *GetDhcpPolicySetByNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetDhcpPolicySetByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDhcpPolicySetByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDhcpPolicySetByName",
		Method:             "GET",
		PathPattern:        "/Gets/getDhcpPolicySetByName",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDhcpPolicySetByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDhcpPolicySetByNameOK), nil

}

/*
ImportDhcpPolicySet imports a d h c p policy set

The ImportDhcpPolicySet operation enables you to import DHCP policy set definitions into IPControl. Specify the new set name and (optionally) the DHCP policies. For each policy, specify the name and the policyValue
*/
func (a *Client) ImportDhcpPolicySet(params *ImportDhcpPolicySetParams, authInfo runtime.ClientAuthInfoWriter) (*ImportDhcpPolicySetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportDhcpPolicySetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importDhcpPolicySet",
		Method:             "POST",
		PathPattern:        "/Imports/importDhcpPolicySet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportDhcpPolicySetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ImportDhcpPolicySetOK), nil

}

/*
InitExportDhcpPolicySet exports d h c p policy sets

The initExportDhcpPolicySet operation enables you to export DHCP policy sets from IPControl. You can filter the list of policy sets retrieved.
When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportDhcpPolicySet operation.
Otherwise, the returned structure can be passed on a subsequent exportDhcpPolicySet operation to retrieve results.
There are no options for this operation.
*/
func (a *Client) InitExportDhcpPolicySet(params *InitExportDhcpPolicySetParams, authInfo runtime.ClientAuthInfoWriter) (*InitExportDhcpPolicySetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitExportDhcpPolicySetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initExportDhcpPolicySet",
		Method:             "POST",
		PathPattern:        "/Exports/initExportDhcpPolicySet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitExportDhcpPolicySetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InitExportDhcpPolicySetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
