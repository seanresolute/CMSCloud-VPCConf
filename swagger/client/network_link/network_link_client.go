// Code generated by go-swagger; DO NOT EDIT.

package network_link

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new network link API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for network link API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteNetworkLink deletes a network link

The deleteNetworkLink operation enables you to delete a network link from IPControl.
*/
func (a *Client) DeleteNetworkLink(params *DeleteNetworkLinkParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkLinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkLink",
		Method:             "DELETE",
		PathPattern:        "/Deletes/deleteNetworkLink",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteNetworkLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNetworkLinkOK), nil

}

/*
EndExportNetworkLink exports network links

The endExportNetworkLink operation is an optional final step in the series of calls to export network links from IPControl. Invoking this operation enables IPControl to clean up session information.
*/
func (a *Client) EndExportNetworkLink(params *EndExportNetworkLinkParams, authInfo runtime.ClientAuthInfoWriter) (*EndExportNetworkLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndExportNetworkLinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "endExportNetworkLink",
		Method:             "POST",
		PathPattern:        "/Exports/endExportNetworkLink",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EndExportNetworkLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EndExportNetworkLinkOK), nil

}

/*
ExportNetworkLink exports network links

The exportNetworkLink operation enables you to export network links from IPControl. Before invoking the exportNetworkLink operation, you must use initExportNetworkLink to initialize the API. The response returned from the init operation becomes the input to this operation.
*/
func (a *Client) ExportNetworkLink(params *ExportNetworkLinkParams, authInfo runtime.ClientAuthInfoWriter) (*ExportNetworkLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportNetworkLinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportNetworkLink",
		Method:             "POST",
		PathPattern:        "/Exports/exportNetworkLink",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportNetworkLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportNetworkLinkOK), nil

}

/*
GetNetworkLinkByName gets a network link

Retrieve information about a network link.
*/
func (a *Client) GetNetworkLinkByName(params *GetNetworkLinkByNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkLinkByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkLinkByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkLinkByName",
		Method:             "GET",
		PathPattern:        "/Gets/getNetworkLinkByName",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworkLinkByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworkLinkByNameOK), nil

}

/*
ImportNetworkLink imports network link

The importNetworkLink operation enables you to import network links to IPControl. Only logical network links can be imported. It can also be used to modify an existing logical network link by specifying its id.
*/
func (a *Client) ImportNetworkLink(params *ImportNetworkLinkParams, authInfo runtime.ClientAuthInfoWriter) (*ImportNetworkLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportNetworkLinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importNetworkLink",
		Method:             "POST",
		PathPattern:        "/Imports/importNetworkLink",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportNetworkLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ImportNetworkLinkOK), nil

}

/*
InitExportNetworkLink exports network links

The initExportNetworkLink operation enables you to export network links from IPControl. You can filter the list of records retrieved. There are no options defined for this operation. When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportNetworkLink operation. Otherwise, the returned structure can be passed on a subsequent exportNetworkLink operation to retrieve results.
*/
func (a *Client) InitExportNetworkLink(params *InitExportNetworkLinkParams, authInfo runtime.ClientAuthInfoWriter) (*InitExportNetworkLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitExportNetworkLinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initExportNetworkLink",
		Method:             "POST",
		PathPattern:        "/Exports/initExportNetworkLink",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitExportNetworkLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InitExportNetworkLinkOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
