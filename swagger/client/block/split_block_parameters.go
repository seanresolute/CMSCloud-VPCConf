// Code generated by go-swagger; DO NOT EDIT.

package block

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSplitBlockParams creates a new SplitBlockParams object
// with the default values initialized.
func NewSplitBlockParams() *SplitBlockParams {
	var ()
	return &SplitBlockParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSplitBlockParamsWithTimeout creates a new SplitBlockParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSplitBlockParamsWithTimeout(timeout time.Duration) *SplitBlockParams {
	var ()
	return &SplitBlockParams{

		timeout: timeout,
	}
}

// NewSplitBlockParamsWithContext creates a new SplitBlockParams object
// with the default values initialized, and the ability to set a context for a request
func NewSplitBlockParamsWithContext(ctx context.Context) *SplitBlockParams {
	var ()
	return &SplitBlockParams{

		Context: ctx,
	}
}

// NewSplitBlockParamsWithHTTPClient creates a new SplitBlockParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSplitBlockParamsWithHTTPClient(client *http.Client) *SplitBlockParams {
	var ()
	return &SplitBlockParams{
		HTTPClient: client,
	}
}

/*SplitBlockParams contains all the parameters to send to the API endpoint
for the split block operation typically these are written to a http.Request
*/
type SplitBlockParams struct {

	/*ModifyParameters
	  The input describing the block to be modified. The targetStartAddress will default to the start address of the block being split, if not specified. All other parameters are required to specify the block to be split.

	*/
	ModifyParameters SplitBlockBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the split block params
func (o *SplitBlockParams) WithTimeout(timeout time.Duration) *SplitBlockParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the split block params
func (o *SplitBlockParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the split block params
func (o *SplitBlockParams) WithContext(ctx context.Context) *SplitBlockParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the split block params
func (o *SplitBlockParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the split block params
func (o *SplitBlockParams) WithHTTPClient(client *http.Client) *SplitBlockParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the split block params
func (o *SplitBlockParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithModifyParameters adds the modifyParameters to the split block params
func (o *SplitBlockParams) WithModifyParameters(modifyParameters SplitBlockBody) *SplitBlockParams {
	o.SetModifyParameters(modifyParameters)
	return o
}

// SetModifyParameters adds the modifyParameters to the split block params
func (o *SplitBlockParams) SetModifyParameters(modifyParameters SplitBlockBody) {
	o.ModifyParameters = modifyParameters
}

// WriteToRequest writes these params to a swagger request
func (o *SplitBlockParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.ModifyParameters); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
