// Code generated by go-swagger; DO NOT EDIT.

package block

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"
	"log"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/CMSgov/CMS-AWS-West-Network-Architecture/vpc-automation/swagger/models"
)

// SplitBlockReader is a Reader for the SplitBlock structure.
type SplitBlockReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SplitBlockReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSplitBlockOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		log.Printf("Code=%d", response.Code())
		b, _ := ioutil.ReadAll(response.Body())
		log.Printf("%s", b)
		result := NewSplitBlockDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSplitBlockOK creates a SplitBlockOK with default headers values
func NewSplitBlockOK() *SplitBlockOK {
	return &SplitBlockOK{}
}

/*SplitBlockOK handles this case with default header values.

void returned
*/
type SplitBlockOK struct {
}

func (o *SplitBlockOK) Error() string {
	return fmt.Sprintf("[POST /Imports/splitBlock][%d] splitBlockOK ", 200)
}

func (o *SplitBlockOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSplitBlockDefault creates a SplitBlockDefault with default headers values
func NewSplitBlockDefault(code int) *SplitBlockDefault {
	return &SplitBlockDefault{
		_statusCode: code,
	}
}

/*SplitBlockDefault handles this case with default header values.

Error response
*/
type SplitBlockDefault struct {
	_statusCode int

	Payload *models.Fault
}

// Code gets the status code for the split block default response
func (o *SplitBlockDefault) Code() int {
	return o._statusCode
}

func (o *SplitBlockDefault) Error() string {
	return fmt.Sprintf("[POST /Imports/splitBlock][%d] splitBlock default  %+v", o._statusCode, o.Payload)
}

func (o *SplitBlockDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Fault)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SplitBlockBody split block body
swagger:model SplitBlockBody
*/
type SplitBlockBody struct {

	// block name
	BlockName string `json:"blockName,omitempty"`

	// container
	Container string `json:"container,omitempty"`

	// equal sizes
	EqualSizes bool `json:"equalSizes"`

	// target size
	TargetSize int64 `json:"targetSize,omitempty"`

	// target start address
	TargetStartAddress string `json:"targetStartAddress,omitempty"`
}

// Validate validates this split block body
func (o *SplitBlockBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SplitBlockBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SplitBlockBody) UnmarshalBinary(b []byte) error {
	var res SplitBlockBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
