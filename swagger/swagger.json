{
  "swagger": "2.0",
  "info": {
    "title": "IPControl REST API",
    "description": "Enables access to the IPControl Web Services APIs via the REST protocol",
    "termsOfService": "Licensed to IPControl customers only",
    "contact": {
      "name": "BT Diamond IP",
      "url": "http://swsupport.diamondipam.com",
      "email": "swsupport@diamondipam.com"
    },
    "license": {
      "name": "Commercial",
      "url": "http://54.218.232.193:8080/incontrol/docs/BTINSEULA.pdf"
    },
    "version": "1.0"
  },
  "externalDocs": {
    "description": "IP Control API Guide",
    "url": "http://54.218.232.193:8080/incontrol/docs/IPControl CLI API Guide.pdf"
  },
  "host": "54.218.232.193:8443",
  "basePath": "/inc-rest/api/v1",
  "schemes": [
    "https",
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/Exports/endExportAddressPool": {
      "post": {
        "tags": [
          "Address Pool"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export address pools",
        "description": "The endExportAddressPool operation is an optional final step in the series of calls to export address pools from IPControl. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportAddressPool",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an exportAddressPool operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of AddressPool completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportResourceRecordRestoreList": {
      "post": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export resource record restore list",
        "description": "The exportResourceRecordRestoreList API enables you to issue a request to retrieve a list of resource records that have been deleted and may be eligible for restoring. Before invoking the exportResourceRecordRestoreList operation, you must use initExportResourceRecordRestoreList to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportResourceRecordRestoreList",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initResourceRecordRestoreList operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceRecordRestoreList returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSRestoreResourceRecord"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getDhcpServerByName": {
      "get": {
        "tags": [
          "DHCP Server"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a DHCP server by identifying its name",
        "description": "Retrieve information about a DHCP server by identifying its name.",
        "operationId": "getDhcpServerByName",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "description": "The name of the DHCP server",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "DhcpServer",
            "schema": {
              "$ref": "#/definitions/WSDhcpServer"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportDomainResourceRec": {
      "post": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export domain resource records",
        "description": "The exportDomainResourceRec operation enables you to export domain resource records for a domain or list of domains from IPControl. Before invoking the exportDomainResourceRec operation, you must use initExportDomainResourceRec to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportDomainResourceRec",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportDomainResourceRec operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "DomainResourceRec returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSDomainResourceRec"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportChildBlockUDFTags": {
      "post": {
        "tags": [
          "Child Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export child block UDF tags",
        "description": "After the initExportChildBlock API is called to initialize the API, the web service client can, optionally, call the initExportChildBlockUDFTags API. This service is used by the ExportChildBlock CLI to create the header line used when exporting with the expanded format option. The result returned from the initExportChildBlockUDFTags service is an array of strings. These are the field names/tags of the user defined fields defined for the blocks that will be returned on subsequent calls to the exportChildBlock service.",
        "operationId": "initExportChildBlockUDFTags",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportChildBlock operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of ChildBlockUDFTags initialized",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importIpAddressRange": {
      "post": {
        "tags": [
          "Device"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import an IP Address Range",
        "description": "The ImportIpAddressRange operation enables you to import a range of IP addresses to IPControl. Specify domainName if resource record creation is requested and no forward domain is defined in the block policies. Specify primaryDHCPServer when adding DHCP addresses and no primary DHCP server is defined in the block policies. ",
        "operationId": "importIpAddressRange",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "wsIpAddressRange": {
                  "$ref": "#/definitions/WSIpAddressRange"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the range of IP Addresses.  Required parameters are: addressType, deviceType, startIpAddress, one of endIpAddress or rangeSize, container (if necessary for resolving overlapping space), userDefinedFields defined as required fields. Based on device type, there may be other requirements. Refer to the IPControl API Guide for more information. For userDefinedFields, specify comma-separated name\u003dvalue pairs, where each pair is enclosed in double quotes.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of IpAddressRange completed",
            "schema": {
              "properties": {
                "result": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportChildBlock": {
      "post": {
        "tags": [
          "Child Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export child blocks",
        "description": "The initExportChildBlock operation enables you to export child blocks from IPControl. You can filter the list of blocks retrieved. In addition, the initExportChildBlock operation requires a boolean flag, includeFreeBlocks, that specifies if the free blocks maintained by IPControl should be included in the export. When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportChildBlock operation. Otherwise, the returned structure can be passed on a subsequent exportChildBlock operation to retrieve results.",
        "operationId": "initExportChildBlock",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                },
                "pageSize": {
                  "type": "integer"
                },
                "includeFreeBlocks": {
                  "type": "boolean"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of ChildBlock initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportZoneResourceRecord": {
      "post": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export zone resource records",
        "description": "The exportZoneResourceRec operation enables you to export zone resource records for a zone or list of zones from IPControl. Before invoking the exportZoneResourceRec operation, you must use initExportZoneResourceRec to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportZoneResourceRec",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportZoneResourceRec operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ZoneResourceRecord returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSZoneResourceRec"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/restoreDeletedResourceRecord": {
      "post": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Restore a deleted resource record",
        "description": "The restoreDeletedResourceRecord operation enables you to restore a deleted resource record. To obtain the required restoreId, use the exportResourceRecordRestoreList operation to export a list of the resource records that were deleted and are available to be restored.",
        "operationId": "restoreDeletedResourceRecord",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpRR": {
                  "$ref": "#/definitions/WSRestoreResourceRecord"
                }
              }
            },
            "name": "Restore Parameters",
            "in": "body",
            "description": "The input describing the resource record. restoreId is required. The default date/time formating for effectiveStart parameter is \"MM/dd/yyyy hh:mm aa\".",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "DeletedResourceRecord returned"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/domainControllerCollection": {
      "post": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Issue Domain Controller Collection Task",
        "description": "Issue an immediate Domain Controller Collection task to collect sites and subnets on the domain controller. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, a negative integer is returned for the response code.",
        "operationId": "domainControllerCollection",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "container": {
                  "type": "string"
                },
                "dcName": {
                  "type": "string"
                },
                "ipAddress": {
                  "type": "string"
                },
                "priority": {
                  "type": "boolean"
                }
              }
            },
            "name": "Task parameters",
            "in": "body",
            "description": "One of name or ip must be specified; dcName: Domain Controller Name.  ipAddress: IP Address of domain controller; container: Parent container in which to create missing sites; priority: True to create a high priority task.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "integer returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/globalNetElementSync": {
      "post": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Issue Global Synchronization Task for Network Elements",
        "description": "Issue an immediate Global Synchronization task for all network elements in IPControl that are flagged for inclusion in the Global Sync process. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.",
        "operationId": "globalNetElementSync",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "priority": {
                  "type": "boolean"
                }
              }
            },
            "name": "Task parameters",
            "in": "body",
            "description": "Set priority to true to create a high priority task.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "integer returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/dnsConfigurationChangedZonesByTag": {
      "post": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Issue DNS Configuration Changed Zones Task",
        "description": "Issue an immediate DNS Configuration task to generate and deploy changed configuration and zone files for DNS servers. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, a negative integer returned in the response.",
        "operationId": "dnsConfigurationChangedZonesByTag",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "creatediff": {
                  "type": "boolean"
                },
                "checkzones": {
                  "type": "boolean"
                },
                "tag": {
                  "type": "string"
                },
                "abortfailedcheck": {
                  "type": "boolean"
                },
                "priority": {
                  "type": "boolean"
                },
                "configureType": {
                  "type": "string"
                }
              }
            },
            "name": "Task parameters",
            "in": "body",
            "description": "tag must be specified. tag: Tag; configureType: Optional, use if a tag matches servers of multiple configuration types.; ip: DNS server IP address; abortfailedcheck: Set to true if the push should halt if check zones fails; checkzones: Set to true if the zone file checker should be run. Set priority to true to create a high priority task.creatediff: Set to true to create a file of differences from the last known good configuration",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "integer returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteAddrPool": {
      "delete": {
        "tags": [
          "Address Pool"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete an address pool",
        "description": "The deleteAddrPool operation enables you to delete an address pool from a block in IPControl.",
        "operationId": "deleteAddrPool",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpAddrPool": {
                  "$ref": "#/definitions/WSAddrpool"
                },
                "deleteDevicesInAddrpool": {
                  "type": "boolean"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The input describing the address pool to be deleted. Specify either the name or the startAddr. Specify container if the startAddr is not unique due to overlapping space. The deleteDevicesInAddrpool parameter is also required. ",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a AddrPool"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteTaskById": {
      "delete": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete tasks by id",
        "description": "The deleteTaskById operation enables you to delete tasks from IPControl by specifying their task ids. The number of tasks deleted is returned in the result.",
        "operationId": "deleteTaskById",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The list of task ids to delete.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a Task",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportResourceRecordPendingApproval": {
      "post": {
        "tags": [
          "Pending Approval"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export resource record pending approvals",
        "description": "The exportResourceRecordPendingApproval operation enables you to export a list of resource records that were submitted for approval by the invoking administrator. These updates include those to create, update or delete a resource record. Before invoking the exportResourceRecordPendingApproval operation, you must use initExportResourceRecordPendingApproval to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportResourceRecordPendingApproval",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportResourceRecordPendingApproval operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceRecordPendingApproval returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSResourceRecPendingApproval"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportNetworkLink": {
      "post": {
        "tags": [
          "Network Link"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export network links",
        "description": "The initExportNetworkLink operation enables you to export network links from IPControl. You can filter the list of records retrieved. There are no options defined for this operation. When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportNetworkLink operation. Otherwise, the returned structure can be passed on a subsequent exportNetworkLink operation to retrieve results.",
        "operationId": "initExportNetworkLink",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "filter": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of NetworkLink initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportRootBlock": {
      "post": {
        "tags": [
          "Root Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export root blocks",
        "description": "The endExportRootBlock operation is an optional final step in the series of calls to export root blocks from IPControl. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportRootBlock",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an exportRootBlock operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of RootBlock completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportResourceRecordRestoreList": {
      "post": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export resource record restore list",
        "description": "The endExportResourceRecordRestoreList operation is an optional final step in the series of calls to export a list of resource records that have been deleted and may be eligible for restoring. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportResourceRecordRestoreList",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an exportResourceRecordRestoreList operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of ResourceRecordRestoreList completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportContainer": {
      "post": {
        "tags": [
          "Container"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export containers",
        "description": "The endExportContainer operation is an optional final step in the series of calls to export containers from IPControl. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportContainer",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an exportContainer operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of Container completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportPrefixPool": {
      "post": {
        "tags": [
          "Prefix Pool"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export prefix pools",
        "description": "The initExportPrefixPool operation enables you to issue a request to retrieve a list of prefix pools. There are no options defined for this operation. When pageSize and firstResultPos are specified, is a list of structures is returned as described for the exportPrefixPool operation. Otherwise, the returned structure can be passed on a subsequent exportPrefixPool operation to retrieve results.",
        "operationId": "initExportPrefixPool",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "filter": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of PrefixPool initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/dnsConfigurationConfigOnly": {
      "post": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Issue DNS Configuration Task",
        "description": "Issue an immediate DNS Configuration task to generate and deploy the configuration file for DNS servers. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.",
        "operationId": "dnsConfigurationAllFiles",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "creatediff": {
                  "type": "boolean"
                },
                "checkconf": {
                  "type": "boolean"
                },
                "ip": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "abortfailedcheck": {
                  "type": "boolean"
                },
                "priority": {
                  "type": "boolean"
                }
              }
            },
            "name": "Task parameters",
            "in": "body",
            "description": "One of name or ip must be specified. name: Net service Name;   ip: Net service IP Address; abortfailedcheck: Set to true if the push should halt if either check configuration or check zones fails; checkconf: Set to true if the config file checker should be run; Set priority to true to create a high priority task; creatediff: Set to true to create a file of differences from the last known good configuration.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "integer returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getDhcpServerByIpAddress": {
      "get": {
        "tags": [
          "DHCP Server"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a DHCP server by identifying its IP address",
        "description": "Retrieve information about a DHCP server by identifying its IP address.",
        "operationId": "getDhcpServerByIpAddress",
        "parameters": [
          {
            "type": "string",
            "name": "ipAddress",
            "in": "query",
            "description": "The IP address of the DHCP server, e.g. 10.0.0.18",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "DhcpServer",
            "schema": {
              "$ref": "#/definitions/WSDhcpServer"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importPrefixPool": {
      "post": {
        "tags": [
          "Prefix Pool"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import a prefix pool",
        "description": "The importPrefixPool operation enables you to import or modify prefix pools. It can also be used to modify an existing prefix pool by specifying its id.",
        "operationId": "importPrefixPool",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "prefixPool": {
                  "$ref": "#/definitions/WSPrefixPool"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the prefix pool to be imported. The following parameters are required: startAddr, length, type, container if startAddr is not unique, delegatedPrefixLength.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of PrefixPool completed",
            "schema": {
              "properties": {
                "result": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportChildBlock": {
      "post": {
        "tags": [
          "Child Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export child blocks",
        "description": "The endExportChildBlock operation is an optional final step in the series of calls to export child blocks from IPControl. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportChildBlock",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an exportChildBlock operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of ChildBlock completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/modifyBlock": {
      "post": {
        "tags": [
          "Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Modify a Block",
        "description": "The modifyBlock operation enables you to update certain fields in an existing Block. There are 2 parameters in the input structure, \u0027container\u0027 and \u0027block\u0027. To modify a block, use this call in conjunction with the getBlock operation. First, retrieve the block the getBlock operation. Then, modify the returned structure. Lastly, pass that modified structure to this operation as the \u0027block\u0027 parameter. If the block id is supplied (as it will be following a getBlock), or the block is not in overlapping space, the \u0027container\u0027 parameter is not required.",
        "operationId": "modifyBlock",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "container": {
                  "type": "string"
                },
                "block": {
                  "$ref": "#/definitions/WSGenericBlock"
                }
              }
            },
            "name": "Modify parameters",
            "in": "body",
            "description": "The input describing the block to be modified. The following block attributes can be modified: addrDetails, allocationTemplateName, blockName, blockStatus, description, discoveryAgent, excludeFromDiscovery, interfaceName, organizationId, primarySubnnet, rir, rootBlockType, swipName, userDefinedFields. All subnet attibutes can be modified. (networkLink can only be modified for blocks in logical containers.)",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Block returned"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteBlock": {
      "delete": {
        "tags": [
          "Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a block",
        "description": "The deleteBlock operation enables you to delete a block from IPControl.",
        "operationId": "deleteBlock",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "container": {
                  "type": "string"
                },
                "blockName": {
                  "type": "string"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "Specify the blockName of the block to be deleted. container is required only when the blockName is not unique due to overlapping space.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a Block"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/dhcpConfigurationAllFilesByTag": {
      "post": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Issue DHCP Configuration Task",
        "description": "Issue an immediate DHCP configuration task for a specified tag. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, a negative integer is returned in the response.",
        "operationId": "dhcpConfigurationAllFilesByTag",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "stopOnError": {
                  "type": "boolean"
                },
                "createDiff": {
                  "type": "boolean"
                },
                "updateFailovers": {
                  "type": "boolean"
                },
                "ignoreDdnsErrors": {
                  "type": "boolean"
                },
                "pushOnlyChanges": {
                  "type": "boolean"
                },
                "tag": {
                  "type": "string"
                },
                "priority": {
                  "type": "boolean"
                }
              }
            },
            "name": "Task parameters",
            "in": "body",
            "description": "A tag must be specified. stopOnError: Specify whether to stop if an error is encountered or ignore the error and continue; pushOnlyChanges: Specify whether to push the files even if there have been no configuration changes; updateFailovers: Specify whether the push should also update failover servers. ignoreDdnsError: If stopOnError is true, specifiy if Dynamic DNS errors and warnings should be ignored. Set priority to true to create a high priority task.creatediff: Set to true to create a file of differences from the last known good configuration",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "integer returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportAdmin": {
      "post": {
        "tags": [
          "Administrator"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export administrators",
        "description": "The initExportAdmin operation enables you to export administrators from IPControl. You can filter the list of administrators retrieved. \nWhen pageSize and firstResultPos are specified, a list of structures is returned as described for the exportAdmin operation. \nOtherwise, the returned structure can be passed on a subsequent exportAdmin operation to retrieve results. \nThere are no options for this operation.",
        "operationId": "initExportAdmin",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "filter": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of Admin initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportResourceRecordPendingApprovalStatus": {
      "post": {
        "tags": [
          "Pending Approval"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export resource record pending approval status",
        "description": "The endExportResourceRecordPendingApprovalStatus operation is an optional final step in the series of calls to export a list of resource records that were submitted for approval by the invoking administrator from IPControl. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportResourceRecordPendingApprovalStatus",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an exportResourceRecordPendingApprovalStatus operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of ResourceRecordPendingApprovalStatus completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/dnsDDNSChangedRRs": {
      "post": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Issue Dynamic DNS Configuration Changed Resource Records Task",
        "description": "Issue an immediate Dynamic DNS Configuration task to generate and deploy changed resource records for DNS servers. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.",
        "operationId": "dnsDDNSChangedRRs",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "ip": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "priority": {
                  "type": "boolean"
                }
              }
            },
            "name": "Task parameters",
            "in": "body",
            "description": "One of name or ip must be specified. name: required DNS server name. ip: DNS server IP address. Set priority to true to create a high priority task.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "integer returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getNetworkLinkByName": {
      "get": {
        "tags": [
          "Network Link"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a network link",
        "description": "Retrieve information about a network link.",
        "operationId": "getNetworkLinkByName",
        "parameters": [
          {
            "type": "string",
            "name": "netLinkName",
            "in": "query",
            "description": "The name of the network link",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "NetworkLink",
            "schema": {
              "$ref": "#/definitions/WSNetworkLink"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportAdminRole": {
      "post": {
        "tags": [
          "Administrator Role"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export administrator roles",
        "description": "The exportAdminRole operation enables you to export administrator roles from IPControl. Before invoking the exportAdminRole operation, you must use initExportAdminRole to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportAdminRole",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportAdminRole operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "AdminRole returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSAdminRole"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportTagAssociation": {
      "post": {
        "tags": [
          "Tag Association"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export tag associations",
        "description": "The endExportTagAssociation operation is an optional final step in the series of calls to export from IPControl. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportTagAssociation",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from the operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of TagAssociation completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteDhcpOptionSet": {
      "delete": {
        "tags": [
          "DHCP Option Set"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a DHCP Option Set",
        "description": "The deleteDhcpOptionSet operation enables you to delete a DHCP Option Set from IPControl. ",
        "operationId": "deleteDhcpOptionSet",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpOptionSet": {
                  "$ref": "#/definitions/WSDhcpOptionSet"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The input describing the DHCP option set to be deleted. name is required. Set IPv6 to true for IPv6 sets.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a DhcpOptionSet"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getContainerByName": {
      "get": {
        "tags": [
          "Container"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a container",
        "description": "Retrieve information about a container.",
        "operationId": "getContainerByName",
        "parameters": [
          {
            "type": "string",
            "name": "containerName",
            "in": "query",
            "description": "The name of the container",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Container",
            "schema": {
              "$ref": "#/definitions/WSContainer"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportDhcpServer": {
      "post": {
        "tags": [
          "DHCP Server"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export DHCP servers",
        "description": "The initExportDhcpServer operation enables you to export DHCP servers from IPControl. You can filter the list of servers retrieved. \nWhen pageSize and firstResultPos are specified, a list of structures is returned as described for the exportDhcpServer operation. \nOtherwise, the returned structure can be passed on a subsequent exportDhcpServer operation to retrieve results. \nThere are no options for this operation.",
        "operationId": "initExportDhcpServer",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "filter": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of DhcpServer initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importChildBlock": {
      "post": {
        "tags": [
          "Child Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import a child block",
        "description": "The ImportChildBlock API enables you to import child blocks into IPControl. This operation is used to define sub-allocations of address space, taken from parent address space. This space is allocated from the parent, and then marked with the status that is specified in the request. The name of the block allocated is returned to the client application in the response. This API can also be used to attach existing blocks to another container by specifying an existing blockAddr. To modify a child block, use the modifyBlock operation. ",
        "operationId": "importChildBlock",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpChildBlock": {
                  "$ref": "#/definitions/WSChildBlock"
                },
                "inpBlockPolicy": {
                  "$ref": "#/definitions/WSSubnetPolicy"
                }
              }
            },
            "name": "Import Parameters, inpBlockPolicy",
            "in": "body",
            "description": "The input describing the child block. The following parameters are required: blockSize, blockStatus, container, interfaceName for devicecontainers only, userDefinedFields defined as required fields. No policy parameters are required. For userDefinedFields, specify comma-separated name\u003dvalue pairs, where each pair is enclosed in double quotes.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of ChildBlock completed",
            "schema": {
              "properties": {
                "result": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getPrefixPoolByStartAddr": {
      "get": {
        "tags": [
          "Prefix Pool"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a prefix pool by identifying its IP address",
        "description": "Retrieve information about a prefix pool by specifying the prefix pool starting IP Address.",
        "operationId": "getPrefixPoolByStartAddr",
        "parameters": [
          {
            "type": "string",
            "name": "addr",
            "in": "query",
            "description": "The starting IP address of the prefix pool",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "PrefixPool",
            "schema": {
              "$ref": "#/definitions/WSPrefixPool"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportDeviceResourceRec": {
      "post": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export device resource records",
        "description": "The endExportDevice operation is an optional final step in the series of calls to export resource records for a device or list of devices from IPControl. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportDeviceResourceRec",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an exportDeviceResourceRec operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of DeviceResourceRec completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getBlockByIpAddress": {
      "get": {
        "tags": [
          "Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a block by identifying its IP address",
        "description": "Retrieve information about a block by specifying the IP address and, optionally, the container name, block size or block status (if required for unique identification).",
        "operationId": "getBlockByIpAddress",
        "parameters": [
          {
            "type": "string",
            "name": "ipAddress",
            "in": "query",
            "description": "The starting IP address of the block, e.g. 10.0.0.0",
            "required": true
          },
          {
            "type": "string",
            "name": "container",
            "in": "query",
            "description": "The container holding the block. Required only if IP address is not unique.",
            "required": false
          },
          {
            "type": "integer",
            "name": "bsize",
            "in": "query",
            "description": "The block\u0027s CIDR size. Required only if there are multiple blocks with the same starting address, e.g., 10.0.0.0/8 (aggregate) and 10.0.0.0/24 (child block).",
            "required": false
          },
          {
            "type": "string",
            "name": "status",
            "in": "query",
            "description": "The block\u0027s status. Valid values are: free, reserved, aggregate, deployed, fullyAssigned. Required only if there are multiple blocks with the same starting address. This can occur for aggregates where there is a free block with the same starting address and size.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Block",
            "schema": {
              "$ref": "#/definitions/WSGenericBlock"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importRootBlock": {
      "post": {
        "tags": [
          "Root Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import a root block",
        "description": "The importRootBlock operation enables you to import a root block to IPControl. ",
        "operationId": "importRootBlock",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpRootBlock": {
                  "$ref": "#/definitions/WSRootBlock"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the root block. The following parameters are required: blockAddr, container, blockSize, userDefinedFields defined as required fields. For userDefinedFields, specify comma-separated name\u003dvalue pairs, where each pair is enclosed in double quotes.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of RootBlock completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getDeviceByHostname": {
      "get": {
        "tags": [
          "Device"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a device by identifying its host name",
        "description": "Retrieve information about a device by specifying the host name.",
        "operationId": "getDeviceByHostname",
        "parameters": [
          {
            "type": "string",
            "name": "hostname",
            "in": "query",
            "description": "The host name of the device",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Device",
            "schema": {
              "$ref": "#/definitions/WSDevice"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getZoneResourceRecord": {
      "get": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a zone resource record",
        "description": "Retrieve information about a DNS zone resource record.",
        "operationId": "getZoneResourceRec",
        "parameters": [
          {
            "type": "string",
            "name": "server",
            "in": "query",
            "description": "The name of the DNS server",
            "required": true
          },
          {
            "type": "string",
            "name": "zone",
            "in": "query",
            "description": "The name of the zone",
            "required": true
          },
          {
            "type": "string",
            "name": "view",
            "in": "query",
            "description": "The DNS view in which the zone resides; defaults to \u0027Default\u0027",
            "required": false
          },
          {
            "type": "string",
            "name": "owner",
            "in": "query",
            "description": "The resource record owner",
            "required": true
          },
          {
            "type": "string",
            "name": "type",
            "in": "query",
            "description": "The resource record type",
            "required": true
          },
          {
            "type": "string",
            "name": "rdata",
            "in": "query",
            "description": "The resource record data text",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ZoneResourceRecord",
            "schema": {
              "$ref": "#/definitions/WSZoneResourceRec"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getContainerParentHierarchy": {
      "get": {
        "tags": [
          "Container"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a parent container hierarchy",
        "description": "Retrieve a String array containing the fully qualified names of all parents of the named container",
        "operationId": "getContainerParentHierarchy",
        "parameters": [
          {
            "type": "string",
            "name": "containerName",
            "in": "query",
            "description": "The name of the container",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ContainerParentHierarchy",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportDeviceResourceRec": {
      "post": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export device resource records",
        "description": "The initExportDeviceResourceRec operation enables you to export device resource records for a device or list of devices from IPControl. You can filter the list of records retrieved. When recurseContainerHierarchy is specified in the options array, the service recursively selects all devices within all child containers specified within the Container Selector filter. This flag is ignored if a Container Selector is not included. When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportDeviceResourceRec operation. Otherwise, the returned structure can be passed on a subsequent exportDeviceResourceRec operation to retrieve results.",
        "operationId": "initExportDeviceResourceRec",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "filter": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0. recurseContainerHierarchy is the only supported option for this operation.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of DeviceResourceRec initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importGalaxyDomain": {
      "post": {
        "tags": [
          "Domain"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import a galaxy domain",
        "description": "The ImportGalaxyDomain API enables you to assign domains to galaxies in IPControl",
        "operationId": "importGalaxyDomain",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpGalaxyDomain": {
                  "$ref": "#/definitions/WSGalaxyDomain"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the domain. The following parameters are required: domainName, galaxyName. ",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of GalaxyDomain completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importDnsZone": {
      "post": {
        "tags": [
          "Zone"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import a DNS zone",
        "description": "The importDnsZone API enables you to import a DNS zone to IPControl. To modify an existing zone, set updateZone to true and specify all fields as you would for an import. Any field not specified on an update is cleared or set to its default value.",
        "operationId": "importDnsZone",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpZone": {
                  "$ref": "#/definitions/WSDnsZone"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the DNS zone. domainName and zoneType are required. When dynamicZone is true, one of allowUpdateACL or updatePolicy must be specified. masters is required for slave and stub zones. Either server or galaxyName must be specified.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of DnsZone completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/detachBlock": {
      "post": {
        "tags": [
          "Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Detach a Block",
        "description": "The detachBlock operation enables you to detach blocks from device containers in IPControl. If an interface address is specified and the block has multiple interface addresses on the specified container, then only the specified interface address will be detached. container must be specified if the block name is not unique, due to overlapping space or naming conventions.",
        "operationId": "detachBlock",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "childBlock": {
                  "$ref": "#/definitions/WSChildBlock"
                }
              }
            },
            "name": "Modify Parameters",
            "in": "body",
            "description": "The input describing the block to be detached. Specify either blockAddr or the combination of blockName and blockSize in order to identify the block.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Block returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importNetworkElement": {
      "post": {
        "tags": [
          "Network Element"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import a network element",
        "description": "The importNetworkElement operation enables you to import a network element to IPControl. The API also supports updating a network element that already exists in the system by specifying its id.",
        "operationId": "importNetworkElement",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpNetworkElement": {
                  "$ref": "#/definitions/WSNetworkElement"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the network element. name is required. ",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of NetworkElement completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteDevice": {
      "delete": {
        "tags": [
          "Device"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a device",
        "description": "The deleteDevice operation enables you to delete a device from IPControl. Note that this is not used to delete devices of type \u0027Interface\u0027. Use the ModifyBlock API to delete Interface-type devices.",
        "operationId": "deleteDevice",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpDev": {
                  "$ref": "#/definitions/WSDevice"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The input describing the device to be deleted. Specify the ipAddress of the device to be deleted. container is required only if the ipAddress is not unique due to overlapping space.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a Device"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getDeviceByMACAddress": {
      "get": {
        "tags": [
          "Device"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a device by identifying its hardware address",
        "description": "Retrieve information about a device by specifying the MAC address.",
        "operationId": "getDeviceByMACAddress",
        "parameters": [
          {
            "type": "string",
            "name": "macAddress",
            "in": "query",
            "description": "The hardware address of the device",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Device",
            "schema": {
              "$ref": "#/definitions/WSDevice"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteNetworkElement": {
      "delete": {
        "tags": [
          "Network Element"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a network element",
        "description": "The deleteNetworkElement operation enables you to delete a network element from IPControl.",
        "operationId": "deleteNetworkElement",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpNE": {
                  "$ref": "#/definitions/WSNetworkElement"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The input describing the network element to be deleted. Specify either name or a unique ipAddress.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a NetworkElement"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportNetworkElement": {
      "post": {
        "tags": [
          "Network Element"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export network elements",
        "description": "The endExportNetworkElement operation is an optional final step in the series of calls to export network elements from IPControl. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportNetworkElement",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an exportNetworkElement operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of NetworkElement completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importAdmin": {
      "post": {
        "tags": [
          "Administrator"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import an administrator",
        "description": "The ImportAdmin operation enables you to import administrators to IPControl. It can also be used to modify an existing administrator by specifying its id. Note that while adminstrators of administrator type \u0027NORMAL\u0027 can import and modify administrators and their roles, only MASTER administrators can import or update administrator policies and assignable roles. NORMAL administrators will receive an error message if policies or assignable roles are specified on import. On an import request to modify an administrator, if a NORMAL administrator specifies policies or assignable roles, that information is ignored. To modify an administrator, specify id.",
        "operationId": "importAdmin",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "wsadmin": {
                  "$ref": "#/definitions/WSAdmin"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the administrator. loginId and password are required",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of Admin completed",
            "schema": {
              "properties": {
                "result": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportAddressPool": {
      "post": {
        "tags": [
          "Address Pool"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export address pools",
        "description": "The exportAddressPool operation enables you to export address pools from IPControl. Before invoking the exportAddressPool operation, you must use initExportAddressPool to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportAddressPool",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportAddressPool operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "AddressPool returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSAddrpool"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportDeviceRestoreList": {
      "post": {
        "tags": [
          "Device"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export device restore list",
        "description": "The initExportDeviceRestoreList API enables the web service client to issue a request to retrieve a list of devices that have been deleted and may be eligible for restoring. This service enables the client to filter the list of devices(deleted) exported. A superuser may filter the results based on the requesting administrator(not available for non-superusers). All users may filter the list based on IP Address, hostname, block name, container, address type, device type, or IP address range. There are no options defined for this operation. When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportDeviceRestoreList operation. Otherwise, the returned structure can be passed on a subsequent exportDeviceRestoreList operation to retrieve results.",
        "operationId": "initExportDeviceRestoreList",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "filter": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of DeviceRestoreList initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getDhcpPolicySetByName": {
      "get": {
        "tags": [
          "DHCP Policy Set"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a DHCP policy set",
        "description": "Retrieve information about a DHCP policy set",
        "operationId": "getDhcpPolicySetByName",
        "parameters": [
          {
            "type": "string",
            "name": "setName",
            "in": "query",
            "description": "The name of the DHCP policy set",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "DhcpPolicySet",
            "schema": {
              "$ref": "#/definitions/WSDhcpPolicySet"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportAllNetServicesAsCSV": {
      "post": {
        "tags": [
          "Network Service"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export All Network Services",
        "description": "The exportAllNetServicesAsCSV operation enables you to export network services from IPControl. To filter the request, use exportNetServicesAsCSV.",
        "operationId": "exportAllNetServicesAsCSV",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {}
            },
            "name": "Exports Parameters",
            "in": "body",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "AllNetServicesAsCSV returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importDhcpPolicySet": {
      "post": {
        "tags": [
          "DHCP Policy Set"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import a DHCP Policy Set",
        "description": "The ImportDhcpPolicySet operation enables you to import DHCP policy set definitions into IPControl. Specify the new set name and (optionally) the DHCP policies. For each policy, specify the name and the policyValue",
        "operationId": "importDhcpPolicySet",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "wsDhcpPolicySet": {
                  "$ref": "#/definitions/WSDhcpPolicySet"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the DHCP policy set.  Required parameters are: name, policy name and policyValue for each policy. ",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of DhcpPolicySet completed",
            "schema": {
              "properties": {
                "result": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/IncUseNextReservedIPAddress/useNextReservedIPAddress": {
      "post": {
        "tags": [
          "Device"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update next reserved IP Address to static",
        "description": "The UseNextReservedIPAddress API enables the web service client to update the next reserved IP Address in the specified block, for the specified device type, to static. The block must have a status of \u0027In Use/Deployed\u0027. Within this block, there should be a range of addresses with a type of \u0027Reserved\u0027 for the given device type. The next lowest IP address within the range will be assigned a type of \u0027Static\u0027. If a hostname is specified, it will be applied to the device associated with the IP Address. In addition, there is an option to add resource records for the device.",
        "operationId": "useNextReservedIpAddress",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpDevice": {
                  "$ref": "#/definitions/WSDevice"
                }
              }
            },
            "name": "Modify Parameters",
            "in": "body",
            "description": "The input describing the IP Address. The following parameters are required: ipAddress, devicetype. Note the ipAddress must be specified in the main structure, not within the interfaces structure. You can also specify a hostname. Specify resourceRecordFlag if you want resource records to be created for the device. All other parameters are ignored. ",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "IPAddress returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/getTask": {
      "get": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get task information",
        "description": "Retrieve task information. The information is returned as a string array with the following information: 0-task id, 1-service, 2-scope, 3-status, 4-process start time.",
        "operationId": "getTask",
        "parameters": [
          {
            "type": "integer",
            "name": "taskId",
            "in": "query",
            "description": "Use taskId to specify the task number to query.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Task",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportDeviceRestoreList": {
      "post": {
        "tags": [
          "Device"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export device restore list",
        "description": "The exportDeviceRestoreList API enables you to issue a request to retrieve a list of devices that have been deleted and may be eligible for restoring. Before invoking the exportDeviceRestoreList operation, you must use initExportDeviceRestoreList to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportDeviceRestoreList",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportDeviceRestoreList operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "DeviceRestoreList returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSRestoreDevice"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importAdminRole": {
      "post": {
        "tags": [
          "Administrator Role"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import an administrator role",
        "description": "The ImportAdminRole operation enables you to import administrator roles to IPControl. It can also be used to modify an existing administrator role by specifying its id. Note that only administrators of administrator type \u0027MASTER\u0027 can invoke this API.",
        "operationId": "importAdminRole",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "wsadminRole": {
                  "$ref": "#/definitions/WSAdminRole"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the administrator role. roleName is required. To modify an administrator role, specify id.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of AdminRole completed",
            "schema": {
              "properties": {
                "result": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportNetworkElement": {
      "post": {
        "tags": [
          "Network Element"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export network elements",
        "description": "The initExportNetworkElement operation enables you to export network elements from IPControl. You can filter the list of network elements retrieved. There are no options defined for this operation. When pageSize and firstResultPos are specified, is returned a list of structures is returned as described for the exportNetworkElement operation. Otherwise, the returned structure can be passed on a subsequent exportNetworkElement operation to retrieve results.",
        "operationId": "initExportNetworkElement",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "filter": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of NetworkElement initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/splitBlock": {
      "post": {
        "tags": [
          "Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Split a Block",
        "description": "The splitBlock operation enables you to split an existing block into smaller blocks. If equalSizes is true, the block is split such that all resulting blocks have the targetSize CIDR size. If false, the block is split such that the fewest number of new blocks is created, along with two blocks of targetSize.",
        "operationId": "splitBlock",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "container": {
                  "type": "string"
                },
                "targetStartAddress": {
                  "type": "string"
                },
                "targetSize": {
                  "type": "integer"
                },
                "blockName": {
                  "type": "string"
                },
                "equalSizes": {
                  "type": "boolean"
                }
              }
            },
            "name": "Modify Parameters",
            "in": "body",
            "description": "The input describing the block to be modified. The targetStartAddress will default to the start address of the block being split, if not specified. All other parameters are required to specify the block to be split. ",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "void returned"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getPrefixPoolByName": {
      "get": {
        "tags": [
          "Prefix Pool"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a prefix pool by identifying its name",
        "description": "Retrieve information about a prefix pool by specifying its name.",
        "operationId": "getPrefixPoolByName",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "description": "The name of the prefix pool",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "PrefixPool",
            "schema": {
              "$ref": "#/definitions/WSPrefixPool"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportContainer": {
      "post": {
        "tags": [
          "Container"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export containers",
        "description": "The exportContainer operation enables you to export containers from IPControl. Before invoking the exportContainer operation, you must use initExportContainer to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportContainer",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportContainer operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Container returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSContainer"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportDhcpServer": {
      "post": {
        "tags": [
          "DHCP Server"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export DHCP servers",
        "description": "The exportDhcpServer operation enables you to export DHCP servers from IPControl. Before invoking the exportDhcpServer operation, you must use initExportDhcpServer to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportDhcpServer",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportDhcpServer operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "DhcpServer returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSDhcpServer"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/dnsDDNSAllRRs": {
      "post": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Issue Dynamic DNS Resource Records Push Task",
        "description": "Issue an immediate Dynamic DNS configuration task to generate and deploy resource records for DNS servers. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.",
        "operationId": "dnsDDNSAllRRs",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "view": {
                  "type": "string"
                },
                "zone": {
                  "type": "string"
                },
                "ip": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "userCreatedOption": {
                  "type": "boolean"
                },
                "priority": {
                  "type": "boolean"
                }
              }
            },
            "name": "Task parameters",
            "in": "body",
            "description": "One of name or ip must be specified. name: DNS server name. ip: DNS server IP address. view: Zone view name (defaults to \u0027Default\u0027); zone: Name of zone to push, or null for all; userCreatedOption: When set to true, sends only resource records created in IPControl. Use this option to periodically refresh the records in Microsoft AD DNS to prevent their scavenging, while not interfering with the intended scavenging of dynamic records. Set priority to true to create a high priority task.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "integer returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportAddressPool": {
      "post": {
        "tags": [
          "Address Pool"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export address pools",
        "description": "The initExportAddressPool operation enables you to issue a request to retrieve a list of address pools. There are no options defined for this operation. When pageSize and firstResultPos are specified, is a list of structures is returned as described for the exportAddressPool operation. Otherwise, the returned structure can be passed on a subsequent exportAddressPool operation to retrieve results.",
        "operationId": "initExportAddressPool",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "filter": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of AddressPool initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importTagAssociation": {
      "post": {
        "tags": [
          "Tag Association"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import tag association",
        "description": "The importTagAssociation operation enables you to import tag associations to IPControl. It can also be used to modify an existing one. A Tag Association is identified by the tag name, the type of association, and the server the tag is associated with. The type of association identifies what type of server the tag is associated with. This can be specified as a DhcpServer, DnsServer, or Appliance. The server is identified by either a name or ipAddresses. The ipAddresses are specified as an array of one or two IP Addresses to identify the server. If two IP Addresses are specified, the server must be configured with both or it will not be found. The description field will only be used if the tag does not currently exist in the IPControl database or the id is specified.",
        "operationId": "importTagAssociation",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "wsTagAssociation": {
                  "$ref": "#/definitions/WSTagAssociation"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the TagAssociation to be imported. The following parameters are required:  tag.name, type (DhcpServer, DnsServer, or Appliance), and either name or ipAddresses of the server.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of TagAssociation completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteAggregateBlock": {
      "delete": {
        "tags": [
          "Aggregate Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete an aggregate block",
        "description": "The deleteAggregateBlock operation enables you to delete an intermediate level aggregate block from the block hierarchy. By specifying the block to be deleted, the operation will validate and delete the block. It will also adjust the parent block assignments of any child blocks.",
        "operationId": "deleteAggregateBlock",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpBlock": {
                  "$ref": "#/definitions/WSBlock4Delete"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The input describing the block to be deleted. The following parameters are required: blockAddr, blockSize, container.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a AggregateBlock"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportDevice": {
      "post": {
        "tags": [
          "Device"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export devices",
        "description": "The initExportDevice operation enables you to export devices from IPControl. You can filter the list of devices retrieved. When recurseContainerHierarchy is specified in the options array, the service recursively exports all devices within all child containers specified within the Container Selector filter. This flag is ignored if a Container Selector is not included. When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportDevice operation. Otherwise, the returned structure can be passed on a subsequent exportDevice operation to retrieve results.",
        "operationId": "initExportDevice",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "filter": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0. recurseContainerHierarchy is the only supported option for this operation.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of Device initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/addSite": {
      "post": {
        "tags": [
          "Container"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add Site",
        "description": "The addSite operation enables you to add a site to a container using an existing Site Template. ",
        "operationId": "addSite",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "site": {
                  "$ref": "#/definitions/WSSite"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the container and site template to be used to add a site. The following parameters are required: container, siteTemplateName, interfaceName (device container only), userDefinedFields defined as required fields, offsetFromBeginningOfSubnet, startingOffset. For userDefinedFields, specify comma-separated name\u003dvalue pairs, where each pair is enclosed in double quotes.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Site returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/mergeDevice": {
      "post": {
        "tags": [
          "Device"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Merge Device",
        "description": "The MergeDevice operation enables you to merge the IP addresses and interfaces of an existing (source) device to a target device. For example, there are 2 IP addresses in the system that were either discovered separately, or entered separately, but the 2 addresses are actually the same device. For example, a laptop can have a v4 and a v6 address that were discovered separately. This API enables you to combine these interfaces into a single device.",
        "operationId": "mergeDevice",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "wsdeviceMerge": {
                  "$ref": "#/definitions/WSDeviceMerge"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the devices to be merged. For each device, specify one of: the hostname, the hardware address, or the IP address (with container to resolve ambiguity).",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "string returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportNetServicesAsCSV": {
      "post": {
        "tags": [
          "Network Service"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export Network Services",
        "description": "The exportNetServicesAsCSV operation enables you to export network services from IPControl. You can filter the list of network services retrieved. This is a legacy web service. It is designed to accept a list of parameters that define the filter. It returns a string response that contains the list of objects. Each object\u0027s fields are comma-delimited, and each object in the list is separated by a newline character. See the model example value, below, for the available filters. Refer to the IPControl CLI and API Guide for more information.",
        "operationId": "exportNetServicesAsCSV",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "globalsync": {
                  "type": "string"
                },
                "serviceType": {
                  "type": "string"
                },
                "product": {
                  "type": "string"
                },
                "containerName": {
                  "type": "string"
                },
                "agentName": {
                  "type": "string"
                },
                "serviceName": {
                  "type": "string"
                },
                "ipaddr": {
                  "type": "string"
                }
              }
            },
            "name": "Export Parameters",
            "in": "body",
            "description": "Query filters ",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "NetServicesAsCSV returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/domainControllerConfiguration": {
      "post": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Issue Domain Controller Configuration Task",
        "description": "Issue an immediate Domain Controller Configuration task to deploy sites and subnets to the domain controller. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, a negative integer is returned for the response code.",
        "operationId": "domainControllerConfiguration",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "preview": {
                  "type": "boolean"
                },
                "dcName": {
                  "type": "string"
                },
                "ipAddress": {
                  "type": "string"
                },
                "priority": {
                  "type": "boolean"
                }
              }
            },
            "name": "Task parameters",
            "in": "body",
            "description": "One of name or ip must be specified; dcName: Domain Controller Name.  ipAddress: IP Address of domain controller; preview: True to create a push preview; priority: True to create a high priority task.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "integer returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportDomainResourceRec": {
      "post": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export domain resource records",
        "description": "The endExportDomainResourceRec operation is an optional final step in the series of calls to export domain resource records for a domain or list of domains from IPControl. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportDomainResourceRec",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an exportDomainResourceRec operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of DomainResourceRec completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportDeviceUDFTags": {
      "post": {
        "tags": [
          "Device"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export device UDF tags",
        "description": "After the initExportDevice API is called to initialize the API, the web service client can, optionally, call the initExportDeviceUDFTags API. This service is used by the ExportDevice CLI to create the header line used when exporting with the expanded format option. The result returned from the initExportDeviceUDFTags service is an array of strings. These are the field names/tags of the user defined fields defined for the devices that will be returned on subsequent calls to the exportDevice service.",
        "operationId": "initExportDeviceUDFTags",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportDevice operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of DeviceUDFTags initialized",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportDhcpServer": {
      "post": {
        "tags": [
          "DHCP Server"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export DHCP servers",
        "description": "The endExportDhcpServer operation is an optional final step in the series of calls to export from IPControl. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportDhcpServer",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "Exports Parameters",
            "in": "body",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of DhcpServer completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportTagAssociation": {
      "post": {
        "tags": [
          "Tag Association"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export tag associations",
        "description": "The initExportTagAssociation operation enables you to export tag associaitons from IPControl. You can filter the list retrieved. There are no options defined for this operation. When pageSize and firstResultPos are specified, a list of structures is returned as described for the operation. Otherwise, the returned structure can be passed on a subsequent operation to retrieve the results.",
        "operationId": "initExportTagAssociation",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "filter": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0.  Available filters are tagName, type, name, and ipAddress.  tagName is the name of the tag to export. type is the type of tag to export. Valid values are Appliance, DnsServer, or DhcpServer. This must be specified when using either the name or ipAddress selector. name is the name of the server. ipAddress is the IP Address of the server.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of TagAssociation initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportDhcpPolicySet": {
      "post": {
        "tags": [
          "DHCP Policy Set"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export DHCP policy sets",
        "description": "The initExportDhcpPolicySet operation enables you to export DHCP policy sets from IPControl. You can filter the list of policy sets retrieved. \nWhen pageSize and firstResultPos are specified, a list of structures is returned as described for the exportDhcpPolicySet operation. \nOtherwise, the returned structure can be passed on a subsequent exportDhcpPolicySet operation to retrieve results. \nThere are no options for this operation.",
        "operationId": "initExportDhcpPolicySet",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "filter": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of DhcpPolicySet initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportDevice": {
      "post": {
        "tags": [
          "Device"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export devices",
        "description": "The endExportDevice operation is an optional final step in the series of calls to export devices from IPControl. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportDevice",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an exportDevice operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of Device completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importDhcpServer": {
      "post": {
        "tags": [
          "DHCP Server"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import a DHCP Server",
        "description": "The importDhcpServer operation enables you to import a DHCP Server. It can also be used to modify an existing server by specifying its id.",
        "operationId": "importDhcpServer",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "dhcpServer": {
                  "$ref": "#/definitions/WSDhcpServer"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the DHCP Server. The following parameters are required: agent, ipAddress, name, product, v4V6Both.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of DhcpServer completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteTagAssociation": {
      "delete": {
        "tags": [
          "Tag Association"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a tag association",
        "description": "The deleteTagAssociation operation enables you to delete a tag association from IPControl.",
        "operationId": "deleteTagAssociation",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "wsTagAssociation": {
                  "$ref": "#/definitions/WSTagAssociation"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The input describing the TagAssociation to be deleted.  The following parameters are required:  tag.name, type (DhcpServer, DnsServer, or Appliance), and either name or ipAddresses of the server.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a TagAssociation"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getAdminRole": {
      "get": {
        "tags": [
          "Administrator Role"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get an administrator role",
        "description": "Retrieve information about an administrator role.",
        "operationId": "getAdminRole",
        "parameters": [
          {
            "type": "string",
            "name": "adminRoleName",
            "in": "query",
            "description": "The name of the administrator role",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "AdminRole",
            "schema": {
              "$ref": "#/definitions/WSAdminRole"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importZoneResourceRecord": {
      "post": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import a zone resource record",
        "description": "The importZoneResourceRecord operation enables you to import a DNS resource record for a zone to IPControl. Note: this interface should not be confused with the ImportDomainResourceRecord API, which is used to add records to a domain. ImportZoneResourceRecord is only effective when the \u0027Automatic Generation of NS/Glue Records\u0027 is set to OFF on the target zone.",
        "operationId": "importZoneResourceRecord",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpRR": {
                  "$ref": "#/definitions/WSZoneResourceRec"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the resource record. The following parameters are required: server, zone, owner, resourceRecType, data.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of ZoneResourceRecord completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deletePrefixPool": {
      "delete": {
        "tags": [
          "Prefix Pool"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a prefix pool",
        "description": "The deletePrefixPool operation enables you to delete a prefix pool from IPControl. This will also delete the delegated prefixes inside the prefix pool.",
        "operationId": "deletePrefixPool",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpPrefixPool": {
                  "$ref": "#/definitions/WSPrefixPool"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "Specify the name and startAddr of the prefix pool to delete.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a PrefixPool"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/dnsDDNSChangedRRsByTag": {
      "post": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Issue Dynamic DNS Configuration Changed Resource Records Task",
        "description": "Issue an immediate Dynamic DNS Configuration task to generate and deploy changed resource records for DNS servers. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, a negative integer is returned in the response.",
        "operationId": "dnsDDNSChangedRRsByTag",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "tag": {
                  "type": "string"
                },
                "priority": {
                  "type": "boolean"
                },
                "configureType": {
                  "type": "string"
                }
              }
            },
            "name": "Task parameters",
            "in": "body",
            "description": "tag must be specified. tag: Tag. configureType: Optional, use if a tag matches servers of multiple configuration types. Set priority to true to create a high priority task.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "integer returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportResourceRecordRestoreList": {
      "post": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export resource record restore list",
        "description": "The initExportResourceRecordRestoreList API enables the web service client to issue a request to retrieve a list of resource records that have been deleted and may be eligible for restoring. This service enables the client to filter the list of resource records exported. A superuser may filter the results based on the requesting administrator(not available for non-superusers). Resource records deleted from a device may be filtered based on hostname or IP Address of the device. Resource records deleted from a zone may be filtered based on the zone, server or view. There are no options defined for this operation. When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportResourceRecordRestoreList operation. Otherwise, the returned structure can be passed on a subsequent exportResourceRecordRestoreList operation to retrieve results.",
        "operationId": "initExportResourceRecordRestoreList",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "filter": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of ResourceRecordRestoreList initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importAggregateBlock": {
      "post": {
        "tags": [
          "Aggregate Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import an aggregate block",
        "description": "The importAggregateBlock operation enables you to insert an intermediate level aggregate block between existing blocks in the block hierarchy. By specifying a parent block, target block, and a container, the service will handle validating and inserting the desired aggregate block. The service will also adjust the parent block assignments of any would-be child blocks.",
        "operationId": "importAggregateBlock",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "aggregateBlock": {
                  "$ref": "#/definitions/WSAggregateBlock"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the aggregate block. The following parameters are required: container, blockAddr, blockSize, interfaceName for devicecontainers only, userDefinedFields defined as required fields, parentBlockContainer, parentBlockAddr, parentBlockSize. For userDefinedFields, specify comma-separated name\u003dvalue pairs, where each pair is enclosed in double quotes.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of AggregateBlock completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportPrefixPool": {
      "post": {
        "tags": [
          "Prefix Pool"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export prefix pools",
        "description": "The exportPrefixPool operation enables you to export prefix pools from IPControl. Before invoking the exportPrefixPool operation, you must use initExportPrefixPool to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportDevice",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportPrefixPool operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "PrefixPool returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSPrefixPool"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportResourceRecordPendingApproval": {
      "post": {
        "tags": [
          "Pending Approval"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export resource record pending approvals",
        "description": "The endExportResourceRecordPendingApproval operation is an optional final step in the series of calls to export a list of resource records that were submitted for approval by the invoking administrator from IPControl. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportResourceRecordPendingApproval",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an exportResourceRecordPendingApproval operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of ResourceRecordPendingApproval completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/discoverSubnetHosts": {
      "post": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Discover Subnet Hosts",
        "description": "Issue an immediate task to discover the hosts that are connected to a single subnet, or all hosts for all subnets in a container. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. ",
        "operationId": "discoverSubnetHosts",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "container": {
                  "type": "string"
                },
                "ignoreDuplicates": {
                  "type": "boolean"
                },
                "lookupHostname": {
                  "type": "boolean"
                },
                "performNetHostAdd": {
                  "type": "boolean"
                },
                "subnetAddress": {
                  "type": "string"
                },
                "performNetRRAdd": {
                  "type": "boolean"
                },
                "priority": {
                  "type": "boolean"
                },
                "pingHosts": {
                  "type": "string"
                }
              }
            },
            "name": "Task parameters",
            "in": "body",
            "description": "subnetAddress (required if container not specified): block name or CIDR address of subnet; container (required if subnetAddress not specified): container name for discovery, or, if subnetAddress is specified, used to resolve ambiguity; pingHosts: Set to \u0027pingOnly\u0027 or \u0027pingWithTCP\u0027 to ping hosts during discovery; lookupHostname: Set to true to perform a DNS lookup during host discovery; performNetHostAdd: Set to true to automatically add new hosts that are found during discovery; performNetRRAdd: With performNetHostAdd, set to true to automatically add DNS resource records for new hosts that are found during discovery. ignoreDuplicates: With performNetHostAdd, set to true to ignore duplicate hostnames encountered while adding new hosts; priority: Set priority to true to create a high priority task.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "integer returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteDeviceResourceRecord": {
      "delete": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a device resource record",
        "description": "The deleteDeviceResourceRecord operation enables you to delete a resource record from IPControl that is affiliated with a device.",
        "operationId": "deleteDeviceResourceRecord",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpRR": {
                  "$ref": "#/definitions/WSDeviceResourceRec"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The input describing the resource record to be deleted. The following parameters are required: data, domain, either hostname or ipAddress, owner, resourceRecType. container is required to resolve an ipAddress in overlapping space.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a DeviceResourceRecord"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/detachContainer": {
      "delete": {
        "tags": [
          "Container"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Detach a container",
        "description": "The detachContainer operation enables you to detach a device container from one of its parents. The device container must have more than one parent. If the device container has one parent, the deleteContainer operation must be used to delete it from the container hierarchy instead.",
        "operationId": "detachContainer",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "container": {
                  "type": "string"
                },
                "v6DhcpServer": {
                  "type": "string"
                },
                "v4DhcpServer": {
                  "type": "string"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "container: The full path name of the device container to be detached. The full path is required here as that determines which parent to detach the container from. The container must have more than one parent. v4DhcpServer: The V4 DHCP server to use for any pools or subnets whose DHCP server has been invalidated by the change in parent hierarchy. If this is not specified, no changes will be made to the assigned DHCP servers. v6DhcpServer: The V6 DHCP server to use for any pools or subnets whose DHCP server has been invalidated by the change in parent hierarchy. If this is not specified, no changes will be made to the assigned DHCP servers.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a Container"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportNetworkLink": {
      "post": {
        "tags": [
          "Network Link"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export network links",
        "description": "The exportNetworkLink operation enables you to export network links from IPControl. Before invoking the exportNetworkLink operation, you must use initExportNetworkLink to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportNetworkLink",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportNetworkLink operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "NetworkLink returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSNetworkLink"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportDeviceResourceRec": {
      "post": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export device resource records",
        "description": "The exportDeviceResourceRec operation enables you to export resource records for a device or list of devices from IPControl. Before invoking the exportDeviceResourceRec operation, you must use initExportDeviceResourceRec to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportDeviceResourceRec",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportDeviceResourceRec operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "DeviceResourceRec returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSDeviceResourceRec"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/globalRollup": {
      "post": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Issue Global Rollup Task",
        "description": "Issue an immediate global rollup task to collect statistics and perform regression analysis. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.",
        "operationId": "globalRollup",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "periodLength": {
                  "type": "integer"
                },
                "priority": {
                  "type": "boolean"
                },
                "_periodType": {
                  "type": "string"
                }
              }
            },
            "name": "Task parameters",
            "in": "body",
            "description": "Use periodLength to specify the number of time periods to be included in the regression. Use _periodType to specify the type of time period: D (days), W (weeks), M (months), Y (years). Both parameters are required. Set priority to true to create a high priority task.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "integer returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/dhcpUtilization": {
      "post": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Issue DHCP Collection Task",
        "description": "Issue an immediate DHCP Collection task to collect statistics on the utilization of a DHCP server. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.",
        "operationId": "dhcpUtilization",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "ipAddress": {
                  "type": "string"
                },
                "priority": {
                  "type": "boolean"
                },
                "elementName": {
                  "type": "string"
                }
              }
            },
            "name": "Task parameters",
            "in": "body",
            "description": "One of elementName or ipAddress must be specified to identify the DHCP server for which IPControl will collect statistics. elementName: name of the server; ipAddress: IP address or FQDN of the server. Set priority to true to create a high priority task.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "integer returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteContainer": {
      "delete": {
        "tags": [
          "Container"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a container",
        "description": "The deleteContainer operation enables you to delete a container from IPControl.",
        "operationId": "deleteContainer",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "fullName": {
                  "type": "string"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The name of the container to be deleted. The name can be either qualified or unqualified, but must be unique. A qualified name must start with the root container and include the complete container path to the desired container. The container names should be separated by slashes. For example, \u0027InControl/North America/US/PA\u0027",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a Container"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/dnsConfigurationSelectedZones": {
      "post": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Issue DNS Selected Zone File Push Task",
        "description": "Issue an immediate DNS selected zone file push task for a specific DNS Server.   A zone can be specified to limit the push to one zone.If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.",
        "operationId": "dnsConfigurationChangedZones",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "view": {
                  "type": "string"
                },
                "zone": {
                  "type": "string"
                },
                "ip": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "checkzones": {
                  "type": "boolean"
                },
                "abortfailedcheck": {
                  "type": "boolean"
                },
                "priority": {
                  "type": "boolean"
                }
              }
            },
            "name": "Task parameters",
            "in": "body",
            "description": "One of name or ip must be specified. name: DNS server name; ip: DNS server IP address; abortfailedcheck: Set to true if the push should halt if check zones fails; view: Zone view name (defaults to \u0027Default\u0027); zone: Name of zone to push, or null for all; checkzones: Set to true if the zone file checker should be run. Set priority to true to create a high priority task.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "integer returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportDhcpPolicySet": {
      "post": {
        "tags": [
          "DHCP Policy Set"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export DHCP policy sets",
        "description": "The endExportDhcpPolicySet operation is an optional final step in the series of calls to export DHCP policy sets from IPControl. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportDhcpPolicySet",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an exportDhcpPolicySet operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of DhcpPolicySet completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportChildBlock": {
      "post": {
        "tags": [
          "Child Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export child blocks",
        "description": "The exportChildBlock operation enables you to export child blocks from IPControl. Before invoking the exportChildBlock operation, you must use initExportChildBlock to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportChildBlock",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportChildBlock operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ChildBlock returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSChildSubnetBlock"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importAddressPool": {
      "post": {
        "tags": [
          "Address Pool"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import an address pool",
        "description": "The importAddressPool operation enables you to import an address pool. It can also be used to modify an existing address pool by specifying the id.",
        "operationId": "importAddressPool",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "addrpool": {
                  "$ref": "#/definitions/WSAddrpool"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the address pool. The following parameters are required: startAddr, endAddr (IPv4 only), prefixLength (IPv6 only). Note: primaryNetService is required when a DHCP server is not defined for the subnet, and this address pool is one of the DHCP address types: \u0027Dynamic DHCP\u0027, \u0027Automatic DHCP\u0027, \u0027Dynamic NA DHCPv6\u0027, \u0027Automatic NA DHCPv6\u0027, \u0027Dynamic TA DHCPv6\u0027, \u0027Automatic TA DHCPv6\u0027. ",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of AddressPool completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportZoneResourceRecord": {
      "post": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export zone resource records",
        "description": "The initExportZoneResourceRec operation enables you to export zone resource records for a zone or list of zones from IPControl. You can filter the list of records retrieved. When pageSize and firstResultPos are specified,  a list of structures is returned as described for the exportZoneResourceRec operation. Otherwise, the returned structure can be passed on a subsequent exportZoneResourceRec operation to retrieve results.",
        "operationId": "initExportZoneResourceRec",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "filter": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0. There are no options defined for this operation.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of ZoneResourceRecord initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getTagAssociationByName": {
      "get": {
        "tags": [
          "Tag Association"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a tag association by name.",
        "description": "Retrieve information about a tag association.",
        "operationId": "getTagAssociationByName",
        "parameters": [
          {
            "type": "string",
            "name": "tagName",
            "in": "query",
            "description": "The name of the tag",
            "required": true
          },
          {
            "type": "string",
            "name": "type",
            "in": "query",
            "description": "The type of the association",
            "required": true
          },
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "description": "Name to identity the association",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "TagAssociation",
            "schema": {
              "$ref": "#/definitions/WSTagAssociation"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteZone": {
      "delete": {
        "tags": [
          "Zone"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a zone",
        "description": "The deleteZone operation enables you to delete a zone from IPControl.",
        "operationId": "deleteZone",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpZone": {
                  "$ref": "#/definitions/WSDnsZone"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The input describing the zone to be deleted. The following parameters are required: domainName, domainType (when not \u0027Default\u0027), server, view (when not \u0027Default\u0027).",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a Zone"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportContainer": {
      "post": {
        "tags": [
          "Container"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export containers",
        "description": "The initExportContainer operation enables you to export containers from IPControl. You can filter the list of containers retrieved. When ParentContainerFullPath is specified in the options array, the service populates the parent container field using the long format, for example: IPControl/Texas/Dallas. When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportContainer operation. Otherwise, the returned structure can be passed on a subsequent exportContainer operation to retrieve results.",
        "operationId": "initExportContainer",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of Container initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteDomain": {
      "delete": {
        "tags": [
          "Domain"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a domain",
        "description": "The deleteDomain operation enables you to delete a domain from IPControl.",
        "operationId": "deleteDomain",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpDomain": {
                  "$ref": "#/definitions/WSDomain"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The input describing the domain to be deleted. The following parameters are required: domainName, domainType (if not \u0027Default\u0027).",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a Domain"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/modifyPendingApproval": {
      "post": {
        "tags": [
          "Pending Approval"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Modify pending approval",
        "description": "The modifyPendingApproval operation enables you to approve or reject changes submitted to the administrator\u0027s pending approval queue.",
        "operationId": "modifyPendingApproval",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "approval": {
                  "$ref": "#/definitions/WSPendingApproval"
                }
              }
            },
            "name": "Modify Parameters",
            "in": "body",
            "description": "The input describing the approval record to be updated. The following parameters are required: workflowId, action.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "PendingApproval returned"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/dnsDDNSAllRRsByTag": {
      "post": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Issue Dynamic DNS Resource Records Push Task",
        "description": "Issue an immediate Dynamic DNS configuration task to generate and deploy resource records for DNS servers. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, a negative integer is returned in the response.",
        "operationId": "dnsDDNSAllRRsByTag",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "userCreatedOption": {
                  "type": "boolean"
                },
                "tag": {
                  "type": "string"
                },
                "priority": {
                  "type": "boolean"
                },
                "configureType": {
                  "type": "string"
                }
              }
            },
            "name": "Task parameters",
            "in": "body",
            "description": "tag must be specified. tag: Tag. configureType: Optional, use if a tag matches servers of multiple configuration types.; view: Zone view name (defaults to \u0027Default\u0027); zone: Name of zone to push, or null for all; userCreatedOption: When set to true, sends only resource records created in IPControl. Use this option to periodically refresh the records in Microsoft AD DNS to prevent their scavenging, while not interfering with the intended scavenging of dynamic records. Set priority to true to create a high priority task.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "integer returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getDhcpOptionSetByName": {
      "get": {
        "tags": [
          "DHCP Option Set"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a DHCP option set",
        "description": "Retrieve information about a DHCP option set",
        "operationId": "getDhcpOptionSetByName",
        "parameters": [
          {
            "type": "string",
            "name": "setName",
            "in": "query",
            "description": "The name of the DHCP option set",
            "required": true
          },
          {
            "type": "boolean",
            "name": "ipv6",
            "in": "query",
            "description": "Set to true for IPv6",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "DhcpOptionSet",
            "schema": {
              "$ref": "#/definitions/WSDhcpOptionSet"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportDhcpOptionSet": {
      "post": {
        "tags": [
          "DHCP Option Set"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export DHCP option sets",
        "description": "The initExportDhcpOptionSet operation enables you to export DHCP option sets from IPControl. You can filter the list of option sets retrieved. \nWhen pageSize and firstResultPos are specified, a list of structures is returned as described for the exportDhcpOptionSet operation. \nOtherwise, the returned structure can be passed on a subsequent exportDhcpOptionSet operation to retrieve results. \nThere are no options for this operation.",
        "operationId": "initExportDhcpOptionSet",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "filter": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of DhcpOptionSet initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportAdmin": {
      "post": {
        "tags": [
          "Administrator"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export administrators",
        "description": "The endExportAdmin operation is an optional final step in the series of calls to export administrators from IPControl. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportAdmin",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an exportAdmin operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of Admin completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteTaskByDays": {
      "delete": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete tasks by days",
        "description": "The deleteTaskByDays operation enables you to delete tasks from IPControl that are older than a given number of days.  The number of tasks deleted is returned in the result.",
        "operationId": "deleteTaskByDays",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "days": {
                  "type": "integer"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The number of days as a positive integer.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a Task",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportResourceRecordPendingApprovalStatus": {
      "post": {
        "tags": [
          "Pending Approval"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export resource record pending approval status",
        "description": "The exportResourceRecordPendingApprovalStatus operation enables you to export a list of resource records that were submitted for approval by the invoking administrator. These updates include those to create, update or delete a resource record. Before invoking the exportResourceRecordPendingApprovalStatus operation, you must use initExportResourceRecordPendingApprovalStatus to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportResourceRecordPendingApprovalStatus",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportResourceRecordPendingApprovalStatus operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceRecordPendingApprovalStatus returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSResourceRecPendingApproval"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteNetworkLink": {
      "delete": {
        "tags": [
          "Network Link"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a network link",
        "description": "The deleteNetworkLink operation enables you to delete a network link from IPControl.",
        "operationId": "deleteNetworkLink",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpNetLink": {
                  "$ref": "#/definitions/WSNetworkLink"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The input describing the network link to be deleted. Specify the name.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a NetworkLink"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportNetworkLink": {
      "post": {
        "tags": [
          "Network Link"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export network links",
        "description": "The endExportNetworkLink operation is an optional final step in the series of calls to export network links from IPControl. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportNetworkLink",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an exportNetworkLink operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of NetworkLink completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/getTaskStatus": {
      "get": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get task status",
        "description": "Retrieve task status information. The status is returned as one of the following: NOTSTARTED, QUEUED, INPROGRESS, COMPLETE, COMPLETEWITHERRORS, ERROR.",
        "operationId": "getTaskStatus",
        "parameters": [
          {
            "type": "integer",
            "name": "taskId",
            "in": "query",
            "description": "Use taskId to specify the task number to query.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "TaskStatus",
            "schema": {
              "properties": {
                "result": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getDeviceByIPAddr": {
      "get": {
        "tags": [
          "Device"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a device by identifying its IP address",
        "description": "Retrieve information about a device, by specifying the IP address and, optionally, the container name (if required for overlapping space).",
        "operationId": "getDeviceByIPAddr",
        "parameters": [
          {
            "type": "string",
            "name": "ipAddress",
            "in": "query",
            "description": "The IP address of the device, e.g. 10.0.0.18",
            "required": true
          },
          {
            "type": "string",
            "name": "container",
            "in": "query",
            "description": "The container holding the block where the device is defined. Required only if IP address is not unique.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Device",
            "schema": {
              "$ref": "#/definitions/WSDevice"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportDomainResourceRec": {
      "post": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export domain resource records",
        "description": "The initExportDomainResourceRec operation enables you to export domain resource records for a domain or list of domains from IPControl. You can filter the list of records retrieved. When includeDeviceRRs is specified in the options array, all resource records for the included domains will be exported, including those bound to a device. The default behavior is to export only those resource records not bound to a device. When pageSize and firstResultPos are specified,  a list of structures is returned as described for the exportDomainResourceRec operation. Otherwise, the returned structure can be passed on a subsequent exportDomainResourceRec operation to retrieve results.",
        "operationId": "initExportDomainResourceRec",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "filter": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0. includeDeviceRRs is the only supported option for this operation.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of DomainResourceRec initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportDhcpOptionSet": {
      "post": {
        "tags": [
          "DHCP Option Set"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export DHCP option sets",
        "description": "The exportDhcpOptionSet operation enables you to export DHCP option sets from IPControl. Before invoking the exportDhcpOptionSet operation, you must use initExportDhcpOptionSet to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportDhcpOptionSet",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportDhcpOptionSet operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "DhcpOptionSet returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSDhcpOptionSet"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getAddressPool": {
      "get": {
        "tags": [
          "Address Pool"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get an address pool",
        "description": "Retrieve information about an address pool.",
        "operationId": "getAddressPool",
        "parameters": [
          {
            "type": "string",
            "name": "startAddress",
            "in": "query",
            "description": "The starting address of the address pool, e.g. 10.0.0.0",
            "required": true
          },
          {
            "type": "string",
            "name": "container",
            "in": "query",
            "description": "The container holding the block. Required only if start address is not unique.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "AddressPool",
            "schema": {
              "$ref": "#/definitions/WSAddrpool"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importNetServiceWithTemplate": {
      "post": {
        "tags": [
          "Network Service"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import a network service using a template",
        "description": "The importNetServiceWithTemplate operation enables you to import a network service to IPControl by applying a pre-defined Server Template. ",
        "operationId": "importNetServiceWithTemplate",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpNS": {
                  "$ref": "#/definitions/WSNetServiceWithTemplate"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the network service and template. name, ipAddress and template are required.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of NetServiceWithTemplate completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getDeviceResourceRec": {
      "get": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a device resource record",
        "description": "Retrieve information about a DNS resource record. Either the IP address or the host name of the device must be specified.",
        "operationId": "getDeviceResourceRec",
        "parameters": [
          {
            "type": "string",
            "name": "domainName",
            "in": "query",
            "description": "The name of the domain",
            "required": true
          },
          {
            "type": "string",
            "name": "domainTypeName",
            "in": "query",
            "description": "The name of the domain type to which the domain belongs; defaults to \u0027Default\u0027",
            "required": false
          },
          {
            "type": "string",
            "name": "owner",
            "in": "query",
            "description": "The resource record owner",
            "required": true
          },
          {
            "type": "string",
            "name": "type",
            "in": "query",
            "description": "The resource record type",
            "required": true
          },
          {
            "type": "string",
            "name": "classtype",
            "in": "query",
            "description": "The value currently supported is \u0027IN\u0027",
            "required": false
          },
          {
            "type": "string",
            "name": "rdata",
            "in": "query",
            "description": "The resource record data text",
            "required": false
          },
          {
            "type": "string",
            "name": "hostname",
            "in": "query",
            "description": "The device host name",
            "required": false
          },
          {
            "type": "string",
            "name": "ipAddress",
            "in": "query",
            "description": "The IP address of the device",
            "required": false
          },
          {
            "type": "string",
            "name": "container",
            "in": "query",
            "description": "The name of the container that holds the device; required only if IP address is not unique",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "DeviceResourceRec",
            "schema": {
              "$ref": "#/definitions/WSDeviceResourceRec"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteAdminRole": {
      "delete": {
        "tags": [
          "Administrator Role"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete an administrator role",
        "description": "The deleteAdminRole operation enables you to delete an administrator role from IPControl. ",
        "operationId": "deleteAdminRole",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpAdminRole": {
                  "$ref": "#/definitions/WSAdminRole"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The input describing the administrator role to be deleted. roleName is required",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a AdminRole"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getNetworkElementByName": {
      "get": {
        "tags": [
          "Network Element"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a Network Element",
        "description": "Retrieve information about a network element by identifying its name.",
        "operationId": "getNetworkElementByName",
        "parameters": [
          {
            "type": "string",
            "name": "netElementName",
            "in": "query",
            "description": "The name of the network element",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "NetworkElement",
            "schema": {
              "$ref": "#/definitions/WSNetworkElement"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/arpDiscoverNetElement": {
      "post": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Issue Arp Discovery Task",
        "description": "Issue an immediate ArpDiscovery task to collect host information from a router\u0027s ARP cache. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.",
        "operationId": "arpDiscoverNetElement",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "ignoreDuplicates": {
                  "type": "boolean"
                },
                "importInvalid": {
                  "type": "boolean"
                },
                "reverseLookup": {
                  "type": "boolean"
                },
                "netelement": {
                  "type": "string"
                },
                "performNetHostAdd": {
                  "type": "boolean"
                },
                "updateReclaim": {
                  "type": "boolean"
                },
                "priority": {
                  "type": "boolean"
                }
              }
            },
            "name": "Task parameters",
            "in": "body",
            "description": "netelement (required): network element name; performNetHostAdd: Set to true to automatically add new hosts that are found during discovery; updateReclaim: Set to true to update the last discovered counters for blocks and hosts defined within the network element; ignoreDuplicates: Set to true to ignore duplicate hostnames encountered while adding new hosts; reverseLookup: Set to true to do a reverse DNS lookup and attempt to resolve the FQDN for this address; importInvalid: Set to true to import records the router has flagged as invalid. Set priority to true to create a high priority task.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "integer returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/globalNetServiceSync": {
      "post": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Issue Global Synchronization Task for Network Service",
        "description": "Issue an immediate Global Synchronization task for all network services in IPControl that are flagged for inclusion in the Global Sync process. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.",
        "operationId": "globalNetServiceSync",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "priority": {
                  "type": "boolean"
                }
              }
            },
            "name": "Task parameters",
            "in": "body",
            "description": "Set priority to true to create a high priority task.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "integer returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getEffectiveDhcpServersForContainer": {
      "get": {
        "tags": [
          "DHCP Server"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a list of accessible DHCP Servers",
        "description": "Retrieve a list of all valid and accessible DHCP servers for a given container.",
        "operationId": "getEffectiveDhcpServersForContainer",
        "parameters": [
          {
            "type": "string",
            "name": "container",
            "in": "query",
            "description": "Container name for which to return the list effective DHCP servers",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "EffectiveDhcpServersForContainer",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSDhcpServer"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Login"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Login to the IPControl REST API and obtain an access token.",
        "description": "Specify user name and password to login to IPControl.",
        "operationId": "acceptItem",
        "parameters": [
          {
            "type": "string",
            "name": "username",
            "in": "formData",
            "description": "IPControl user name",
            "required": false
          },
          {
            "type": "string",
            "name": "password",
            "in": "formData",
            "description": "Password for user",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        }
      }
    },
    "/Exports/exportAdmin": {
      "post": {
        "tags": [
          "Administrator"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export administrators",
        "description": "The exportAdmin operation enables you to export administrators from IPControl. Before invoking the exportAdmin operation, you must use initExportAdmin to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportAdmin",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportAdmin operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Admin returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSAdmin"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importDeviceResourceRecord": {
      "post": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import a device resource record",
        "description": "The importDeviceResourceRecord operation enables you to import DNS resource records for a device into IPControl. It can also be used to modify an existing resource record by specifying its id.",
        "operationId": "importDeviceResourceRecord",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpRR": {
                  "$ref": "#/definitions/WSDeviceResourceRec"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the resource record. The following parameters are required: domain, hostname or ipAddress, owner, resourceRecType, data.The default date/time format for effectiveStart parameter is \"MM/dd/yyyy hh:mm aa\".Minutes if specified, must be in multiples of 5.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of DeviceResourceRecord completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getDeployedBlockByIpAddressCalculateStats": {
      "get": {
        "tags": [
          "Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get an In Use/Deployed block by identifying its IP address, include updated utilization statistics",
        "description": "Retrieve information about an In Use/Deployed block by specifying the IP address and, optionally, the container name, block size (if required for unique identification).  The utilization statistics will be generated with up to date information. NOTE: The statistics will NOT be updated in the database.",
        "operationId": "getDeployedBlockByIpAddressCalculateStats",
        "parameters": [
          {
            "type": "string",
            "name": "ipAddress",
            "in": "query",
            "description": "The starting IP address of the block, e.g. 10.0.0.0",
            "required": true
          },
          {
            "type": "string",
            "name": "container",
            "in": "query",
            "description": "The container holding the block. Required only if IP address is not unique.",
            "required": false
          },
          {
            "type": "integer",
            "name": "bsize",
            "in": "query",
            "description": "The block\u0027s CIDR size. Required only if there are multiple blocks with the same starting address, e.g., 10.0.0.0/8 (aggregate) and 10.0.0.0/24 (child block).",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "DeployedBlock",
            "schema": {
              "$ref": "#/definitions/WSGenericBlock"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportAdminRole": {
      "post": {
        "tags": [
          "Administrator Role"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export administrator roles",
        "description": "The initExportAdminRole operation enables you to export administrator roles from IPControl. You can filter the list of roles retrieved. There are no options for this operation. When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportAdminRole operation. Otherwise, the returned structure can be passed on a subsequent exportAdmin operation to retrieve results.",
        "operationId": "initExportAdminRole",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "filter": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of AdminRole initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteDhcpPolicySet": {
      "delete": {
        "tags": [
          "DHCP Policy Set"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a DHCP Policy Set",
        "description": "The deleteDhcpPolicySet operation enables you to delete a DHCP Policy Set from IPControl. ",
        "operationId": "deleteDhcpPolicySet",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpPolicySet": {
                  "$ref": "#/definitions/WSDhcpPolicySet"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The input describing the DHCP policy set to be deleted. name is required.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a DhcpPolicySet"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/discoverNetElement": {
      "post": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Discover Network Element Task",
        "description": "Issue an immediate discover task to discover the interfaces bound to a network element already defined in IPControl. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.",
        "operationId": "discoverNetElement",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "importSnapshot": {
                  "type": "boolean"
                },
                "ipAddress": {
                  "type": "string"
                },
                "detachStale": {
                  "type": "boolean"
                },
                "priority": {
                  "type": "boolean"
                },
                "elementName": {
                  "type": "string"
                }
              }
            },
            "name": "Task parameters",
            "in": "body",
            "description": "Specify either elementName or ipAddress. Use elementName to specify the name of the device to discover. Use ipAddress to specify the ipAddress or fully-qualified (FQDN) of the device to discover. Set priority to true to create a high priority task.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "integer returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/joinBlock": {
      "post": {
        "tags": [
          "Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Join Blocks",
        "description": "The joinBlock operation enables you to join existing, adjacent blocks into a larger block. The blocks must be in the same container, and of the same type.",
        "operationId": "joinBlock",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "container": {
                  "type": "string"
                },
                "blockName": {
                  "type": "string"
                }
              }
            },
            "name": "Modify Parameters",
            "in": "body",
            "description": "The input describing the blocks to be joined. Specify the name of the block. The container name must be specified if the block name is not unique, due to overlapping space or naming conventions.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Block returned"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importContainer": {
      "post": {
        "tags": [
          "Container"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import a container",
        "description": "The importContainer operation enables you to import a container to IPControl. These can be logical containers or device containers. It can also be used to modify an existing container by specifying its id.",
        "operationId": "importContainer",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpContainer": {
                  "$ref": "#/definitions/WSContainer"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the container. The following parameters are required: containerName, containerType, parentName, userDefinedFields defined as required fields. For userDefinedFields, specify comma-separated name\u003dvalue pairs, where each pair is enclosed in double quotes.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of Container completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importDomain": {
      "post": {
        "tags": [
          "Domain"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import a domain",
        "description": "The ImportDomain API enables you import a domain to IPControl.",
        "operationId": "importDomain",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpDomain": {
                  "$ref": "#/definitions/WSDomain"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the domain. The domainName parameter is required. In addition, when importing an \u0027ALIAS\u0027 domain its domain type is used to help locate the named \u0027TEMPLATE\u0027 domain it will be aliased to. Therefore they MUST match for the template domain to be found. Also specify userDefinedFields defined as required fields, using comma-separated name\u003dvalue pairs, where each pair is enclosed in double quotes.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of Domain completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteTaskByDate": {
      "delete": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete tasks by date",
        "description": "The deleteTaskByDate operation enables you to delete tasks from IPControl that are older than a given date. Specify the date as YYYY-MM-DDTHH:MM:SSZ. Specifying the time following the \u0027T\u0027 is optional. Examples: 2015-04-24T18:35:37.52Z, 2015-04-24T18:35:37Z or 2015-04-24.  The number of tasks deleted is returned in the result.",
        "operationId": "deleteTaskByDate",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "before": {
                  "type": "string"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The date describing the tasks to be deleted. ",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a Task",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteDeviceInterface": {
      "delete": {
        "tags": [
          "Device"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a device interface",
        "description": "The deleteDeviceInterface operation enables you to delete a device interfaces from IPControl. Note that this is not used to delete devices of type \u0027Interface\u0027. Use the ModifyBlock API to delete Interface-type devices.",
        "operationId": "deleteDeviceInterface",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpDev": {
                  "$ref": "#/definitions/WSDevice"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The input describing the device interface to be deleted. Specify the ipAddress of the device interface to be deleted. container is required only if the ipAddress is not unique due to overlapping space.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a DeviceInterface"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/TaskInvocation/dhcpConfigurationAllFiles": {
      "post": {
        "tags": [
          "Task"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Issue DHCP Configuration Task",
        "description": "Issue an immediate DHCP configuration task for a specified DHCP server. If the task is scheduled successfully, the positive integer returned will correspond to the task number. This task number can be passed to the taskStatus operation to obtain the status of that task. If the task is not scheduled successfully, the negative integer returned in the response contains a code: -1 system error, -2 access denied, -3 invalid parameter, -4 resource not found.",
        "operationId": "dhcpConfigurationAllFiles",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "stopOnError": {
                  "type": "boolean"
                },
                "createDiff": {
                  "type": "boolean"
                },
                "updateFailovers": {
                  "type": "boolean"
                },
                "ignoreDdnsErrors": {
                  "type": "boolean"
                },
                "ip": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "pushOnlyChanges": {
                  "type": "boolean"
                },
                "priority": {
                  "type": "boolean"
                }
              }
            },
            "name": "Task parameters",
            "in": "body",
            "description": "One of name or ip must be specified. name: DHCP server name; ip: DHCP server IP address; stopOnError: Specify whether to stop if an error is encountered or ignore the error and continue; pushOnlyChanges: Specify whether to push the files even if there have been no configuration changes; updateFailovers: Specify whether the push should also update failover servers. ignoreDdnsError: If stopOnError is true, specifiy if Dynamic DNS errors and warnings should be ignored. Set priority to true to create a high priority task.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "integer returned",
            "schema": {
              "properties": {
                "result": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteAdmin": {
      "delete": {
        "tags": [
          "Administrator"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete an administrator",
        "description": "The deleteAdmin operation enables you to delete an administrator from IPControl. ",
        "operationId": "deleteAdmin",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpAdmin": {
                  "$ref": "#/definitions/WSAdmin"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The input describing the administrator to be deleted. loginId is required",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a Admin"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportResourceRecordPendingApprovalStatus": {
      "post": {
        "tags": [
          "Pending Approval"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export resource record pending approval status",
        "description": "The initExportResourceRecordPendingApprovalStatus operation enables you to issue a request to retrieve a list of resource records that were submitted for approval by the invoking administrator. These updates include those to create, update or delete a resource record. There are no options defined for this operation. When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportResourceRecordPendingApprovalStatus operation. Otherwise, the returned structure can be passed on a subsequent exportResourceRecordPendingApprovalStatus operation to retrieve results.",
        "operationId": "initExportResourceRecordPendingApprovalStatus",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of ResourceRecordPendingApprovalStatus initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportRootBlock": {
      "post": {
        "tags": [
          "Root Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export root blocks",
        "description": "The initExportRootBlock operation enables you to export root blocks from IPControl. You can filter the list of blocks retrieved. When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportRootBlock operation. Otherwise, the returned structure can be passed on a subsequent exportRootBlock operation to retrieve results.",
        "operationId": "initExportRootBlock",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of RootBlock initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importDomainResourceRecord": {
      "post": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import a domain resource record",
        "description": "The importDomainResourceRecord operation enables you to import resource records into IPControl that are not bound to a device, but still appear in a zone file. It can also be used to modify an existing resource record by specifying its id.",
        "operationId": "importDomainResourceRecord",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpRR": {
                  "$ref": "#/definitions/WSDomainResourceRec"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the resource record. The following parameters are required: domain, owner, resourceRecType, data. The default date/time format for effectiveStart parameter is \"MM/dd/yyyy hh:mm aa\".Minutes if specified, must be in multiples of 5.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of DomainResourceRecord completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importNetworkLink": {
      "post": {
        "tags": [
          "Network Link"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import network link",
        "description": "The importNetworkLink operation enables you to import network links to IPControl. Only logical network links can be imported. It can also be used to modify an existing logical network link by specifying its id.",
        "operationId": "importNetworkLink",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "networkLink": {
                  "$ref": "#/definitions/WSNetworkLink"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the network link to be imported. The name parameter is required. ",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of NetworkLink completed",
            "schema": {
              "properties": {
                "result": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportRootBlock": {
      "post": {
        "tags": [
          "Root Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export root blocks",
        "description": "The exportRootBlock operation enables you to export root blocks from IPControl. Before invoking the exportRootBlock operation, you must use initExportRootBlock to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportRootBlock",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportRootBlock operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "RootBlock returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSRootBlock"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportDhcpPolicySet": {
      "post": {
        "tags": [
          "DHCP Policy Set"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export DHCP policy sets",
        "description": "The exportDhcpPolicySet operation enables you to export DHCP policy sets from IPControl. Before invoking the exportDhcpPolicySet operation, you must use initExportDhcpPolicySet to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportDhcpPolicySet",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportDhcpPolicySet operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "DhcpPolicySet returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSDhcpPolicySet"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportDhcpOptionSet": {
      "post": {
        "tags": [
          "DHCP Option Set"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export DHCP option sets",
        "description": "The endExportDhcpOptionSet operation is an optional final step in the series of calls to export DHCP option sets from IPControl. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportDhcpOptionSet",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an exportDhcpOptionSet operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of DhcpOptionSet completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/restoreDeletedDevice": {
      "post": {
        "tags": [
          "Device"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Restore a deleted device",
        "description": "The restoreDeletedDevice operation enables you to restore a deleted device. To obtain the required restoreId, use the ExportDeviceRestoreList operation to export a list of the devices that were deleted and are available to be restored.",
        "operationId": "restoreDeletedDevice",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpDevice": {
                  "$ref": "#/definitions/WSRestoreDevice"
                }
              }
            },
            "name": "Restore Parameters",
            "in": "body",
            "description": "The input describing the device. restoreId is required.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "DeletedDevice returned"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getDeployedBlockByNameCalculateStats": {
      "get": {
        "tags": [
          "Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get an In Use/Deployed block by identifying its name, include updated utilization statistics",
        "description": "Retrieve information about an In Use/Deployed block by specifying the blockname and, optionally, the container name (if required for overlapping space).  The utilization statistics will be generated with up to date information.  NOTE: The statistics will NOT be updated in the database.",
        "operationId": "getDeployedBlockByNameCalculateStats",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "description": "The Name of the block, e.g. 10.0.0.0/24",
            "required": true
          },
          {
            "type": "string",
            "name": "container",
            "in": "query",
            "description": "The container holding the block. Required only if block name is not unique.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "DeployedBlock",
            "schema": {
              "$ref": "#/definitions/WSGenericBlock"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getBlockByName": {
      "get": {
        "tags": [
          "Block"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a block by identifying its name",
        "description": "Retrieve information about a block by specifying the blockname and, optionally, the container name (if required for overlapping space).",
        "operationId": "getBlockByName",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "description": "The Name of the block, e.g. 10.0.0.0/24",
            "required": true
          },
          {
            "type": "string",
            "name": "container",
            "in": "query",
            "description": "The container holding the block. Required only if block name is not unique.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Block",
            "schema": {
              "$ref": "#/definitions/WSGenericBlock"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportNetworkElement": {
      "post": {
        "tags": [
          "Network Element"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export network elements",
        "description": "The exportNetworkElement operation enables you to export network elements from IPControl. Before invoking the exportNetworkElement operation, you must use initExportNetworkElement to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportNetworkElement",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportDomainResourceRec operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "NetworkElement returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSNetworkElement"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getDomainResourceRec": {
      "get": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a domain resource record",
        "description": "Retrieve information about a DNS resource record.",
        "operationId": "getDomainResourceRec",
        "parameters": [
          {
            "type": "string",
            "name": "domainName",
            "in": "query",
            "description": "The name of the domain",
            "required": true
          },
          {
            "type": "string",
            "name": "domainTypeName",
            "in": "query",
            "description": "The name of the domain type to which the domain belongs; defaults to \u0027Default\u0027",
            "required": false
          },
          {
            "type": "string",
            "name": "owner",
            "in": "query",
            "description": "The resource record owner",
            "required": true
          },
          {
            "type": "string",
            "name": "type",
            "in": "query",
            "description": "The resource record type",
            "required": true
          },
          {
            "type": "string",
            "name": "classtype",
            "in": "query",
            "description": "The value currently supported is \u0027IN\u0027",
            "required": false
          },
          {
            "type": "string",
            "name": "rdata",
            "in": "query",
            "description": "The resource record data text",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "DomainResourceRec",
            "schema": {
              "$ref": "#/definitions/WSDomainResourceRec"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getAdmin": {
      "get": {
        "tags": [
          "Administrator"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get an administrator",
        "description": "Retrieve information about an administrator",
        "operationId": "getAdmin",
        "parameters": [
          {
            "type": "string",
            "name": "adminName",
            "in": "query",
            "description": "The login id of the administrator",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Admin",
            "schema": {
              "$ref": "#/definitions/WSAdmin"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportAdminRole": {
      "post": {
        "tags": [
          "Administrator Role"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export administrator roles",
        "description": "The endExportAdminRole operation is an optional final step in the series of calls to export administrator roles from IPControl. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportAdminRole",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an initExportAdminRole operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of AdminRole completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importDevice": {
      "post": {
        "tags": [
          "Device"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import a device",
        "description": "The importDevice operation enables you to import a device to IPControl. It can also be used to modify an existing device by specifying its id.",
        "operationId": "importDevice",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpDevice": {
                  "$ref": "#/definitions/WSDevice"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the device. The following parameters are required: addressType, container (if necessary for resolving overlapping space), hostname, ipAddress, userDefinedFields defined as required fields. Based on device type, there may be other requirements. Refer to the IPControl API Guide for more information. For userDefinedFields, specify comma-separated name\u003dvalue pairs, where each pair is enclosed in double quotes.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of Device completed",
            "schema": {
              "properties": {
                "result": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportPrefixPool": {
      "post": {
        "tags": [
          "Prefix Pool"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export prefix pools",
        "description": "The endExportPrefixPool operation is an optional final step in the series of calls to export prefix pools from IPControl. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportPrefixPool",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an exportPrefixPool operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of PrefixPool completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getNetworkElementByNameOrIpAddress": {
      "get": {
        "tags": [
          "Network Element"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a Network Element by identifying its IP address",
        "description": "Retrieve information about a network element by identifying its IP address.",
        "operationId": "getNetworkElementByNameOrIpAddress",
        "parameters": [
          {
            "type": "string",
            "name": "netElementName",
            "in": "query",
            "description": "The name of the network element, to resolve ambiguity of ipAddress",
            "required": false
          },
          {
            "type": "string",
            "name": "netElementIpAddress",
            "in": "query",
            "description": "The IP address of the network element",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "NetworkElement",
            "schema": {
              "$ref": "#/definitions/WSNetworkElement"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Gets/getDhcpOptionSetByScope": {
      "get": {
        "tags": [
          "DHCP Option Set"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get a DHCP option set",
        "description": "Retrieve information about a scope-specific DHCP option set",
        "operationId": "getDhcpOptionSetByScope",
        "parameters": [
          {
            "type": "string",
            "name": "scope",
            "in": "query",
            "description": "Identify the scope: CIDR notation of subnet, address pool name, or device IP address",
            "required": true
          },
          {
            "type": "string",
            "name": "scopeType",
            "in": "query",
            "description": "Specify one of subnet, pool, ipAddress.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "DhcpOptionSet",
            "schema": {
              "$ref": "#/definitions/WSDhcpOptionSet"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Imports/importDhcpOptionSet": {
      "post": {
        "tags": [
          "DHCP Option Set"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Import a DHCP Option Set",
        "description": "The ImportDhcpOptionSet operation enables you to import DHCP option set definitions into IPControl. Both standard and scope-specific option sets can be imported.  Specify the new set name and (optionally) the DHCP options. For each option, specify the code or name and the optionValue",
        "operationId": "importDhcpOptionSet",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "wsDhcpOptionSet": {
                  "$ref": "#/definitions/WSDhcpOptionSet"
                }
              }
            },
            "name": "Import Parameters",
            "in": "body",
            "description": "The input describing the DHCP option set.  Required parameters are: name, scopeName and scopeType for scope-specific sets only, code or name and optionValue for each option. ",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Imports of DhcpOptionSet completed",
            "schema": {
              "properties": {
                "result": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteNetService": {
      "delete": {
        "tags": [
          "Network Service"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a network service",
        "description": "The deleteNetService operation enables you to delete a network service from IPControl.",
        "operationId": "deleteNetService",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpNS": {
                  "$ref": "#/definitions/WSNetService"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The input describing the network service to be deleted. Specify name and type, if not DHCP.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a NetService"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteDomainResourceRecord": {
      "delete": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a domain resource record",
        "description": "The deleteDomainResourceRecord operation enables you to delete a resource record from IPControl that is affiliated with a domain.",
        "operationId": "deleteDomainResourceRecord",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpRR": {
                  "$ref": "#/definitions/WSDomainResourceRec"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The input describing the resource record to be deleted. The following parameters are required: data, domain, domainType (if not \u0027Default\u0027), owner, resourceRecType.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a DomainResourceRecord"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportZoneResourceRecord": {
      "post": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export zone resource records",
        "description": "The endExportZoneResourceRec operation is an optional final step in the series of calls to export zone resource records for a zone or list of zones from IPControl. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportZoneResourceRec",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an exportZoneResourceRec operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of ZoneResourceRecord completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/endExportDeviceRestoreList": {
      "post": {
        "tags": [
          "Device"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export device restore list",
        "description": "The endExportDeviceRestoreList operation is an optional final step in the series of calls to export a list of devices that have been deleted and may be eligible for restoring. Invoking this operation enables IPControl to clean up session information.",
        "operationId": "endExportDeviceRestoreList",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from an exportDeviceRestoreList operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of DeviceRestoreList completed"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/exportTagAssociation": {
      "post": {
        "tags": [
          "Tag Association"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export tag associations",
        "description": "The exportTagAssociation operation enables you to export tag associations from IPControl. Before invoking the operation, you must use the corresponding init operation to initialize the API. The response returned from the init operation becomes the input to this operation.",
        "operationId": "exportTagAssociation",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/WSContext"
                }
              }
            },
            "name": "wscontext",
            "in": "body",
            "description": "The results from the operation",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "TagAssociation returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WSTagAssociation"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Deletes/deleteZoneResourceRecord": {
      "delete": {
        "tags": [
          "Resource Record"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a zone resource record",
        "description": "The deleteZoneResourceRecord operation enables you to delete a resource record from IPControl that is affiliated with a zone. These are specialized resource records, known as \u0027glue\u0027 records.",
        "operationId": "deleteZoneResourceRecord",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "inpRR": {
                  "$ref": "#/definitions/WSZoneResourceRec"
                }
              }
            },
            "name": "Delete Parameters",
            "in": "body",
            "description": "The input describing the resource record to be deleted. The following parameters are required: data, owner, resourceRecType, server, zone.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted a ZoneResourceRecord"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    },
    "/Exports/initExportResourceRecordPendingApproval": {
      "post": {
        "tags": [
          "Pending Approval"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Export resource record pending approvals",
        "description": "The initExportResourceRecordPendingApproval operation enables you to issue a request to retrieve a list of resource records that are waiting for approval by the invoking administrator. This service enables the client to filter the list of resource records retrieved by requesting administrator, domain name/type and the requested action. There are no options defined for this operation. When pageSize and firstResultPos are specified, a list of structures is returned as described for the exportResourceRecordPendingApproval operation. Otherwise, the returned structure can be passed on a subsequent exportResourceRecordPendingApproval operation to retrieve results.",
        "operationId": "initExportResourceRecordPendingApproval",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageSize": {
                  "type": "integer"
                },
                "firstResultPos": {
                  "type": "integer"
                }
              }
            },
            "name": "Export parameters",
            "in": "body",
            "description": "The query string syntax and supported selectors are defined in the IPControl CLI and API Guide. Use pageSize to specify the number of results to be returned. Use firstResultPos to indicate where the set of results should begin. Results begin at position 0.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Exports of ResourceRecordPendingApproval initialized",
            "schema": {
              "$ref": "#/definitions/WSContext"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Fault"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "WSContext": {
      "properties": {
        "filter": {
          "type": "string"
        },
        "resultCount": {
          "type": "integer"
        },
        "maxResults": {
          "type": "integer"
        },
        "contextType": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contextId": {
          "type": "string"
        },
        "internalResultCount": {
          "type": "integer"
        },
        "firstResultPos": {
          "type": "integer"
        }
      }
    },
    "WSRestoreResourceRecord": {
      "properties": {
        "dateTime": {
          "type": "string"
        },
        "ignoreDuplicateOwnerWarning": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "domainType": {
          "type": "string"
        },
        "effectiveStart": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "admin": {
          "type": "string"
        },
        "restoreId": {
          "type": "integer"
        },
        "TTL": {
          "type": "string"
        },
        "resourceRecType": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "resourceRecClass": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "WSAllocationTemplateDetails": {
      "properties": {
        "startingOffset": {
          "type": "integer"
        },
        "sharename": {
          "type": "string"
        },
        "offsetFromBeginningOfSubnet": {
          "type": "boolean"
        },
        "netserviceName": {
          "type": "string"
        }
      }
    },
    "WSDeviceMerge": {
      "properties": {
        "sourceContainer": {
          "type": "string"
        },
        "sourceHostname": {
          "type": "string"
        },
        "sourceMacAddress": {
          "type": "string"
        },
        "targetHostname": {
          "type": "string"
        },
        "sourceIpAddress": {
          "type": "string"
        },
        "targetContainer": {
          "type": "string"
        },
        "targetIpAddress": {
          "type": "string"
        },
        "targetMacAddress": {
          "type": "string"
        }
      }
    },
    "WSDhcpPolicy": {
      "properties": {
        "policyValue": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "appliesTo": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        }
      }
    },
    "Fault": {
      "properties": {
        "faultString": {
          "type": "string"
        },
        "faultDetail": {
          "type": "integer"
        }
      }
    },
    "Token": {
      "properties": {
        "access_token": {
          "type": "string"
        },
        "token_type": {
          "type": "string"
        },
        "expires_in": {
          "type": "integer"
        }
      }
    },
    "WSChildSubnetBlock": {
      "properties": {
        "childBlock": {
          "$ref": "#/definitions/WSChildBlock"
        },
        "subnetPolicy": {
          "$ref": "#/definitions/WSSubnetPolicy"
        }
      }
    },
    "WSDhcpOption": {
      "properties": {
        "parentName": {
          "type": "string"
        },
        "code": {
          "type": "integer"
        },
        "parentCode": {
          "type": "integer"
        },
        "optionValue": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        }
      }
    },
    "WSSubnetPolicy": {
      "properties": {
        "primaryDHCPServer": {
          "type": "string"
        },
        "cascadePrimaryDhcpServer": {
          "type": "boolean"
        },
        "DHCPOptionsSet": {
          "type": "string"
        },
        "defaultGateway": {
          "type": "string"
        },
        "failoverDHCPServer": {
          "type": "string"
        },
        "DHCPPolicySet": {
          "type": "string"
        },
        "forwardDomains": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "primaryWINSServer": {
          "type": "string"
        },
        "reverseDomainTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "reverseDomains": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "networkLink": {
          "type": "string"
        },
        "forwardDomainTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DNSServers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WSNetElement": {
      "properties": {
        "readCommunityString": {
          "type": "string"
        },
        "interfaceNameList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "v3EngineId": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "agentName": {
          "type": "string"
        },
        "threshold": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "authPassword": {
          "type": "string"
        },
        "globalSync": {
          "type": "string"
        },
        "v3AuthPassword": {
          "type": "string"
        },
        "v3AuthProtocol": {
          "type": "string"
        },
        "v3ContextName": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "telnetPassword": {
          "type": "string"
        },
        "telnetUser": {
          "type": "string"
        },
        "v3PrivacyPassword": {
          "type": "string"
        },
        "v3PrivacyProtocol": {
          "type": "string"
        }
      }
    },
    "WSGenericBlock": {
      "properties": {
        "container": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "numstatichosts": {
          "type": "integer"
        },
        "subnet": {
          "$ref": "#/definitions/WSSubnetPolicy"
        },
        "interfaceAddress": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "blockName": {
          "type": "string"
        },
        "inheritDiscoveryAgent": {
          "type": "integer"
        },
        "numaddressablehosts": {
          "type": "integer"
        },
        "createdate": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "subnetlosshosts": {
          "type": "integer"
        },
        "numleasablehosts": {
          "type": "integer"
        },
        "organizationId": {
          "type": "string"
        },
        "allocationReasonDescription": {
          "type": "string"
        },
        "numassignedhosts": {
          "type": "integer"
        },
        "rootBlocktype": {
          "type": "string"
        },
        "cloudType": {
          "type": "string"
        },
        "ipv6": {
          "type": "boolean"
        },
        "numlockedhosts": {
          "type": "integer"
        },
        "rir": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "interfaceName": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "numunallocatedhosts": {
          "type": "integer"
        },
        "cloudObjectId": {
          "type": "string"
        },
        "allocationReason": {
          "type": "string"
        },
        "swipname": {
          "type": "string"
        },
        "numdynamichosts": {
          "type": "integer"
        },
        "allowOverlappingSpace": {
          "type": "boolean"
        },
        "blockType": {
          "type": "string"
        },
        "discoveryAgent": {
          "type": "string"
        },
        "allocationTemplateName": {
          "type": "string"
        },
        "blockAddr": {
          "type": "string"
        },
        "blockStatus": {
          "type": "string"
        },
        "numreservedhosts": {
          "type": "integer"
        },
        "ignoreErrors": {
          "type": "boolean"
        },
        "blockSize": {
          "type": "integer"
        },
        "excludeFromDiscovery": {
          "type": "string"
        },
        "numallocatedhosts": {
          "type": "integer"
        },
        "userDefinedFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastadminid": {
          "type": "integer"
        },
        "nonBroadcast": {
          "type": "boolean"
        },
        "primarySubnet": {
          "type": "boolean"
        },
        "createadmin": {
          "type": "string"
        },
        "keepLogicalNetworkLink": {
          "type": "boolean"
        },
        "addrDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WSAllocationTemplateDetails"
          }
        },
        "lastupdate": {
          "type": "string"
        },
        "rootBlock": {
          "type": "boolean"
        }
      }
    },
    "WSNetworkLink": {
      "properties": {
        "dhcpOptionSet": {
          "type": "string"
        },
        "dhcpPolicySet": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "containers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "blockNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WSGalaxyDomain": {
      "properties": {
        "galaxyName": {
          "type": "string"
        },
        "view": {
          "type": "string"
        },
        "domainType": {
          "type": "string"
        },
        "domainName": {
          "type": "string"
        }
      }
    },
    "WSDhcpServer": {
      "properties": {
        "collectionUser": {
          "type": "string"
        },
        "failoverIpAddress": {
          "type": "string"
        },
        "agent": {
          "type": "string"
        },
        "cliUserName": {
          "type": "string"
        },
        "failoverPeers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "configPath": {
          "type": "string"
        },
        "stopScript": {
          "type": "string"
        },
        "beginExtension": {
          "type": "string"
        },
        "globalSync": {
          "type": "boolean"
        },
        "collectionPassword": {
          "type": "string"
        },
        "optionSet": {
          "type": "string"
        },
        "primaryPeers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "v4V6Both": {
          "type": "string"
        },
        "startScript": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "policySet": {
          "type": "string"
        },
        "endExtension": {
          "type": "string"
        },
        "product": {
          "type": "string"
        },
        "cliArgs": {
          "type": "string"
        },
        "failoverPort": {
          "type": "integer"
        },
        "ipAddress": {
          "type": "string"
        },
        "ddns": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WSTag"
          }
        },
        "collectBackupSubnets": {
          "type": "boolean"
        },
        "collectionType": {
          "type": "string"
        },
        "cliCommand": {
          "type": "string"
        },
        "clientClasses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "collectionPort": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "cliPassword": {
          "type": "string"
        },
        "leasePath": {
          "type": "string"
        },
        "defaultThreshold": {
          "type": "integer"
        }
      }
    },
    "WSDevice": {
      "properties": {
        "container": {
          "type": "string"
        },
        "deviceType": {
          "type": "string"
        },
        "interfaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WSInterface"
          }
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "duid": {
          "type": "string"
        },
        "domainType": {
          "type": "string"
        },
        "dupWarning": {
          "type": "string"
        },
        "hwType": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "adminLoginId": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "createdate": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "resourceRecordFlag": {
          "type": "string"
        },
        "excludeFromDiscovery": {
          "type": "string"
        },
        "splitPool": {
          "type": "string"
        },
        "userDefinedFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hostname": {
          "type": "string"
        },
        "MACAddress": {
          "type": "string"
        },
        "domainName": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "lastupdate": {
          "type": "string"
        }
      }
    },
    "WSRestoreDevice": {
      "properties": {
        "container": {
          "type": "string"
        },
        "dateTime": {
          "type": "string"
        },
        "deviceType": {
          "type": "string"
        },
        "duid": {
          "type": "string"
        },
        "blockName": {
          "type": "string"
        },
        "domainType": {
          "type": "string"
        },
        "hwType": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "adminLoginId": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "restoreId": {
          "type": "integer"
        },
        "hostname": {
          "type": "string"
        },
        "MACAddress": {
          "type": "string"
        },
        "domainName": {
          "type": "string"
        },
        "ignoreDuplicateWarning": {
          "type": "string"
        }
      }
    },
    "WSAdminOtherPolicies": {
      "properties": {
        "allowDupARecCheck": {
          "type": "string"
        },
        "allowGUIAccess": {
          "type": "boolean"
        },
        "dupHostnameCheckingStyle": {
          "type": "string"
        },
        "allowDupHwAddrCheck": {
          "type": "string"
        },
        "allowDupHostnameCheck": {
          "type": "string"
        },
        "allowCLIAccess": {
          "type": "boolean"
        }
      }
    },
    "WSBlockACLInfo": {
      "properties": {
        "allowDelete": {
          "type": "boolean"
        },
        "allowWrite": {
          "type": "boolean"
        },
        "allowRead": {
          "type": "boolean"
        },
        "deviceApproveAccess": {
          "type": "boolean"
        },
        "blockName": {
          "type": "string"
        },
        "containerName": {
          "type": "string"
        },
        "blockStatus": {
          "type": "string"
        }
      }
    },
    "WSAdminRole": {
      "properties": {
        "policies": {
          "$ref": "#/definitions/WSAdminPolicies"
        },
        "roleName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        }
      }
    },
    "WSStatus": {
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "WSDhcpOptionSet": {
      "properties": {
        "container": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "blockName": {
          "type": "string"
        },
        "scopeType": {
          "type": "string"
        },
        "ipv6": {
          "type": "boolean"
        },
        "scope": {
          "type": "string"
        },
        "dhcpOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WSDhcpOption"
          }
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        }
      }
    },
    "WSNetServiceACL": {
      "properties": {
        "allowWrite": {
          "type": "boolean"
        },
        "allowRead": {
          "type": "boolean"
        },
        "allowDeploy": {
          "type": "boolean"
        },
        "serverType": {
          "type": "string"
        },
        "serverName": {
          "type": "string"
        }
      }
    },
    "WSPrefixPool": {
      "properties": {
        "container": {
          "type": "string"
        },
        "dhcpOptionSet": {
          "type": "string"
        },
        "delegatedPrefixLength": {
          "type": "integer"
        },
        "length": {
          "type": "integer"
        },
        "primaryNetService": {
          "type": "string"
        },
        "shortestPrefixLength": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "overlapInterfaceIp": {
          "type": "boolean"
        },
        "allowClientClasses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dhcpPolicySet": {
          "type": "string"
        },
        "longestPrefixLength": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "denyClientClasses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startAddr": {
          "type": "string"
        }
      }
    },
    "WSNetworkElement": {
      "properties": {
        "SNMPRetries": {
          "type": "integer"
        },
        "v3EngineId": {
          "type": "string"
        },
        "subnetCollectionType": {
          "type": "string"
        },
        "agentNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "globalSync": {
          "type": "boolean"
        },
        "v3AuthProtocol": {
          "type": "string"
        },
        "v3ContextName": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        },
        "SNMPsysDescr": {
          "type": "string"
        },
        "interfaceTemplate": {
          "type": "string"
        },
        "SNMPsysLocation": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "SNMPVersion": {
          "type": "string"
        },
        "v3PrivacyPassword": {
          "type": "string"
        },
        "v3PrivacyProtocol": {
          "type": "string"
        },
        "SNMPsysName": {
          "type": "string"
        },
        "readCommunityString": {
          "type": "string"
        },
        "SNMPTimeout": {
          "type": "integer"
        },
        "interfaceVrf": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ipAddress": {
          "type": "string"
        },
        "interfaceNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SNMPsysServices": {
          "type": "string"
        },
        "interfaceStatus": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "v3AuthPassword": {
          "type": "string"
        },
        "sshPass": {
          "type": "string"
        },
        "v3Username": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "sshUser": {
          "type": "string"
        }
      }
    },
    "WSContainerACLInfo": {
      "properties": {
        "allowDelete": {
          "type": "boolean"
        },
        "allowWrite": {
          "type": "boolean"
        },
        "allowRead": {
          "type": "boolean"
        },
        "deviceApproveAccess": {
          "type": "boolean"
        },
        "containerName": {
          "type": "string"
        },
        "applyToChildren": {
          "type": "boolean"
        }
      }
    },
    "WSNetService": {
      "properties": {
        "container": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "collectionMethod": {
          "type": "string"
        },
        "userPassword": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "agentName": {
          "type": "string"
        },
        "threshold": {
          "type": "string"
        },
        "vendorInfo": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "globalSync": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        },
        "collectionPort": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "WSAdminPolicies": {
      "properties": {
        "blockInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WSBlockACLInfo"
          }
        },
        "addressTypeAccess": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "netServiceAccess": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WSNetServiceACL"
          }
        },
        "containerInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WSContainerACLInfo"
          }
        },
        "policies": {
          "$ref": "#/definitions/WSAdminOtherPolicies"
        },
        "resourceRecTypeAccess": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deviceTypeAccess": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "domainAccess": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WSDomainACL"
          }
        },
        "authorizedFunctions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "blockTypeSizeAccess": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WSBlockTypeSizeACL"
          }
        }
      }
    },
    "WSSiteBlockDetails": {
      "properties": {
        "allocationReason": {
          "type": "string"
        },
        "allocationReasonDescription": {
          "type": "string"
        },
        "addrDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WSAllocationTemplateDetails"
          }
        },
        "interfaceName": {
          "type": "string"
        },
        "swipName": {
          "type": "string"
        },
        "userDefinedFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WSDomain": {
      "properties": {
        "serialNumber": {
          "type": "integer"
        },
        "domainType": {
          "type": "string"
        },
        "refresh": {
          "type": "string"
        },
        "derivative": {
          "type": "string"
        },
        "reverse": {
          "type": "boolean"
        },
        "infoTemplate": {
          "type": "string"
        },
        "userDefinedFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "managed": {
          "type": "boolean"
        },
        "negativeCacheTTL": {
          "type": "string"
        },
        "contact": {
          "type": "string"
        },
        "domainName": {
          "type": "string"
        },
        "expire": {
          "type": "string"
        },
        "defaultTTL": {
          "type": "string"
        },
        "delegated": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "templateDomain": {
          "type": "string"
        },
        "retry": {
          "type": "string"
        }
      }
    },
    "WSNetElementInterface": {
      "properties": {
        "netElementName": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "interfaceName": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "WSDeviceResourceRec": {
      "properties": {
        "container": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "domainType": {
          "type": "string"
        },
        "effectiveStart": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "TTL": {
          "type": "string"
        },
        "resourceRecType": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "pendingDeployment": {
          "type": "boolean"
        },
        "resourceRecClass": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        }
      }
    },
    "WSDomainACL": {
      "properties": {
        "allowDelete": {
          "type": "boolean"
        },
        "allowWrite": {
          "type": "boolean"
        },
        "allowRead": {
          "type": "boolean"
        },
        "domainType": {
          "type": "string"
        },
        "domainName": {
          "type": "string"
        },
        "RRApproveAccess": {
          "type": "boolean"
        },
        "applyToChildren": {
          "type": "boolean"
        },
        "RRWriteAccess": {
          "type": "boolean"
        },
        "RRAccess": {
          "type": "boolean"
        }
      }
    },
    "WSChildBlock": {
      "properties": {
        "container": {
          "type": "string"
        },
        "interfaceAddress": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "blockName": {
          "type": "string"
        },
        "domainType": {
          "type": "string"
        },
        "lastUpdateDate": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "allocationStrategy": {
          "type": "string"
        },
        "allocationTemplate": {
          "type": "string"
        },
        "allocationReasonDescription": {
          "type": "string"
        },
        "cloudType": {
          "type": "string"
        },
        "ipv6": {
          "type": "boolean"
        },
        "interfaceName": {
          "type": "string"
        },
        "cloudObjectId": {
          "type": "string"
        },
        "createDate": {
          "type": "string"
        },
        "allocationReason": {
          "type": "string"
        },
        "createReverseDomains": {
          "type": "string"
        },
        "blockType": {
          "type": "string"
        },
        "discoveryAgent": {
          "type": "string"
        },
        "blockAddr": {
          "type": "string"
        },
        "blockStatus": {
          "type": "string"
        },
        "blockSize": {
          "type": "string"
        },
        "excludeFromDiscovery": {
          "type": "string"
        },
        "userDefinedFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nonBroadcast": {
          "type": "boolean"
        },
        "primarySubnet": {
          "type": "boolean"
        },
        "SWIPname": {
          "type": "string"
        },
        "vrfName": {
          "type": "string"
        }
      }
    },
    "WSTagAssociation": {
      "properties": {
        "name": {
          "type": "string"
        },
        "ipAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "integer"
        },
        "tag": {
          "$ref": "#/definitions/WSTag"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "WSBlock4Delete": {
      "properties": {
        "container": {
          "type": "string"
        },
        "blockAddr": {
          "type": "string"
        },
        "blockSize": {
          "type": "integer"
        }
      }
    },
    "WSInterface": {
      "properties": {
        "container": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sequence": {
          "type": "integer"
        },
        "virtual": {
          "type": "array",
          "items": {
            "type": "boolean"
          }
        },
        "macAddress": {
          "type": "string"
        },
        "hwType": {
          "type": "string"
        },
        "addressType": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ipAddress": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "relayAgentCircuitId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "relayAgentRemoteId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "excludeFromDiscovery": {
          "type": "string"
        }
      }
    },
    "WSPendingApproval": {
      "properties": {
        "reason": {
          "type": "string"
        },
        "action": {
          "type": "string"
        },
        "workflowId": {
          "type": "integer"
        }
      }
    },
    "WSNetServiceWithTemplate": {
      "properties": {
        "template": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "agentName": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WSTag"
          }
        }
      }
    },
    "WSDomainResourceRec": {
      "properties": {
        "owner": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "domainType": {
          "type": "string"
        },
        "effectiveStart": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "pendingDeployment": {
          "type": "boolean"
        },
        "resourceRecClass": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "TTL": {
          "type": "string"
        },
        "deviceRecFlag": {
          "type": "boolean"
        },
        "resourceRecType": {
          "type": "string"
        }
      }
    },
    "WSDhcpPolicySet": {
      "properties": {
        "container": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "product": {
          "type": "string"
        },
        "blockName": {
          "type": "string"
        },
        "scopeType": {
          "type": "string"
        },
        "dhcpPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WSDhcpPolicy"
          }
        },
        "scope": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        }
      }
    },
    "WSDnsZone": {
      "properties": {
        "catalogVersion": {
          "type": "integer"
        },
        "server": {
          "type": "string"
        },
        "zoneExtensionsPrior": {
          "type": "string"
        },
        "domainType": {
          "type": "string"
        },
        "masters": {
          "type": "string"
        },
        "zoneType": {
          "type": "string"
        },
        "allowUpdateACL": {
          "type": "string"
        },
        "updateZone": {
          "type": "string"
        },
        "acceptZoneTransfers": {
          "type": "string"
        },
        "zoneExtensionsAfter": {
          "type": "string"
        },
        "templateZone": {
          "type": "boolean"
        },
        "publishNS": {
          "type": "string"
        },
        "autogenNSGlue": {
          "type": "string"
        },
        "galaxyName": {
          "type": "string"
        },
        "view": {
          "type": "string"
        },
        "filename": {
          "type": "string"
        },
        "catalogRRsField": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "updatePolicy": {
          "type": "string"
        },
        "domainName": {
          "type": "string"
        },
        "MNAME": {
          "type": "string"
        },
        "aliasZone": {
          "type": "boolean"
        },
        "dynamicZone": {
          "type": "boolean"
        }
      }
    },
    "WSAddrpool": {
      "properties": {
        "container": {
          "type": "string"
        },
        "dhcpOptionSet": {
          "type": "string"
        },
        "endAddr": {
          "type": "string"
        },
        "lastUpdateDate": {
          "type": "string"
        },
        "lastAdmin": {
          "type": "string"
        },
        "primaryNetService": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "failoverNetService": {
          "type": "string"
        },
        "overlapInterfaceIp": {
          "type": "boolean"
        },
        "allowClientClasses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "prefixLength": {
          "type": "string"
        },
        "dhcpPolicySet": {
          "type": "string"
        },
        "sharename": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "createDate": {
          "type": "string"
        },
        "denyClientClasses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startAddr": {
          "type": "string"
        }
      }
    },
    "WSSite": {
      "properties": {
        "container": {
          "type": "string"
        },
        "siteBlockDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WSSiteBlockDetails"
          }
        },
        "siteTemplateName": {
          "type": "string"
        }
      }
    },
    "WSAggregateBlock": {
      "properties": {
        "allocationReason": {
          "type": "string"
        },
        "container": {
          "type": "string"
        },
        "createReverseDomains": {
          "type": "boolean"
        },
        "interfaceAddress": {
          "type": "string"
        },
        "blockName": {
          "type": "string"
        },
        "domainType": {
          "type": "string"
        },
        "blockType": {
          "type": "string"
        },
        "blockAddr": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "blockSize": {
          "type": "integer"
        },
        "userDefinedFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "parentBlockSize": {
          "type": "integer"
        },
        "allocationReasonDescription": {
          "type": "string"
        },
        "parentBlockAddr": {
          "type": "string"
        },
        "SWIPname": {
          "type": "string"
        },
        "interfaceName": {
          "type": "string"
        },
        "parentBlockContainer": {
          "type": "string"
        }
      }
    },
    "WSTag": {
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "WSZoneResourceRec": {
      "properties": {
        "owner": {
          "type": "string"
        },
        "server": {
          "type": "string"
        },
        "view": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "zone": {
          "type": "string"
        },
        "resourceRecClass": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "TTL": {
          "type": "string"
        },
        "resourceRecType": {
          "type": "string"
        }
      }
    },
    "WSAdmin": {
      "properties": {
        "lastName": {
          "type": "string"
        },
        "typeRoleManagedExt": {
          "type": "boolean"
        },
        "loginId": {
          "type": "string"
        },
        "address3": {
          "type": "string"
        },
        "adminType": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "externallyCreated": {
          "type": "boolean"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "policies": {
          "$ref": "#/definitions/WSAdminPolicies"
        },
        "enabled": {
          "type": "boolean"
        },
        "firstName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "pager": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "assignableRoles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "integer"
        },
        "fax": {
          "type": "string"
        },
        "authorizeExternally": {
          "type": "boolean"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "WSBlockTypeSizeACL": {
      "properties": {
        "v6Abstain": {
          "type": "boolean"
        },
        "v6BlockSize": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "v4Abstain": {
          "type": "boolean"
        },
        "blockType": {
          "type": "string"
        },
        "v4BlockSize": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "WSContainer": {
      "properties": {
        "msSiteName": {
          "type": "string"
        },
        "domainController": {
          "type": "string"
        },
        "deviceInfoTemplates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "replaceDHCPServerV6": {
          "type": "string"
        },
        "containerType": {
          "type": "string"
        },
        "ignoreBlocktypeInUse": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "allowedBlockTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "blockTypeInfoTemplates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowedAllocFromParentBlocktypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "informationTemplate": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userDefinedFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "applyDHCPToMultiparentDevContainer": {
          "type": "boolean"
        },
        "msSite": {
          "type": "boolean"
        },
        "parentName": {
          "type": "string"
        },
        "replaceDHCPServer": {
          "type": "string"
        },
        "cloudType": {
          "type": "string"
        },
        "containerName": {
          "type": "string"
        },
        "allowedRootBlockTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "integer"
        },
        "maintainHistoryRecs": {
          "type": "boolean"
        },
        "allowedDeviceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cloudObjectId": {
          "type": "string"
        },
        "requireSWIPNameBlockTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WSRootBlock": {
      "properties": {
        "allocationReason": {
          "type": "string"
        },
        "container": {
          "type": "string"
        },
        "createReverseDomains": {
          "type": "string"
        },
        "blockName": {
          "type": "string"
        },
        "domainType": {
          "type": "string"
        },
        "allowOverlappingSpace": {
          "type": "string"
        },
        "blockType": {
          "type": "string"
        },
        "blockAddr": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "blockSize": {
          "type": "string"
        },
        "userDefinedFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "organizationId": {
          "type": "string"
        },
        "allocationReasonDescription": {
          "type": "string"
        },
        "cloudType": {
          "type": "string"
        },
        "RIR": {
          "type": "string"
        },
        "SWIPname": {
          "type": "string"
        },
        "cloudObjectId": {
          "type": "string"
        }
      }
    },
    "WSResourceRecPendingApproval": {
      "properties": {
        "container": {
          "type": "string"
        },
        "dateTime": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "server": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "domainType": {
          "type": "string"
        },
        "effectiveStart": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "admin": {
          "type": "string"
        },
        "TTL": {
          "type": "string"
        },
        "resourceRecType": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "view": {
          "type": "string"
        },
        "zone": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "resourceRecClass": {
          "type": "string"
        },
        "action": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "workflowId": {
          "type": "integer"
        }
      }
    },
    "WSIpAddressRange": {
      "properties": {
        "container": {
          "type": "string"
        },
        "deviceType": {
          "type": "string"
        },
        "primaryDHCPServer": {
          "type": "string"
        },
        "resourceARecordFlag": {
          "type": "boolean"
        },
        "domainType": {
          "type": "string"
        },
        "dupWarning": {
          "type": "boolean"
        },
        "addressType": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "rangeSize": {
          "type": "string"
        },
        "startIpAddress": {
          "type": "string"
        },
        "excludeFromDiscovery": {
          "type": "boolean"
        },
        "failoverDHCPServer": {
          "type": "string"
        },
        "DHCPPolicySet": {
          "type": "string"
        },
        "userDefinedFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "endIpAddress": {
          "type": "string"
        },
        "hostnameTemplate": {
          "type": "string"
        },
        "domainName": {
          "type": "string"
        },
        "resourcePTRRecordFlag": {
          "type": "boolean"
        },
        "DHCPOptionSet": {
          "type": "string"
        }
      }
    }
  },
  "responses": {
    "default": {
      "description": "Error response",
      "schema": {
        "$ref": "#/definitions/Fault"
      }
    }
  },
  "securityDefinitions": {
    "ipcoauth": {
      "type": "oauth2",
      "flow": "password",
      "tokenUrl": "/inc-rest/api/v1/login",
      "scopes": {
        "write:ipc": "Write access to IPControl"
      }
    }
  },
  "security": [
    {
      "ipcoauth": [
        "write:ipc"
      ]
    }
  ],
  "tags": [
    {
      "name": "Address Pool",
      "description": ""
    },
    {
      "name": "Administrator",
      "description": ""
    },
    {
      "name": "Administrator Role",
      "description": ""
    },
    {
      "name": "Aggregate Block",
      "description": ""
    },
    {
      "name": "Block",
      "description": ""
    },
    {
      "name": "Child Block",
      "description": ""
    },
    {
      "name": "Root Block",
      "description": ""
    },
    {
      "name": "Container",
      "description": ""
    },
    {
      "name": "Device",
      "description": ""
    },
    {
      "name": "DHCP Option Set",
      "description": ""
    },
    {
      "name": "DHCP Policy Set",
      "description": ""
    },
    {
      "name": "DHCP Server",
      "description": ""
    },
    {
      "name": "Domain",
      "description": ""
    },
    {
      "name": "Login",
      "description": ""
    },
    {
      "name": "Network Element",
      "description": ""
    },
    {
      "name": "Network Element Interface",
      "description": ""
    },
    {
      "name": "Network Link",
      "description": ""
    },
    {
      "name": "Network Service",
      "description": ""
    },
    {
      "name": "Pending Approval",
      "description": ""
    },
    {
      "name": "Prefix Pool",
      "description": ""
    },
    {
      "name": "Resource Record",
      "description": ""
    },
    {
      "name": "Tag Association",
      "description": ""
    },
    {
      "name": "Task",
      "description": ""
    },
    {
      "name": "Zone",
      "description": ""
    }
  ]
}