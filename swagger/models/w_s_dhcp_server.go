// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WSDhcpServer w s dhcp server
// swagger:model WSDhcpServer
type WSDhcpServer struct {

	// agent
	Agent string `json:"agent,omitempty"`

	// begin extension
	BeginExtension string `json:"beginExtension,omitempty"`

	// cli args
	CliArgs string `json:"cliArgs,omitempty"`

	// cli command
	CliCommand string `json:"cliCommand,omitempty"`

	// cli password
	CliPassword string `json:"cliPassword,omitempty"`

	// cli user name
	CliUserName string `json:"cliUserName,omitempty"`

	// client classes
	ClientClasses []string `json:"clientClasses"`

	// collect backup subnets
	CollectBackupSubnets bool `json:"collectBackupSubnets,omitempty"`

	// collection password
	CollectionPassword string `json:"collectionPassword,omitempty"`

	// collection port
	CollectionPort int64 `json:"collectionPort,omitempty"`

	// collection type
	CollectionType string `json:"collectionType,omitempty"`

	// collection user
	CollectionUser string `json:"collectionUser,omitempty"`

	// config path
	ConfigPath string `json:"configPath,omitempty"`

	// ddns
	Ddns string `json:"ddns,omitempty"`

	// default threshold
	DefaultThreshold int64 `json:"defaultThreshold,omitempty"`

	// end extension
	EndExtension string `json:"endExtension,omitempty"`

	// failover Ip address
	FailoverIPAddress string `json:"failoverIpAddress,omitempty"`

	// failover peers
	FailoverPeers []string `json:"failoverPeers"`

	// failover port
	FailoverPort int64 `json:"failoverPort,omitempty"`

	// global sync
	GlobalSync bool `json:"globalSync,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`

	// lease path
	LeasePath string `json:"leasePath,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// option set
	OptionSet string `json:"optionSet,omitempty"`

	// policy set
	PolicySet string `json:"policySet,omitempty"`

	// primary peers
	PrimaryPeers []string `json:"primaryPeers"`

	// product
	Product string `json:"product,omitempty"`

	// start script
	StartScript string `json:"startScript,omitempty"`

	// stop script
	StopScript string `json:"stopScript,omitempty"`

	// tags
	Tags []*WSTag `json:"tags"`

	// v4 v6 both
	V4V6Both string `json:"v4V6Both,omitempty"`
}

// Validate validates this w s dhcp server
func (m *WSDhcpServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WSDhcpServer) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WSDhcpServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WSDhcpServer) UnmarshalBinary(b []byte) error {
	var res WSDhcpServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
