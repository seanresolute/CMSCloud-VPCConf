// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// WSAggregateBlock w s aggregate block
// swagger:model WSAggregateBlock
type WSAggregateBlock struct {

	// s w ipname
	SWIpname string `json:"SWIPname,omitempty"`

	// allocation reason
	AllocationReason string `json:"allocationReason,omitempty"`

	// allocation reason description
	AllocationReasonDescription string `json:"allocationReasonDescription,omitempty"`

	// block addr
	BlockAddr string `json:"blockAddr,omitempty"`

	// block name
	BlockName string `json:"blockName,omitempty"`

	// block size
	BlockSize int64 `json:"blockSize,omitempty"`

	// block type
	BlockType string `json:"blockType,omitempty"`

	// container
	Container string `json:"container,omitempty"`

	// create reverse domains
	CreateReverseDomains bool `json:"createReverseDomains,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// domain type
	DomainType string `json:"domainType,omitempty"`

	// interface address
	InterfaceAddress string `json:"interfaceAddress,omitempty"`

	// interface name
	InterfaceName string `json:"interfaceName,omitempty"`

	// parent block addr
	ParentBlockAddr string `json:"parentBlockAddr,omitempty"`

	// parent block container
	ParentBlockContainer string `json:"parentBlockContainer,omitempty"`

	// parent block size
	ParentBlockSize int64 `json:"parentBlockSize,omitempty"`

	// user defined fields
	UserDefinedFields []string `json:"userDefinedFields"`
}

// Validate validates this w s aggregate block
func (m *WSAggregateBlock) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WSAggregateBlock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WSAggregateBlock) UnmarshalBinary(b []byte) error {
	var res WSAggregateBlock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
