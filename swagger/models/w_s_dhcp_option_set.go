// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WSDhcpOptionSet w s dhcp option set
// swagger:model WSDhcpOptionSet
type WSDhcpOptionSet struct {

	// block name
	BlockName string `json:"blockName,omitempty"`

	// container
	Container string `json:"container,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// dhcp options
	DhcpOptions []*WSDhcpOption `json:"dhcpOptions"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// ipv6
	IPV6 bool `json:"ipv6,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// scope
	Scope string `json:"scope,omitempty"`

	// scope type
	ScopeType string `json:"scopeType,omitempty"`
}

// Validate validates this w s dhcp option set
func (m *WSDhcpOptionSet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDhcpOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WSDhcpOptionSet) validateDhcpOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.DhcpOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.DhcpOptions); i++ {
		if swag.IsZero(m.DhcpOptions[i]) { // not required
			continue
		}

		if m.DhcpOptions[i] != nil {
			if err := m.DhcpOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dhcpOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WSDhcpOptionSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WSDhcpOptionSet) UnmarshalBinary(b []byte) error {
	var res WSDhcpOptionSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
