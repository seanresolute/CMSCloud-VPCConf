// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WSAdmin w s admin
// swagger:model WSAdmin
type WSAdmin struct {

	// address1
	Address1 string `json:"address1,omitempty"`

	// address2
	Address2 string `json:"address2,omitempty"`

	// address3
	Address3 string `json:"address3,omitempty"`

	// admin type
	AdminType string `json:"adminType,omitempty"`

	// assignable roles
	AssignableRoles []string `json:"assignableRoles"`

	// authorize externally
	AuthorizeExternally bool `json:"authorizeExternally,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// externally created
	ExternallyCreated bool `json:"externallyCreated,omitempty"`

	// fax
	Fax string `json:"fax,omitempty"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// login Id
	LoginID string `json:"loginId,omitempty"`

	// pager
	Pager string `json:"pager,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`

	// policies
	Policies *WSAdminPolicies `json:"policies,omitempty"`

	// roles
	Roles []string `json:"roles"`

	// type role managed ext
	TypeRoleManagedExt bool `json:"typeRoleManagedExt,omitempty"`
}

// Validate validates this w s admin
func (m *WSAdmin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WSAdmin) validatePolicies(formats strfmt.Registry) error {

	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	if m.Policies != nil {
		if err := m.Policies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policies")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WSAdmin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WSAdmin) UnmarshalBinary(b []byte) error {
	var res WSAdmin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
