// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// WSDNSZone w s Dns zone
// swagger:model WSDnsZone
type WSDNSZone struct {

	// m n a m e
	MNAME string `json:"MNAME,omitempty"`

	// accept zone transfers
	AcceptZoneTransfers string `json:"acceptZoneTransfers,omitempty"`

	// alias zone
	AliasZone bool `json:"aliasZone,omitempty"`

	// allow update ACL
	AllowUpdateACL string `json:"allowUpdateACL,omitempty"`

	// autogen n s glue
	AutogenNSGlue string `json:"autogenNSGlue,omitempty"`

	// catalog r rs field
	CatalogRRsField []string `json:"catalogRRsField"`

	// catalog version
	CatalogVersion int64 `json:"catalogVersion,omitempty"`

	// domain name
	DomainName string `json:"domainName,omitempty"`

	// domain type
	DomainType string `json:"domainType,omitempty"`

	// dynamic zone
	DynamicZone bool `json:"dynamicZone,omitempty"`

	// filename
	Filename string `json:"filename,omitempty"`

	// galaxy name
	GalaxyName string `json:"galaxyName,omitempty"`

	// masters
	Masters string `json:"masters,omitempty"`

	// publish n s
	PublishNS string `json:"publishNS,omitempty"`

	// server
	Server string `json:"server,omitempty"`

	// template zone
	TemplateZone bool `json:"templateZone,omitempty"`

	// update policy
	UpdatePolicy string `json:"updatePolicy,omitempty"`

	// update zone
	UpdateZone string `json:"updateZone,omitempty"`

	// view
	View string `json:"view,omitempty"`

	// zone extensions after
	ZoneExtensionsAfter string `json:"zoneExtensionsAfter,omitempty"`

	// zone extensions prior
	ZoneExtensionsPrior string `json:"zoneExtensionsPrior,omitempty"`

	// zone type
	ZoneType string `json:"zoneType,omitempty"`
}

// Validate validates this w s Dns zone
func (m *WSDNSZone) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WSDNSZone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WSDNSZone) UnmarshalBinary(b []byte) error {
	var res WSDNSZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
