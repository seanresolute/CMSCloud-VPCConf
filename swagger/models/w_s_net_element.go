// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// WSNetElement w s net element
// swagger:model WSNetElement
type WSNetElement struct {

	// agent name
	AgentName string `json:"agentName,omitempty"`

	// auth password
	AuthPassword string `json:"authPassword,omitempty"`

	// global sync
	GlobalSync string `json:"globalSync,omitempty"`

	// interface name list
	InterfaceNameList []string `json:"interfaceNameList"`

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`

	// model
	Model string `json:"model,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// read community string
	ReadCommunityString string `json:"readCommunityString,omitempty"`

	// telnet password
	TelnetPassword string `json:"telnetPassword,omitempty"`

	// telnet user
	TelnetUser string `json:"telnetUser,omitempty"`

	// threshold
	Threshold string `json:"threshold,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// v3 auth password
	V3AuthPassword string `json:"v3AuthPassword,omitempty"`

	// v3 auth protocol
	V3AuthProtocol string `json:"v3AuthProtocol,omitempty"`

	// v3 context name
	V3ContextName string `json:"v3ContextName,omitempty"`

	// v3 engine Id
	V3EngineID string `json:"v3EngineId,omitempty"`

	// v3 privacy password
	V3PrivacyPassword string `json:"v3PrivacyPassword,omitempty"`

	// v3 privacy protocol
	V3PrivacyProtocol string `json:"v3PrivacyProtocol,omitempty"`

	// vendor
	Vendor string `json:"vendor,omitempty"`
}

// Validate validates this w s net element
func (m *WSNetElement) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WSNetElement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WSNetElement) UnmarshalBinary(b []byte) error {
	var res WSNetElement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
