// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WSAdminPolicies w s admin policies
// swagger:model WSAdminPolicies
type WSAdminPolicies struct {

	// address type access
	AddressTypeAccess []string `json:"addressTypeAccess"`

	// authorized functions
	AuthorizedFunctions []string `json:"authorizedFunctions"`

	// block info
	BlockInfo []*WSBlockACLInfo `json:"blockInfo"`

	// block type size access
	BlockTypeSizeAccess []*WSBlockTypeSizeACL `json:"blockTypeSizeAccess"`

	// container info
	ContainerInfo []*WSContainerACLInfo `json:"containerInfo"`

	// device type access
	DeviceTypeAccess []string `json:"deviceTypeAccess"`

	// domain access
	DomainAccess []*WSDomainACL `json:"domainAccess"`

	// net service access
	NetServiceAccess []*WSNetServiceACL `json:"netServiceAccess"`

	// policies
	Policies *WSAdminOtherPolicies `json:"policies,omitempty"`

	// resource rec type access
	ResourceRecTypeAccess []string `json:"resourceRecTypeAccess"`
}

// Validate validates this w s admin policies
func (m *WSAdminPolicies) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlockInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockTypeSizeAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetServiceAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WSAdminPolicies) validateBlockInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.BlockInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.BlockInfo); i++ {
		if swag.IsZero(m.BlockInfo[i]) { // not required
			continue
		}

		if m.BlockInfo[i] != nil {
			if err := m.BlockInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("blockInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WSAdminPolicies) validateBlockTypeSizeAccess(formats strfmt.Registry) error {

	if swag.IsZero(m.BlockTypeSizeAccess) { // not required
		return nil
	}

	for i := 0; i < len(m.BlockTypeSizeAccess); i++ {
		if swag.IsZero(m.BlockTypeSizeAccess[i]) { // not required
			continue
		}

		if m.BlockTypeSizeAccess[i] != nil {
			if err := m.BlockTypeSizeAccess[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("blockTypeSizeAccess" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WSAdminPolicies) validateContainerInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.ContainerInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.ContainerInfo); i++ {
		if swag.IsZero(m.ContainerInfo[i]) { // not required
			continue
		}

		if m.ContainerInfo[i] != nil {
			if err := m.ContainerInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("containerInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WSAdminPolicies) validateDomainAccess(formats strfmt.Registry) error {

	if swag.IsZero(m.DomainAccess) { // not required
		return nil
	}

	for i := 0; i < len(m.DomainAccess); i++ {
		if swag.IsZero(m.DomainAccess[i]) { // not required
			continue
		}

		if m.DomainAccess[i] != nil {
			if err := m.DomainAccess[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("domainAccess" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WSAdminPolicies) validateNetServiceAccess(formats strfmt.Registry) error {

	if swag.IsZero(m.NetServiceAccess) { // not required
		return nil
	}

	for i := 0; i < len(m.NetServiceAccess); i++ {
		if swag.IsZero(m.NetServiceAccess[i]) { // not required
			continue
		}

		if m.NetServiceAccess[i] != nil {
			if err := m.NetServiceAccess[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("netServiceAccess" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WSAdminPolicies) validatePolicies(formats strfmt.Registry) error {

	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	if m.Policies != nil {
		if err := m.Policies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policies")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WSAdminPolicies) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WSAdminPolicies) UnmarshalBinary(b []byte) error {
	var res WSAdminPolicies
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
