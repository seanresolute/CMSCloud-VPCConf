// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// WSResourceRecPendingApproval w s resource rec pending approval
// swagger:model WSResourceRecPendingApproval
type WSResourceRecPendingApproval struct {

	// TTL
	TTL string `json:"TTL,omitempty"`

	// action
	Action string `json:"action,omitempty"`

	// admin
	Admin string `json:"admin,omitempty"`

	// comment
	Comment string `json:"comment,omitempty"`

	// container
	Container string `json:"container,omitempty"`

	// data
	Data string `json:"data,omitempty"`

	// date time
	DateTime string `json:"dateTime,omitempty"`

	// domain
	Domain string `json:"domain,omitempty"`

	// domain type
	DomainType string `json:"domainType,omitempty"`

	// effective start
	EffectiveStart string `json:"effectiveStart,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`

	// owner
	Owner string `json:"owner,omitempty"`

	// resource rec class
	ResourceRecClass string `json:"resourceRecClass,omitempty"`

	// resource rec type
	ResourceRecType string `json:"resourceRecType,omitempty"`

	// server
	Server string `json:"server,omitempty"`

	// view
	View string `json:"view,omitempty"`

	// workflow Id
	WorkflowID int64 `json:"workflowId,omitempty"`

	// zone
	Zone string `json:"zone,omitempty"`
}

// Validate validates this w s resource rec pending approval
func (m *WSResourceRecPendingApproval) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WSResourceRecPendingApproval) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WSResourceRecPendingApproval) UnmarshalBinary(b []byte) error {
	var res WSResourceRecPendingApproval
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
